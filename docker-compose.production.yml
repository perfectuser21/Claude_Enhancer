# =============================================================================
# Production Docker Compose for Perfect21 Claude Enhancer
# Optimized for production deployment with security and performance
# =============================================================================

version: '3.8'

# Production-specific network configuration
networks:
  claude-enhancer-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Production volumes with backup considerations
volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-enhancer/data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-enhancer/data/redis
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-enhancer/logs

services:
  # ==========================================================================
  # Main Application (Production Configuration)
  # ==========================================================================
  claude-enhancer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION}
    container_name: claude-enhancer-prod
    restart: unless-stopped
    environment:
      - CLAUDE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
      - WORKERS=4
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - ./.claude:/app/.claude:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-enhancer-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev

  # ==========================================================================
  # Database (Production Configuration)
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: claude-enhancer-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - claude-enhancer-prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # Redis (Production Configuration)
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: claude-enhancer-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data_prod:/data
    networks:
      - claude-enhancer-prod
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # Load Balancer (Production)
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: claude-enhancer-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      - claude-enhancer
    networks:
      - claude-enhancer-prod
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # Monitoring (Production)
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-enhancer-prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://${DOMAIN}/prometheus/'
      - '--web.route-prefix=/'
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data_prod:/prometheus
    networks:
      - claude-enhancer-prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # ==========================================================================
  # Log Aggregation (Production)
  # ==========================================================================
  fluentd:
    image: fluent/fluentd:v1.16-1
    container_name: claude-enhancer-fluentd-prod
    restart: unless-stopped
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
    networks:
      - claude-enhancer-prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true

# Production volume definitions with backup integration
volumes:
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-enhancer/data/prometheus