# Perfect21 行为规范规则
# 定义Claude Code应该如何工作的规则和模式

version: "1.0"
description: "Perfect21框架核心规则 - 指导Claude Code的执行行为"

# ========================================
# 1. Agent组合规则
# ========================================
agent_patterns:
  # 认证系统必须使用的Agent组合
  authentication:
    description: "用户认证、登录、权限管理相关任务"
    keywords: ["登录", "认证", "auth", "用户", "权限", "JWT", "session"]
    required_agents:
      - backend-architect      # 设计认证架构
      - security-auditor       # 安全审查
      - test-engineer         # 测试覆盖
      - api-designer          # API设计
    execution_mode: parallel   # 必须并行执行
    quality_requirements:
      - "密码必须使用bcrypt或argon2加密"
      - "JWT必须设置合理的过期时间"
      - "所有认证端点必须有rate limiting"
      - "敏感操作需要二次验证"

  # API开发必须使用的Agent组合
  api_development:
    description: "RESTful API、GraphQL接口开发"
    keywords: ["API", "接口", "REST", "GraphQL", "endpoint"]
    required_agents:
      - api-designer          # API设计
      - backend-architect     # 后端架构
      - test-engineer        # 测试用例
      - technical-writer     # API文档
    execution_mode: parallel
    quality_requirements:
      - "必须遵循RESTful规范"
      - "必须有OpenAPI/Swagger文档"
      - "必须有请求验证"
      - "必须有错误处理"

  # 数据库设计必须使用的Agent组合
  database_design:
    description: "数据库schema设计、优化、迁移"
    keywords: ["数据库", "database", "schema", "SQL", "MongoDB", "Redis"]
    required_agents:
      - database-specialist   # 数据库专家
      - backend-architect    # 架构设计
      - performance-engineer # 性能优化
    execution_mode: sequential  # 顺序执行（先设计后优化）
    quality_requirements:
      - "必须有索引设计"
      - "必须考虑数据一致性"
      - "必须有备份策略"
      - "必须有迁移脚本"

  # 前端开发必须使用的Agent组合
  frontend_development:
    description: "前端组件、页面、交互开发"
    keywords: ["前端", "frontend", "React", "Vue", "UI", "组件"]
    required_agents:
      - frontend-specialist   # 前端开发
      - ux-designer          # UX设计
      - accessibility-auditor # 可访问性
      - test-engineer        # 测试
    execution_mode: parallel
    quality_requirements:
      - "必须响应式设计"
      - "必须考虑可访问性"
      - "必须有loading和error状态"
      - "必须优化性能"

  # 全栈开发必须使用的Agent组合
  fullstack_development:
    description: "完整功能开发，包含前后端"
    keywords: ["全栈", "fullstack", "完整功能", "前后端"]
    required_agents:
      - fullstack-engineer    # 全栈开发
      - database-specialist   # 数据库
      - test-engineer        # 测试
      - devops-engineer      # 部署
    execution_mode: parallel
    quality_requirements:
      - "前后端必须分离"
      - "必须有完整的测试"
      - "必须容器化部署"

  # 性能优化必须使用的Agent组合
  performance_optimization:
    description: "性能分析、优化、调优"
    keywords: ["性能", "优化", "performance", "速度", "缓存"]
    required_agents:
      - performance-engineer  # 性能专家
      - backend-architect    # 架构优化
      - monitoring-specialist # 监控
    execution_mode: sequential
    quality_requirements:
      - "必须有性能基准测试"
      - "必须有监控指标"
      - "优化前后必须对比"

# ========================================
# 2. 执行模式规则
# ========================================
execution_rules:
  # 并行执行的条件
  parallel_conditions:
    - condition: "task_involves_multiple_domains"
      description: "任务涉及多个独立领域时必须并行"
      example: "同时需要前端、后端、数据库工作"

    - condition: "agent_count >= 3"
      description: "需要3个或更多agents时必须并行"
      reason: "提高执行效率，避免顺序等待"

    - condition: "time_critical"
      description: "时间紧急的任务必须并行"
      keywords: ["紧急", "urgent", "ASAP", "立即"]

  # 顺序执行的条件
  sequential_conditions:
    - condition: "has_dependencies"
      description: "存在明确依赖关系时顺序执行"
      example: "必须先设计，再实现，最后测试"

    - condition: "incremental_refinement"
      description: "需要逐步完善时顺序执行"
      example: "初版 -> 优化 -> 最终版"

  # 同步点规则
  sync_points:
    - name: "design_review"
      after_phase: "设计阶段"
      validation: "所有设计文档必须一致"

    - name: "integration_check"
      after_phase: "并行开发"
      validation: "所有模块必须能集成"

    - name: "quality_gate"
      after_phase: "实现阶段"
      validation: "必须通过所有质量检查"

# ========================================
# 3. Git Hook触发规则
# ========================================
hook_triggers:
  pre_commit:
    description: "提交前自动触发"
    triggers_on:
      - "git commit"
      - "代码变更"
    required_agents:
      - code-reviewer        # 代码审查
    optional_agents:
      - security-auditor     # 安全检查（如果涉及认证）
      - test-engineer       # 测试（如果修改较大）
    rules:
      - "主分支必须严格检查"
      - "功能分支基础检查"
      - "紧急修复可以跳过"

  pre_push:
    description: "推送前自动触发"
    triggers_on:
      - "git push"
    required_agents:
      - test-engineer       # 运行测试
      - security-auditor    # 安全扫描
    rules:
      - "禁止直接推送到main/master"
      - "必须所有测试通过"
      - "必须无安全漏洞"

  post_merge:
    description: "合并后自动触发"
    triggers_on:
      - "PR merge"
      - "分支合并"
    required_agents:
      - devops-engineer     # 部署准备
      - monitoring-specialist # 监控设置
    rules:
      - "自动部署到staging"
      - "设置监控告警"
      - "通知相关人员"

# ========================================
# 4. 质量门规则
# ========================================
quality_gates:
  code_quality:
    description: "代码质量标准"
    metrics:
      - name: "代码覆盖率"
        minimum: 80
        target: 90
      - name: "圈复杂度"
        maximum: 10
      - name: "重复代码"
        maximum: 5  # 百分比

  security:
    description: "安全标准"
    checks:
      - "无SQL注入风险"
      - "无XSS漏洞"
      - "无敏感信息泄露"
      - "依赖无已知漏洞"

  performance:
    description: "性能标准"
    metrics:
      - name: "API响应时间"
        p95: 200  # ms
        p99: 500  # ms
      - name: "页面加载时间"
        target: 3  # 秒
      - name: "内存使用"
        maximum: 512  # MB

# ========================================
# 5. 任务识别规则
# ========================================
task_recognition:
  # 如何识别任务类型
  patterns:
    - pattern: "实现.*登录|用户.*认证|JWT|OAuth"
      type: "authentication"

    - pattern: "开发.*API|设计.*接口|RESTful"
      type: "api_development"

    - pattern: "数据库.*设计|表结构|Schema"
      type: "database_design"

    - pattern: "前端.*开发|React.*组件|页面.*设计"
      type: "frontend_development"

    - pattern: "优化.*性能|提升.*速度|减少.*延迟"
      type: "performance_optimization"

# ========================================
# 6. 最佳实践规则
# ========================================
best_practices:
  general:
    - "永远不要只用1-2个agents，至少3个"
    - "复杂任务必须有同步点验证"
    - "关键操作必须有回滚方案"
    - "所有变更必须有测试覆盖"

  security:
    - "密码永远不要明文存储"
    - "API必须有认证和授权"
    - "敏感操作必须有审计日志"
    - "输入必须验证和清理"

  performance:
    - "数据库查询必须有索引"
    - "大数据必须分页"
    - "静态资源必须缓存"
    - "异步处理长时间操作"

# ========================================
# 7. 错误处理规则
# ========================================
error_handling:
  principles:
    - "永远不要静默失败"
    - "提供有意义的错误信息"
    - "记录完整的错误上下文"
    - "提供恢复建议"

  required_info:
    - error_code
    - error_message
    - timestamp
    - context
    - stack_trace
    - recovery_suggestions