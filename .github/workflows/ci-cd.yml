# Claude Enhancer - Comprehensive CI/CD Pipeline
# Automated testing, building, security scanning, and deployment

name: Claude Enhancer CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: claude-enhancer
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ==========================================
  # Code Quality & Security Checks
  # ==========================================
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: auth-system/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r hello-world-api/requirements.txt
        pip install pre-commit safety bandit semgrep

    - name: Install Node.js dependencies
      run: |
        cd auth-system
        npm ci

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

    - name: Python security scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Python vulnerability check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Static code analysis (Semgrep)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    - name: Node.js security audit
      run: |
        cd auth-system
        npm audit --audit-level=moderate
        npm audit --json > ../npm-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          npm-audit-report.json

  # ==========================================
  # Unit & Integration Tests
  # ==========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-check

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: auth-system/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r hello-world-api/requirements.txt
        pip install pytest-cov pytest-xdist
        cd auth-system && npm ci

    - name: Run Python tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd hello-world-api
        pytest --cov=. --cov-report=xml --cov-report=html -v
        cd ..

    - name: Run Node.js tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
      run: |
        cd auth-system
        npm test -- --coverage --watchAll=false

    - name: Test Claude Enhancer hooks
      run: |
        chmod +x .claude/hooks/*.sh
        bash .claude/hooks/test_hooks.sh

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./hello-world-api/coverage.xml,./auth-system/coverage/lcov.info
        flags: unittests
        name: claude-enhancer-coverage

  # ==========================================
  # Docker Build & Security Scan
  # ==========================================
  build:
    name: Build & Scan Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================
  # End-to-End Testing
  # ==========================================
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cp .env.example .env
        sed -i 's/your-super-secure-database-password-here/test_db_password/' .env
        sed -i 's/your-redis-secure-password-here/test_redis_password/' .env
        sed -i 's/your-super-secret-jwt-access-key-minimum-256-bits-long-random-string/test_jwt_access_secret_for_testing_only/' .env
        sed -i 's/your-super-secret-jwt-refresh-key-minimum-256-bits-long-different-string/test_jwt_refresh_secret_for_testing_only/' .env
        sed -i 's/your-grafana-admin-password/test_grafana_password/' .env

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --wait
        sleep 30  # Wait for services to be ready

    - name: Run health checks
      run: |
        # Check Claude Enhancer health
        curl -f http://localhost:8080/health || exit 1

        # Check Hello World API
        curl -f http://localhost:8000/docs || exit 1

        # Check Auth System
        curl -f http://localhost:3000/api/v1/health || exit 1

    - name: Run API integration tests
      run: |
        # Test Hello World API
        response=$(curl -s http://localhost:8000/)
        echo "API Response: $response"

        # Test Authentication API
        curl -X POST http://localhost:3000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPass123!","firstName":"Test","lastName":"User"}'

    - name: Check service logs
      if: failure()
      run: |
        docker-compose logs claude-enhancer
        docker-compose logs postgres
        docker-compose logs redis

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # ==========================================
  # Performance Testing
  # ==========================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        cp .env.example .env
        sed -i 's/your-super-secure-database-password-here/perf_test_password/' .env
        sed -i 's/your-redis-secure-password-here/perf_test_redis_password/' .env

    - name: Start services
      run: |
        docker-compose up -d --wait
        sleep 30

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        cat > perf-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '30s', target: 20 },
            { duration: '1m', target: 20 },
            { duration: '30s', target: 0 },
          ],
        };

        export default function () {
          // Test Hello World API
          let res1 = http.get('http://localhost:8000/');
          check(res1, { 'status was 200': (r) => r.status == 200 });

          // Test Health Check
          let res2 = http.get('http://localhost:8080/health');
          check(res2, { 'health check ok': (r) => r.status == 200 });

          sleep(1);
        }
        EOF
        k6 run perf-test.js

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # ==========================================
  # Deploy to Staging
  # ==========================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, e2e-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could include SSH to staging server, kubectl apply, etc.

  # ==========================================
  # Deploy to Production
  # ==========================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, e2e-test, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment logic here

  # ==========================================
  # Security Monitoring
  # ==========================================
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'

    - name: Notify security team
      if: failure()
      run: |
        echo "🚨 Security scan failed! Notifying security team..."
        # Add notification logic here (Slack, email, etc.)

# ==========================================
# Scheduled Jobs
# ==========================================
# Run security scans weekly
# schedule:
#   - cron: '0 2 * * 1'