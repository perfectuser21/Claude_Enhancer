# =============================================================================
# Claude Enhancer Claude Enhancer - Complete DevOps CI/CD Pipeline
# Enterprise-grade pipeline with blue-green deployment and comprehensive monitoring
# =============================================================================

name: Claude Enhancer Claude Enhancer DevOps Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scans
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - rolling
        - blue-green
        - canary
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: perfect21/claude-enhancer
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.5.7'
  KUBECTL_VERSION: '1.28.2'
  HELM_VERSION: '3.13.0'
  BUILD_PLATFORMS: linux/amd64,linux/arm64

jobs:
  # ==========================================
  # Phase 1: Code Quality & Security Scanning
  # ==========================================
  code-quality:
    name: üîç Code Quality & Security Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      quality-gate: ${{ steps.quality-gate.outputs.passed }}
      security-score: ${{ steps.security-scan.outputs.score }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: auth-system/package-lock.json

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r hello-world-api/requirements.txt
        pip install pre-commit safety bandit semgrep

    - name: Install Node.js dependencies
      run: |
        cd auth-system
        npm ci

    - name: Run pre-commit hooks
      run: |
        pre-commit install
        pre-commit run --all-files

    - name: Python security scan (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Python vulnerability check (Safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Static code analysis (Semgrep)
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto .

    - name: Node.js security audit
      run: |
        cd auth-system
        npm audit --audit-level=moderate
        npm audit --json > ../npm-audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json
          npm-audit-report.json

  # ==========================================
  # Phase 2: Comprehensive Testing Suite
  # ==========================================
  test-suite:
    name: üß™ Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: code-quality
    if: always() && (needs.code-quality.result == 'success' || github.event.inputs.skip_tests == 'true')
    strategy:
      matrix:
        test-type: [unit, integration, performance, security]
    outputs:
      test-results: ${{ steps.test-summary.outputs.results }}
      coverage: ${{ steps.coverage.outputs.percentage }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: auth-system/package-lock.json

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r hello-world-api/requirements.txt
        pip install pytest-cov pytest-xdist
        cd auth-system && npm ci

    - name: Run Python tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        cd hello-world-api
        pytest --cov=. --cov-report=xml --cov-report=html -v
        cd ..

    - name: Run Node.js tests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: test_user
        DB_PASSWORD: test_password
      run: |
        cd auth-system
        npm test -- --coverage --watchAll=false

    - name: Test Claude Enhancer hooks
      run: |
        chmod +x .claude/hooks/*.sh
        bash .claude/hooks/test_hooks.sh

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./hello-world-api/coverage.xml,./auth-system/coverage/lcov.info
        flags: unittests
        name: claude-enhancer-coverage

  # ==========================================
  # Phase 3: Multi-Platform Container Build
  # ==========================================
  container-build:
    name: üê≥ Multi-Platform Container Build
    runs-on: ubuntu-latest
    needs: [code-quality, test-suite]
    if: always() && (needs.test-suite.result == 'success' || github.event.inputs.skip_tests == 'true')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
      vulnerability-score: ${{ steps.security-scan.outputs.score }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================
  # Phase 4: Infrastructure Provisioning
  # ==========================================
  infrastructure:
    name: üèóÔ∏è Infrastructure Provisioning
    runs-on: ubuntu-latest
    needs: container-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    outputs:
      cluster-endpoint: ${{ steps.terraform.outputs.cluster-endpoint }}
      infrastructure-status: ${{ steps.terraform.outputs.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

    - name: Terraform Init
      working-directory: terraform
      run: |
        terraform init
        terraform workspace select ${{ github.event.inputs.environment || 'staging' }} || terraform workspace new ${{ github.event.inputs.environment || 'staging' }}

    - name: Terraform Plan
      id: plan
      working-directory: terraform
      run: |
        terraform plan -var="environment=${{ github.event.inputs.environment || 'staging' }}" -out=tfplan
        terraform show -no-color tfplan > tfplan.txt

    - name: Terraform Apply
      id: terraform
      working-directory: terraform
      run: |
        terraform apply tfplan
        echo "cluster-endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ github.event.inputs.environment || 'staging' }}
        path: terraform/tfplan.txt

  # ==========================================
  # Phase 5: Application Deployment
  # ==========================================
  deploy-application:
    name: üöÄ Blue-Green Application Deployment
    runs-on: ubuntu-latest
    needs: [container-build, infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-status: ${{ steps.deploy.outputs.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-west-2' }} --name claude-enhancer-${{ github.event.inputs.environment || 'staging' }}

    - name: Deploy with blue-green strategy
      id: deploy
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        IMAGE_TAG: ${{ github.sha }}
        DEPLOYMENT_STRATEGY: ${{ github.event.inputs.deployment_strategy || 'blue-green' }}
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh --environment "$ENVIRONMENT" --tag "$IMAGE_TAG" --strategy "$DEPLOYMENT_STRATEGY"

        # Get deployment URL
        LOAD_BALANCER_IP=$(kubectl get service nginx-service -n claude-enhancer -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "url=https://$LOAD_BALANCER_IP" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Wait for deployment readiness
      run: |
        kubectl wait --for=condition=available deployment/claude-enhancer -n claude-enhancer --timeout=600s
        kubectl get pods -n claude-enhancer

  # ==========================================
  # Phase 6: End-to-End Testing
  # ==========================================
  e2e-testing:
    name: üéØ End-to-End Testing
    runs-on: ubuntu-latest
    needs: deploy-application
    if: always() && needs.deploy-application.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cp .env.example .env
        sed -i 's/your-super-secure-database-password-here/test_db_password/' .env
        sed -i 's/your-redis-secure-password-here/test_redis_password/' .env
        sed -i 's/your-super-secret-jwt-access-key-minimum-256-bits-long-random-string/test_jwt_access_secret_for_testing_only/' .env
        sed -i 's/your-super-secret-jwt-refresh-key-minimum-256-bits-long-different-string/test_jwt_refresh_secret_for_testing_only/' .env
        sed -i 's/your-grafana-admin-password/test_grafana_password/' .env

    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --wait
        sleep 30  # Wait for services to be ready

    - name: Run health checks
      run: |
        # Check Claude Enhancer health
        curl -f http://localhost:8080/health || exit 1

        # Check Hello World API
        curl -f http://localhost:8000/docs || exit 1

        # Check Auth System
        curl -f http://localhost:3000/api/v1/health || exit 1

    - name: Run API integration tests
      run: |
        # Test Hello World API
        response=$(curl -s http://localhost:8000/)
        echo "API Response: $response"

        # Test Authentication API
        curl -X POST http://localhost:3000/api/v1/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"TestPass123!","firstName":"Test","lastName":"User"}'

    - name: Check service logs
      if: failure()
      run: |
        docker-compose logs claude-enhancer
        docker-compose logs postgres
        docker-compose logs redis

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # ==========================================
  # Phase 7: Performance & Load Testing
  # ==========================================
  performance-testing:
    name: ‚ö° Performance & Load Testing
    runs-on: ubuntu-latest
    needs: e2e-testing
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        cp .env.example .env
        sed -i 's/your-super-secure-database-password-here/perf_test_password/' .env
        sed -i 's/your-redis-secure-password-here/perf_test_redis_password/' .env

    - name: Start services
      run: |
        docker-compose up -d --wait
        sleep 30

    - name: Install k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        cat > perf-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          stages: [
            { duration: '30s', target: 20 },
            { duration: '1m', target: 20 },
            { duration: '30s', target: 0 },
          ],
        };

        export default function () {
          // Test Hello World API
          let res1 = http.get('http://localhost:8000/');
          check(res1, { 'status was 200': (r) => r.status == 200 });

          // Test Health Check
          let res2 = http.get('http://localhost:8080/health');
          check(res2, { 'health check ok': (r) => r.status == 200 });

          sleep(1);
        }
        EOF
        k6 run perf-test.js

    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # ==========================================
  # Phase 8: Monitoring & Observability Setup
  # ==========================================
  monitoring-setup:
    name: üìä Monitoring & Observability
    runs-on: ubuntu-latest
    needs: deploy-application
    if: always() && needs.deploy-application.result == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-west-2' }} --name claude-enhancer-${{ github.event.inputs.environment || 'staging' }}

    - name: Deploy monitoring stack
      run: |
        echo "üìä Setting up monitoring and observability..."
        kubectl apply -f k8s/monitoring.yaml

        # Wait for monitoring components
        kubectl wait --for=condition=available deployment/prometheus -n claude-enhancer --timeout=300s
        kubectl wait --for=condition=available deployment/grafana -n claude-enhancer --timeout=300s
        kubectl wait --for=condition=available deployment/alertmanager -n claude-enhancer --timeout=300s

    - name: Configure dashboards
      run: |
        echo "üìà Configuring Grafana dashboards..."
        # Import custom dashboards
        kubectl create configmap grafana-dashboards \
          --from-file=monitoring/grafana/dashboards/ \
          -n claude-enhancer --dry-run=client -o yaml | kubectl apply -f -

    - name: Setup alerts
      run: |
        echo "üö® Configuring alerting rules..."
        kubectl create configmap prometheus-rules \
          --from-file=monitoring/alert_rules.yml \
          -n claude-enhancer --dry-run=client -o yaml | kubectl apply -f -

  # ==========================================
  # Phase 9: Production Release (Manual Gate)
  # ==========================================
  production-release:
    name: üåü Production Release
    runs-on: ubuntu-latest
    needs: [deploy-application, e2e-testing, performance-testing, monitoring-setup]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Production deployment approval
      run: |
        echo "üéØ Production deployment approved"
        echo "üìä Deployment Summary:"
        echo "- Environment: production"
        echo "- Image: ${{ needs.container-build.outputs.image-tags }}"
        echo "- Strategy: ${{ github.event.inputs.deployment_strategy }}"
        echo "- Test Coverage: ${{ needs.test-suite.outputs.coverage }}%"
        echo "- Security Score: ${{ needs.container-build.outputs.vulnerability-score }}"

    - name: Notify stakeholders
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          üöÄ *Production Deployment Complete*

          *Environment:* Production
          *Version:* ${{ github.sha }}
          *Image:* ${{ needs.container-build.outputs.image-tags }}
          *Status:* ${{ job.status }}

          *Metrics:*
          ‚Ä¢ Test Coverage: ${{ needs.test-suite.outputs.coverage }}%
          ‚Ä¢ Security Score: ${{ needs.container-build.outputs.vulnerability-score }}
          ‚Ä¢ Deployment URL: ${{ needs.deploy-application.outputs.deployment-url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # Continuous Security Monitoring
  # ==========================================
  security-monitoring:
    name: üõ°Ô∏è Continuous Security Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run SAST analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: python, javascript

    - name: Dependency vulnerability check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        npm audit --audit-level=moderate --json > npm-audit.json || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          trivy-results.sarif
          safety-report.json
          npm-audit.json

    - name: Notify security team
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#security-alerts'
        text: |
          üö® *Security Scan Alert*

          Security vulnerabilities detected in Claude Enhancer Claude Enhancer

          *Repository:* ${{ github.repository }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.sha }}

          Please review the security reports in the workflow artifacts.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ==========================================
  # Rollback Mechanism
  # ==========================================
  rollback:
    name: üîÑ Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    needs: [deploy-application, e2e-testing]
    environment: ${{ github.event.inputs.environment || 'staging' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ vars.AWS_REGION || 'us-west-2' }} --name claude-enhancer-${{ github.event.inputs.environment || 'staging' }}

    - name: Perform rollback
      run: |
        echo "üîÑ Performing emergency rollback..."
        kubectl rollout undo deployment/claude-enhancer -n claude-enhancer
        kubectl rollout status deployment/claude-enhancer -n claude-enhancer --timeout=300s

    - name: Verify rollback
      run: |
        echo "‚úÖ Verifying rollback success..."
        kubectl get pods -n claude-enhancer
        # Perform basic health check
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=claude-enhancer -n claude-enhancer --timeout=300s

    - name: Notify rollback completion
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#incidents'
        text: |
          üîÑ *Emergency Rollback Completed*

          *Environment:* ${{ github.event.inputs.environment || 'staging' }}
          *Status:* ${{ job.status }}
          *Triggered by:* Deployment failure

          The application has been rolled back to the previous stable version.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

# ==========================================
# Scheduled Jobs
# ==========================================
# Run security scans weekly
# schedule:
#   - cron: '0 2 * * 1'