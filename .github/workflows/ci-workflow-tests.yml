name: CI Workflow Tests

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'P[0-7]/**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # ════════════════════════════════════════════════════════════
  # Job 1: 快速验证（< 2分钟）
  # ════════════════════════════════════════════════════════════
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Quick Validation
        run: |
          chmod +x test/ci_quick_validation.sh
          bash test/ci_quick_validation.sh

      - name: Summary
        if: always()
        run: |
          echo "## Quick Validation Results" >> $GITHUB_STEP_SUMMARY
          if [ $? -eq 0 ]; then
            echo "✅ All quick checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some quick checks failed" >> $GITHUB_STEP_SUMMARY
          fi

  # ════════════════════════════════════════════════════════════
  # Job 2: Phase顺序测试
  # ════════════════════════════════════════════════════════════
  phase-order-tests:
    name: Phase Order & Gate Tests
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Git Hooks
        run: |
          if [ -f .claude/install.sh ]; then
            bash .claude/install.sh
          fi

      - name: Test Phase Transitions
        run: |
          # TC-001: P3 with P2 gate
          echo "Testing Phase order validation..."
          mkdir -p .phase .gates
          echo "P3" > .phase/current
          touch .gates/02.ok

          echo "test" > src/test.js
          git config user.name "CI Test"
          git config user.email "ci@test.com"
          git add src/test.js

          # Should pass
          if git commit -m "test: P3 with P2 gate" 2>&1 | grep -q "Phase顺序验证通过"; then
            echo "✅ Phase order test passed"
          else
            echo "⚠️ Phase order check may have issues"
          fi

      - name: Test Phase Skip Warning
        run: |
          # TC-002: P5 without P4 gate
          echo "P5" > .phase/current
          rm -f .gates/04.ok

          echo "# Review" > docs/REVIEW.md
          git add docs/REVIEW.md

          # Should warn but not block
          git commit -m "test: P5 without P4 gate" 2>&1 | tee output.txt || true
          if grep -q "警告" output.txt || grep -q "gate不存在" output.txt; then
            echo "✅ Phase skip warning works"
          fi

      - name: Upload Phase Test Logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: phase-test-logs
          path: |
            .workflow/logs/
            output.txt

  # ════════════════════════════════════════════════════════════
  # Job 3: 路径白名单测试
  # ════════════════════════════════════════════════════════════
  path-whitelist-tests:
    name: Path Whitelist Tests
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Hooks
        run: |
          if [ -f .claude/install.sh ]; then
            bash .claude/install.sh
          fi

      - name: Test P1 Allowed Paths
        run: |
          # TC-005: P1 can modify docs/PLAN.md
          mkdir -p .phase
          echo "P1" > .phase/current

          cat > docs/PLAN.md <<EOF
          # Plan
          ## 任务清单
          - T1: Task 1
          - T2: Task 2
          - T3: Task 3
          - T4: Task 4
          - T5: Task 5
          ## 受影响文件清单
          - src/test.js
          ## 回滚方案
          Revert
          EOF

          git config user.name "CI Test"
          git config user.email "ci@test.com"
          git add docs/PLAN.md

          if git commit -m "test: P1 allowed path" 2>&1 | grep -q "路径验证通过"; then
            echo "✅ P1 allowed path test passed"
          else
            echo "⚠️ Path whitelist may not be working"
          fi

      - name: Test P1 Blocked Paths
        run: |
          # TC-006: P1 cannot modify src/
          echo "P1" > .phase/current

          echo "test" > src/blocked.js
          git add src/blocked.js

          # Should fail
          if ! git commit -m "test: P1 blocked path" 2>&1 | grep -q "不在允许路径"; then
            echo "❌ Path blocking not working!"
            exit 1
          else
            echo "✅ P1 blocked path test passed"
          fi

  # ════════════════════════════════════════════════════════════
  # Job 4: Must_produce测试
  # ════════════════════════════════════════════════════════════
  must-produce-tests:
    name: Must Produce Tests
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Hooks
        run: bash .claude/install.sh || true

      - name: Test P1 Insufficient Tasks
        run: |
          # TC-009: P1 with < 5 tasks should fail
          mkdir -p .phase .gates
          echo "P1" > .phase/current

          cat > docs/PLAN.md <<EOF
          # Plan
          ## 任务清单
          - T1
          - T2
          - T3
          ## 受影响文件清单
          - src/test.js
          ## 回滚方案
          Revert
          EOF

          git config user.name "CI Test"
          git config user.email "ci@test.com"
          git add docs/PLAN.md
          touch .gates/01.ok
          git add .gates/01.ok

          # Should fail due to insufficient tasks
          if git commit -m "test: P1 insufficient" 2>&1 | grep -q "必须产出未完成"; then
            echo "✅ Must produce check works"
          else
            echo "⚠️ Must produce check may need verification"
          fi

  # ════════════════════════════════════════════════════════════
  # Job 5: 安全和Linting测试
  # ════════════════════════════════════════════════════════════
  security-linting-tests:
    name: Security & Linting Tests
    runs-on: ubuntu-latest
    needs: quick-validation
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Shellcheck
        run: sudo apt-get update && sudo apt-get install -y shellcheck

      - name: Install Hooks
        run: bash .claude/install.sh || true

      - name: Test Hardcoded Password Detection
        run: |
          # TC-015: Detect hardcoded passwords
          mkdir -p .phase .gates
          echo "P3" > .phase/current
          touch .gates/02.ok

          cat > src/config.js <<EOF
          const config = {
              password: "secret123"
          };
          EOF

          git config user.name "CI Test"
          git config user.email "ci@test.com"
          git add src/config.js

          # Should be blocked
          if git commit -m "test: security" 2>&1 | grep -q "硬编码密码"; then
            echo "✅ Security check works"
          else
            echo "⚠️ Security check may need verification"
          fi

      - name: Test Shellcheck Integration
        run: |
          # TC-014: Shellcheck warnings
          cat > src/bad_script.sh <<'EOF'
          #!/bin/bash
          echo $undefined_var
          EOF

          git add src/bad_script.sh

          # Should be blocked
          if git commit -m "test: shellcheck" 2>&1 | grep -q "shellcheck"; then
            echo "✅ Shellcheck integration works"
          else
            echo "⚠️ Shellcheck may not be configured"
          fi

  # ════════════════════════════════════════════════════════════
  # Job 6: 完整测试套件（15个用例）
  # ════════════════════════════════════════════════════════════
  comprehensive-test:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [phase-order-tests, path-whitelist-tests, must-produce-tests, security-linting-tests]
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          # npm install (if needed)

      - name: Run Comprehensive Tests
        run: |
          chmod +x test/ci_workflow_comprehensive_test.sh
          bash test/ci_workflow_comprehensive_test.sh

      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-report
          path: test/reports/ci_workflow_test_*.md

      - name: Generate Summary
        if: always()
        run: |
          echo "## Comprehensive Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test/reports/ci_workflow_test_*.md ]; then
            # Extract summary from report
            latest_report=$(ls -t test/reports/ci_workflow_test_*.md | head -1)

            echo "### Test Statistics" >> $GITHUB_STEP_SUMMARY
            grep -A 5 "执行概要" "$latest_report" | tail -5 >> $GITHUB_STEP_SUMMARY || echo "Report parsing failed" >> $GITHUB_STEP_SUMMARY
          fi

  # ════════════════════════════════════════════════════════════
  # Job 7: 测试报告汇总
  # ════════════════════════════════════════════════════════════
  report-summary:
    name: Test Report Summary
    runs-on: ubuntu-latest
    needs: comprehensive-test
    if: always()

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v3

      - name: Generate Final Summary
        run: |
          echo "# CI Workflow Test Results" > summary.md
          echo "" >> summary.md
          echo "**Date**: $(date)" >> summary.md
          echo "**Branch**: ${{ github.ref_name }}" >> summary.md
          echo "**Commit**: ${{ github.sha }}" >> summary.md
          echo "" >> summary.md

          echo "## Test Jobs Status" >> summary.md
          echo "" >> summary.md
          echo "| Job | Status |" >> summary.md
          echo "|-----|--------|" >> summary.md
          echo "| Quick Validation | ${{ needs.quick-validation.result }} |" >> summary.md
          echo "| Phase Order Tests | ${{ needs.phase-order-tests.result }} |" >> summary.md
          echo "| Path Whitelist Tests | ${{ needs.path-whitelist-tests.result }} |" >> summary.md
          echo "| Must Produce Tests | ${{ needs.must-produce-tests.result }} |" >> summary.md
          echo "| Security & Linting | ${{ needs.security-linting-tests.result }} |" >> summary.md
          echo "| Comprehensive Test | ${{ needs.comprehensive-test.result }} |" >> summary.md

          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Upload Summary
        uses: actions/upload-artifact@v3
        with:
          name: final-summary
          path: summary.md

  # ════════════════════════════════════════════════════════════
  # Job 8: 失败通知（可选）
  # ════════════════════════════════════════════════════════════
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [comprehensive-test]
    if: failure()

    steps:
      - name: Create Issue on Failure
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI Workflow Test Failed - ${context.sha.substring(0, 7)}`,
              body: `CI workflow tests failed on commit ${context.sha}.\n\nPlease check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.`,
              labels: ['ci-failure', 'automated']
            });
