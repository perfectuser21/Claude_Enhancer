name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - master

permissions:
  contents: write

jobs:
  auto-release:
    name: Create Release Automatically
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于版本比较

      - name: Check VERSION file changes
        id: version_check
        run: |
          # 检查VERSION文件是否被修改
          if git diff --name-only HEAD~1 HEAD | grep -q '^VERSION$'; then
            echo "version_changed=true" >> $GITHUB_OUTPUT

            # 获取新旧版本
            NEW_VERSION=$(cat VERSION)
            OLD_VERSION=$(git show HEAD~1:VERSION)

            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "old_version=$OLD_VERSION" >> $GITHUB_OUTPUT

            echo "✅ VERSION文件已更新: $OLD_VERSION → $NEW_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ VERSION文件未更新，跳过release"
          fi

      - name: Compare versions
        id: version_compare
        if: steps.version_check.outputs.version_changed == 'true'
        run: |
          # 使用版本比较脚本
          chmod +x scripts/compare_versions.sh

          NEW="${{ steps.version_check.outputs.new_version }}"
          OLD="${{ steps.version_check.outputs.old_version }}"

          if ./scripts/compare_versions.sh "$NEW" "$OLD"; then
            echo "version_increased=true" >> $GITHUB_OUTPUT
            echo "✅ 版本号递增: $OLD → $NEW"
          else
            echo "version_increased=false" >> $GITHUB_OUTPUT
            echo "❌ 版本号未递增或无效"
            exit 1
          fi

      - name: Generate Release Notes
        id: release_notes
        if: steps.version_compare.outputs.version_increased == 'true'
        run: |
          # 生成Release Notes
          chmod +x scripts/generate_release_notes.sh

          VERSION="${{ steps.version_check.outputs.new_version }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          ./scripts/generate_release_notes.sh "$VERSION" "$PR_NUMBER" > release_notes.md

          echo "✅ Release Notes已生成"
          cat release_notes.md

      - name: Create Git Tag
        if: steps.version_compare.outputs.version_increased == 'true'
        run: |
          VERSION="${{ steps.version_check.outputs.new_version }}"
          TAG_NAME="v${VERSION}"

          # 配置git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 创建annotated tag
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME - Automatically created by GitHub Actions - PR #${{ github.event.pull_request.number }}"

          # 推送tag
          git push origin "$TAG_NAME"

          echo "✅ Tag已创建并推送: $TAG_NAME"

      - name: Create GitHub Release
        if: steps.version_compare.outputs.version_increased == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_check.outputs.new_version }}
          release_name: Release v${{ steps.version_check.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Summary
        if: steps.version_compare.outputs.version_increased == 'true'
        run: |
          echo "╔═══════════════════════════════════════════════════════════════╗"
          echo "║                                                               ║"
          echo "║  🎉 自动Release成功！                                        ║"
          echo "║                                                               ║"
          echo "║  版本: v${{ steps.version_check.outputs.new_version }}      ║"
          echo "║  PR: #${{ github.event.pull_request.number }}                ║"
          echo "║  Tag: ✅ 已创建                                              ║"
          echo "║  Release: ✅ 已发布                                          ║"
          echo "║                                                               ║"
          echo "╚═══════════════════════════════════════════════════════════════╝"
