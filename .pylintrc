[MASTER]
# Python code to execute, usually for sys.path manipulation
init-hook='import sys; sys.path.append(".")'

# Files or directories to be skipped
ignore=CVS,
       .git,
       __pycache__,
       node_modules,
       venv,
       coverage,
       .temp

# Use multiple processes to speed up Pylint
jobs=1

[MESSAGES CONTROL]
# Disable the message, report, category or checker with the given id(s)
disable=C0114,  # missing-module-docstring
        C0115,  # missing-class-docstring
        C0116,  # missing-function-docstring
        E0401,  # import-error (too many false positives in migrations)
        E1101,  # no-member (too many false positives with alembic, sqlalchemy)
        W0611,  # unused-import (needed for migrations)
        C0413,  # wrong-import-position (migrations need specific order)
        W0718,  # broad-exception-caught (acceptable in some cases)
        R0903,  # too-few-public-methods (models/configs are fine)
        R0913,  # too-many-arguments (sometimes necessary)
        R0914,  # too-many-locals (sometimes necessary)
        R0915,  # too-many-statements (sometimes necessary)
        C0103,  # invalid-name (for short variable names)
        W0212,  # protected-access (needed for tests)
        W0621,  # redefined-outer-name (fixtures in pytest)

[REPORTS]
# Set the output format
output-format=text

# Put messages in a separate file for each module / package specified
reports=no

# Tells whether to display a full report or only the messages
score=yes

[BASIC]
# Good variable names regexes
good-names=i,j,k,ex,Run,_,id,db,pk,fd

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{1,30}$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{1,30}$

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{1,30}$

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{1,30}$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{1,30}$

[FORMAT]
# Maximum number of characters on a single line
max-line-length=120

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit
indent-string='    '

[DESIGN]
# Maximum number of arguments for function / method
max-args=10

# Maximum number of attributes for a class
max-attributes=15

# Maximum number of boolean expressions in an if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=15

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of parents for a class
max-parents=7

# Maximum number of public methods for a class
max-public-methods=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of statements in function / method body
max-statements=50

# Minimum number of public methods for a class
min-public-methods=1

[SIMILARITIES]
# Minimum lines number of a similarity
min-similarity-lines=4

# Ignore comments when computing similarities
ignore-comments=yes

# Ignore docstrings when computing similarities
ignore-docstrings=yes

# Ignore imports when computing similarities
ignore-imports=no

[TYPECHECK]
# List of members which are set dynamically and missed by pylint inference
generated-members=numpy.*,
                  torch.*,
                  cv2.*,
                  alembic.*,
                  sqlalchemy.*

# List of classes names for which member attributes should not be checked
ignored-classes=SQLObject,
                optparse.Values,
                thread._local,
                _thread._local,
                alembic.context

[IMPORTS]
# Deprecated modules which should not be used
deprecated-modules=optparse,
                   tkinter.tix

[CLASSES]
# List of method names used to declare instance attributes
defining-attr-methods=__init__,
                      __new__,
                      setUp

# List of valid names for the first argument in a class method
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method
valid-metaclass-classmethod-first-arg=mcs

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught
overgeneral-exceptions=builtins.BaseException,
                       builtins.Exception
