apiVersion: apps/v1
kind: Deployment
metadata:
  name: perfect21-api
  namespace: perfect21
  labels:
    app: perfect21-api
    version: "2.3.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: perfect21-api
  template:
    metadata:
      labels:
        app: perfect21-api
        version: "2.3.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: perfect21-api
        image: perfect21:2.3.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENV
          value: "production"
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: perfect21-secrets
              key: jwt-secret-key
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: perfect21-secrets
              key: database-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: perfect21-secrets
              key: redis-password
              optional: true
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /var/lib/perfect21/data
        - name: logs-volume
          mountPath: /var/log/perfect21
        - name: cache-volume
          mountPath: /var/lib/perfect21/cache
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "2000m"
            ephemeral-storage: "5Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
            scheme: HTTP
          initialDelaySeconds: 20
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
      volumes:
      - name: config-volume
        configMap:
          name: perfect21-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: perfect21-data-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: perfect21-logs-pvc
      - name: cache-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - perfect21-api
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: perfect21-api-service
  namespace: perfect21
  labels:
    app: perfect21-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: perfect21-api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: perfect21-ingress
  namespace: perfect21
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.perfect21.example.com
    secretName: perfect21-tls
  rules:
  - host: api.perfect21.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: perfect21-api-service
            port:
              number: 80