╔════════════════════════════════════════════════════════════════════════════════╗
║                  Claude Enhancer 5.0 - ce CLI 工作流程图                         ║
╚════════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────────┐
│                          命令行工作流 (Happy Path)                               │
└─────────────────────────────────────────────────────────────────────────────────┘

    ┌──────────────┐
    │  ce start    │  快速启动新功能
    │  <feature>   │  • 创建feature分支
    └──────┬───────┘  • 初始化P0阶段
           │          • 显示阶段要求
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P0 Discovery ┃  探索阶段
    ┃ 可行性分析    ┃  • 技术spike
    ┗━━━━━┯━━━━━━━━┛  • 风险评估
           │           • GO/NO-GO决策
           │ ce validate (验证完成度)
           │ ce next (自动推进)
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P1 Plan      ┃  规划阶段
    ┃ 需求分析      ┃  • PLAN.md
    ┗━━━━━┯━━━━━━━━┛  • ≥5个任务
           │           • 受影响文件清单
           │ ce validate
           │ ce next
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P2 Skeleton  ┃  架构阶段
    ┃ 目录结构      ┃  • 创建目录
    ┗━━━━━┯━━━━━━━━┛  • 接口骨架
           │           • 符合PLAN
           │ ce validate
           │ ce next
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P3 Implement ┃  实现阶段
    ┃ 代码开发      ┃  • 功能代码
    ┗━━━━━┯━━━━━━━━┛  • CHANGELOG
           │           • 可构建
           │ ce validate (代码质量+安全)
           │ ce next (自动commit)
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P4 Testing   ┃  测试阶段
    ┃ 测试验证      ┃  • ≥2个测试
    ┗━━━━━┯━━━━━━━━┛  • TEST-REPORT.md
           │           • 测试通过
           │ ce validate (运行测试)
           │ ce next
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P5 Review    ┃  审查阶段
    ┃ 代码审查      ┃  • REVIEW.md
    ┗━━━━━┯━━━━━━━━┛  • APPROVE结论
           │           • 风险分析
           │ ce validate
           │ ce next
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P6 Release   ┃  发布阶段
    ┃ 文档+tag     ┃  • README更新
    ┗━━━━━┯━━━━━━━━┛  • 版本号
           │           • 打tag
           │
           │ ce publish (推送+PR)
           ↓
    ┌──────────────┐
    │   推送远程    │  • git push
    │   创建PR      │  • gh pr create
    └──────┬───────┘  • 触发CI/CD
           │
           │ 等待CI通过
           │ ce merge main
           ↓
    ┏━━━━━━━━━━━━━┓
    ┃ P7 Monitor   ┃  监控阶段
    ┃ 生产监控      ┃  • 健康检查
    ┗━━━━━┯━━━━━━━━┛  • SLO验证
           │           • 监控报告
           │
           │ 合并检查
           ↓
    ╔══════════════╗
    ║  合并到main   ║  • Squash merge
    ║              ║  • 健康检查
    ╚══════┬═══════╝  • 自动回滚(失败时)
           │
           │ ce clean (清理)
           ↓
    ┌──────────────┐
    │  删除分支     │  • 删除本地
    │  完成周期     │  • 删除远程
    └──────────────┘  • 清理工作流文件


╔════════════════════════════════════════════════════════════════════════════════╗
║                            命令执行流程详解                                      ║
╚════════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────────┐
│  ce validate - 验证当前阶段                                                      │
└─────────────────────────────────────────────────────────────────────────────────┘

    ce validate
         ↓
    ┌────────────────┐
    │ 读取当前Phase   │ ← .phase/current
    └────────┬───────┘
             │
             ↓
    ┌────────────────┐
    │ 加载gates规则   │ ← .workflow/gates.yml
    └────────┬───────┘
             │
             ↓
    ╔════════════════════════════════════════╗
    ║      并行执行检查 (4个并行)             ║
    ╠════════════════════════════════════════╣
    ║ [1/5] 路径验证                          ║
    ║   ✓ allow_paths匹配                    ║
    ╠════════════════════════════════════════╣
    ║ [2/5] 产物验证                          ║
    ║   ✓ must_produce检查                   ║
    ╠════════════════════════════════════════╣
    ║ [3/5] 安全扫描                          ║
    ║   ✓ 敏感信息检测                        ║
    ╠════════════════════════════════════════╣
    ║ [4/5] 代码质量                          ║
    ║   ✓ Linting检查                        ║
    ╠════════════════════════════════════════╣
    ║ [5/5] 测试运行 (P4+)                   ║
    ║   ✓ unit+integration+smoke            ║
    ╚════════════════════════════════════════╝
             │
             ↓
    ┌────────────────┐      ┌────────────────┐
    │  所有通过？     │─Yes→│ 创建gate标记    │ → .gates/0X.ok
    └────────┬───────┘      └────────────────┘
             │ No
             ↓
    ┌────────────────┐
    │ 显示失败项      │
    │ 修复建议        │
    └────────────────┘


┌─────────────────────────────────────────────────────────────────────────────────┐
│  ce next - 进入下一阶段                                                          │
└─────────────────────────────────────────────────────────────────────────────────┘

    ce next
         ↓
    ┌────────────────┐
    │ 运行 ce validate│
    └────────┬───────┘
             │
             ↓
    ┌────────────────┐
    │  验证通过？     │─No→ 显示错误，退出
    └────────┬───────┘
             │ Yes
             ↓
    ┌────────────────┐
    │ 自动提交？      │ ← config.yml: git.auto_commit
    └────────┬───────┘
             │ Yes
             ↓
    ┌────────────────┐
    │ git add + commit│ → 使用Phase前缀
    └────────┬───────┘   如: [P3][impl] ...
             │
             ↓
    ┌────────────────┐
    │ 读取on_pass动作 │ ← gates.yml: phases.PX.on_pass
    └────────┬───────┘
             │
             ↓
    ┌────────────────┐
    │ 创建gate标记    │ → .gates/0X.ok
    └────────┬───────┘
             │
             ↓
    ┌────────────────┐
    │ 更新Phase       │ → .phase/current = PX+1
    └────────┬───────┘   → .workflow/ACTIVE
             │
             ↓
    ┌────────────────┐
    │ 显示新阶段要求   │
    │ 智能提示        │
    └────────────────┘


┌─────────────────────────────────────────────────────────────────────────────────┐
│  ce publish - 发布功能                                                           │
└─────────────────────────────────────────────────────────────────────────────────┘

    ce publish
         ↓
    ┌────────────────┐
    │ 完整性检查      │ • 至少P4完成
    └────────┬───────┘ • 所有gates通过
             │
             ↓
    ┌────────────────┐
    │ 最终验证        │ • ce validate
    └────────┬───────┘ • pre-push hook
             │
             ↓
    ┌────────────────┐
    │ git push        │ → origin/feature-branch
    └────────┬───────┘
             │
             ↓
    ┌────────────────┐
    │ auto_pr启用？   │ ← config.yml: git.auto_pr
    └────────┬───────┘
             │ Yes
             ↓
    ┌────────────────┐
    │ 生成PR内容      │ • 自动分析commits
    └────────┬───────┘ • 使用PR模板
             │
             ↓
    ┌────────────────┐
    │ gh pr create    │ → 创建Pull Request
    └────────┬───────┘
             │
             ↓
    ┌────────────────┐
    │ 触发CI/CD       │ → GitHub Actions
    └────────┬───────┘ → 运行所有检查
             │
             ↓
    ┌────────────────┐
    │ 显示PR链接      │
    │ CI状态          │
    └────────────────┘


┌─────────────────────────────────────────────────────────────────────────────────┐
│  ce merge - 合并分支                                                             │
└─────────────────────────────────────────────────────────────────────────────────┘

    ce merge main
         ↓
    ┌────────────────┐
    │ 安全检查        │ • PR已批准？
    └────────┬───────┘ • CI全绿？
             │         • 无冲突？
             │
             ↓
    ┌────────────────┐
    │ P7监控验证      │ • 健康检查
    └────────┬───────┘ • SLO达标
             │
             ↓
    ┌────────────────┐
    │ git merge       │ → Squash merge (默认)
    └────────┬───────┘
             │
             ↓
    ╔════════════════════════════════════╗
    ║    Post-merge 健康检查              ║
    ╠════════════════════════════════════╣
    ║ [1/3] 构建验证                      ║
    ║ [2/3] 冒烟测试                      ║
    ║ [3/3] 服务健康度                    ║
    ╚════════════════════════════════════╝
             │
             ↓
    ┌────────────────┐      ┌────────────────┐
    │  检查通过？     │─Yes→│ 删除分支        │ (如启用)
    └────────┬───────┘      └────────────────┘
             │ No
             ↓
    ┌────────────────┐
    │ 自动回滚        │ → git reset --hard
    │ 恢复分支        │ → 通知告警
    └────────────────┘


╔════════════════════════════════════════════════════════════════════════════════╗
║                              系统架构图                                          ║
╚════════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────────┐
│                           ce CLI 架构层次                                        │
└─────────────────────────────────────────────────────────────────────────────────┘

    ┌───────────────────────────────────────────────────────────────────┐
    │                        用户交互层                                   │
    │  ┌─────────────────────────────────────────────────────────────┐  │
    │  │  ce start  │  ce status  │  ce validate  │  ce next  │ ...  │  │
    │  └─────────────────────────────────────────────────────────────┘  │
    └───────────────────────────┬───────────────────────────────────────┘
                                │
    ┌───────────────────────────▼───────────────────────────────────────┐
    │                      命令路由层 (ce.sh)                             │
    │  ┌─────────────────────────────────────────────────────────────┐  │
    │  │  • 参数解析                                                   │  │
    │  │  • 命令分发                                                   │  │
    │  │  • 环境检查                                                   │  │
    │  └─────────────────────────────────────────────────────────────┘  │
    └───────────────────────────┬───────────────────────────────────────┘
                                │
    ┌───────────────────────────▼───────────────────────────────────────┐
    │                      命令实现层 (commands/)                         │
    │  ┌──────────────┬──────────────┬──────────────┬──────────────┐   │
    │  │ start.sh     │ status.sh    │ validate.sh  │ next.sh      │   │
    │  ├──────────────┼──────────────┼──────────────┼──────────────┤   │
    │  │ publish.sh   │ merge.sh     │ clean.sh     │ ...          │   │
    │  └──────────────┴──────────────┴──────────────┴──────────────┘   │
    └───────────────────────────┬───────────────────────────────────────┘
                                │
    ┌───────────────────────────▼───────────────────────────────────────┐
    │                      共享库层 (lib/)                                │
    │  ┌─────────────────────────────────────────────────────────────┐  │
    │  │  • colors.sh      - 颜色输出                                 │  │
    │  │  • utils.sh       - 工具函数                                 │  │
    │  │  • git-ops.sh     - Git操作                                  │  │
    │  │  • phase-ops.sh   - Phase管理                                │  │
    │  │  • report.sh      - 报告生成                                 │  │
    │  └─────────────────────────────────────────────────────────────┘  │
    └───────────────────────────┬───────────────────────────────────────┘
                                │
    ┌───────────────────────────▼───────────────────────────────────────┐
    │                    集成层 (现有系统)                                │
    │  ┌──────────────┬──────────────┬──────────────┬──────────────┐   │
    │  │ executor.sh  │ gates.yml    │ config.yml   │ Git Hooks    │   │
    │  └──────────────┴──────────────┴──────────────┴──────────────┘   │
    └───────────────────────────┬───────────────────────────────────────┘
                                │
    ┌───────────────────────────▼───────────────────────────────────────┐
    │                       数据存储层                                    │
    │  ┌─────────────────────────────────────────────────────────────┐  │
    │  │  .phase/current       - 当前Phase                            │  │
    │  │  .workflow/ACTIVE     - 活跃工单                             │  │
    │  │  .gates/0X.ok         - Gate标记                             │  │
    │  │  .workflow/logs/      - 日志文件                             │  │
    │  └─────────────────────────────────────────────────────────────┘  │
    └───────────────────────────────────────────────────────────────────┘


┌─────────────────────────────────────────────────────────────────────────────────┐
│                       并行执行优化架构                                            │
└─────────────────────────────────────────────────────────────────────────────────┘

    ce validate
         ↓
    ┌─────────────────────────────────────────────────────────────────┐
    │              主进程 (Orchestrator)                               │
    └───┬─────────┬─────────┬─────────┬─────────┬───────────────────┘
        │         │         │         │         │
        ↓         ↓         ↓         ↓         ↓
    ┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐
    │Path   │ │Produce│ │Security│ │Quality│ │Test   │  子进程
    │Check  │ │Check  │ │Scan   │ │Check  │ │Run    │  (并行执行)
    └───┬───┘ └───┬───┘ └───┬───┘ └───┬───┘ └───┬───┘
        │         │         │         │         │
        ↓         ↓         ↓         ↓         ↓
    ┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐ ┌───────┐
    │Result │ │Result │ │Result │ │Result │ │Result │  结果收集
    └───┬───┘ └───┬───┘ └───┬───┘ └───┬───┘ └───┬───┘
        │         │         │         │         │
        └─────────┴─────────┴─────────┴─────────┘
                            ↓
    ┌─────────────────────────────────────────────────────────────────┐
    │                   聚合报告生成                                    │
    │  • 成功/失败统计                                                  │
    │  • 详细错误信息                                                   │
    │  • 修复建议                                                       │
    └─────────────────────────────────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════════════════╗
║                            状态机示意图                                          ║
╚════════════════════════════════════════════════════════════════════════════════╝

                     Claude Enhancer Phase State Machine

         ╔═════════╗
         ║  INIT   ║  初始状态
         ╚════╤════╝
              │ ce start
              ↓
         ┌─────────┐
         │   P0    │◄─────────┐
         └────┬────┘           │
              │ ce next        │
              ↓                │
         ┌─────────┐           │
         │   P1    │           │
         └────┬────┘           │
              │ ce next        │ ce goto PX
              ↓                │ (快速跳转)
         ┌─────────┐           │
         │   P2    │           │
         └────┬────┘           │
              │ ce next        │
              ↓                │
         ┌─────────┐           │
         │   P3    │◄──────────┤
         └────┬────┘           │
              │ ce next        │
              ↓                │
         ┌─────────┐           │
         │   P4    │           │
         └────┬────┘           │
              │ ce next        │
              ↓                │
         ┌─────────┐           │
         │   P5    │◄──────────┤
         └────┬────┘           │
              │ ce next        │
              ↓                │
         ┌─────────┐           │
         │   P6    │           │
         └────┬────┘           │
              │ ce publish     │
              ↓                │
         ┌─────────┐           │
         │   P7    │           │
         └────┬────┘           │
              │ ce merge       │
              ↓                │
         ╔═════════╗           │
         ║  MERGED ║           │
         ╚════╤════╝           │
              │ ce start       │
              │ (新功能)        │
              └────────────────┘

    每个Phase的状态转换条件:
    • ce validate 必须通过
    • gates.yml 定义的条件满足
    • 可选: config.yml 的自动化配置


╔════════════════════════════════════════════════════════════════════════════════╗
║                           缓存优化架构                                           ║
╚════════════════════════════════════════════════════════════════════════════════╝

    ce validate (第一次)
         ↓
    ┌─────────────────┐
    │ 执行完整检查     │ → 耗时: 10-15s
    └────────┬────────┘
             │
             ↓
    ┌─────────────────┐
    │ 生成结果哈希     │ → 基于: commit SHA + phase
    └────────┬────────┘
             │
             ↓
    ┌─────────────────┐
    │ 写入缓存         │ → .workflow/.validate_cache
    └─────────────────┘

    ce validate (第二次，代码未变)
         ↓
    ┌─────────────────┐
    │ 检查缓存         │
    └────────┬────────┘
             │
             ↓
    ┌─────────────────┐      ┌─────────────────┐
    │ 缓存命中？       │─Yes→│ 返回缓存结果     │ → 耗时: <1s
    └────────┬────────┘      └─────────────────┘
             │ No (代码变更)
             ↓
    ┌─────────────────┐
    │ 执行完整检查     │ → 重新验证
    └─────────────────┘

    缓存策略:
    • TTL: 5分钟 (config.yml: cache.ttl_seconds)
    • 失效条件: commit变更 或 phase变更
    • 大小限制: 100MB (config.yml: cache.max_size_mb)
    • 淘汰策略: LRU


╔════════════════════════════════════════════════════════════════════════════════╗
║                          性能对比可视化                                          ║
╚════════════════════════════════════════════════════════════════════════════════╝

启动新功能:
    Manual    ████████████████████████████████████████████████ 10 min
    ce CLI    ██ 30s
              └─────────────────────────────────────────────────────────┘
              0                                                       10min
              提升: 20x

验证阶段:
    Manual    ████████████████████████████████████████████████ 15 min
    ce CLI    █ 10s
              └─────────────────────────────────────────────────────────┘
              0                                                       15min
              提升: 90x

发布流程:
    Manual    ████████████████████████████████████████████████ 20 min
    ce CLI    ███ 1 min
              └─────────────────────────────────────────────────────────┘
              0                                                       20min
              提升: 20x

总体时间节省:
    ┌─────────────────────────────────────────────────────────────┐
    │  传统方式: 45-60分钟/功能                                     │
    │  ce CLI:   2-5分钟/功能                                      │
    │  ────────────────────────────────────────────────────────   │
    │  时间节省: 85-95%  →  【周节省: 10-15小时】                  │
    └─────────────────────────────────────────────────────────────┘


╔════════════════════════════════════════════════════════════════════════════════╗
║                        文件系统布局示意图                                        ║
╚════════════════════════════════════════════════════════════════════════════════╝

    Claude Enhancer 5.0/
    │
    ├── .workflow/                      # 工作流配置
    │   ├── config.yml                  # 系统配置
    │   ├── gates.yml                   # 质量闸门
    │   ├── executor.sh                 # 执行引擎
    │   ├── ACTIVE                      # 活跃状态
    │   │
    │   ├── cli/                        # ce CLI实现 【新增】
    │   │   ├── ce.sh                   # 主入口
    │   │   ├── commands/               # 子命令
    │   │   │   ├── start.sh
    │   │   │   ├── status.sh
    │   │   │   ├── validate.sh
    │   │   │   ├── next.sh
    │   │   │   ├── publish.sh
    │   │   │   ├── merge.sh
    │   │   │   └── clean.sh
    │   │   ├── lib/                    # 共享库
    │   │   │   ├── colors.sh
    │   │   │   ├── utils.sh
    │   │   │   ├── git-ops.sh
    │   │   │   ├── phase-ops.sh
    │   │   │   └── report.sh
    │   │   └── config/
    │   │       └── defaults.yml
    │   │
    │   ├── logs/                       # 日志目录
    │   └── .validate_cache             # 验证缓存 【新增】
    │
    ├── .phase/                         # Phase状态
    │   └── current                     # 当前Phase
    │
    ├── .gates/                         # Gate标记
    │   ├── 00.ok                       # P0通过
    │   ├── 01.ok                       # P1通过
    │   └── ...                         # ...
    │
    ├── .git/hooks/                     # Git Hooks
    │   ├── pre-commit                  # 提交前检查
    │   ├── commit-msg                  # 消息规范
    │   └── pre-push                    # 推送前验证
    │
    ├── docs/                           # 文档目录
    │   ├── PLAN.md                     # P1产物
    │   ├── REVIEW.md                   # P5产物
    │   ├── TEST-REPORT.md              # P4产物
    │   └── P0_*_DISCOVERY.md           # P0产物
    │
    └── /usr/local/bin/ce               # CLI符号链接 【新增】
        └─→ .workflow/cli/ce.sh


╔════════════════════════════════════════════════════════════════════════════════╗
║                        Git分支工作流可视化                                       ║
╚════════════════════════════════════════════════════════════════════════════════╝

    main                   ●───────────────●───────────────●
    (受保护)                │              merge           │
                           │                               │
    feature/xxx            ●───●───●───●───●               │
    (开发分支)            start P0 P1 P2..P7              clean
                           │   │   │   │   │
                           │   │   │   │   └──▶ ce publish (推送+PR)
                           │   │   │   └──────▶ ce next (自动提交)
                           │   │   └──────────▶ ce validate
                           │   └──────────────▶ ce next
                           └──────────────────▶ ce start

    时间线示意:
    Day 1: ce start → P0 → P1 → P2
    Day 2: P2 → P3 (实现)
    Day 3: P3 → P4 (测试)
    Day 4: P4 → P5 → P6 → ce publish
    Day 5: Review → ce merge main → ce clean


═══════════════════════════════════════════════════════════════════════════════════
                            END OF DIAGRAM
═══════════════════════════════════════════════════════════════════════════════════
