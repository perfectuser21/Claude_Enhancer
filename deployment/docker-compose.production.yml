# =============================================================================
# Production Docker Compose for Claude Enhancer 5.1 Task Management System
# Complete deployment with monitoring, logging, and security hardening
# =============================================================================

version: '3.8'

# Production-optimized networks
networks:
  frontend-tier:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
  backend-tier:
    driver: bridge
    internal: true
  monitoring-tier:
    driver: bridge
    internal: true

# Persistent volumes with backup support
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-enhancer/data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/claude-enhancer/data/redis
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  app_logs:
    driver: local

services:
  # ==========================================================================
  # Frontend & API Gateway (Nginx)
  # ==========================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: claude-enhancer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - frontend-tier
      - backend-tier
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=nginx"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Main Application (Claude Enhancer Task Management)
  # ==========================================================================
  app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.app
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-5.1.0}
    image: claude-enhancer:${VERSION:-5.1.0}
    container_name: claude-enhancer-app
    restart: unless-stopped
    environment:
      # Application settings
      - CLAUDE_ENV=production
      - APP_NAME=claude-enhancer
      - APP_VERSION=${VERSION:-5.1.0}
      - DEBUG=false
      - LOG_LEVEL=INFO
      - WORKERS=4

      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL_MODE=require

      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0

      # Security settings
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}

      # Monitoring
      - SENTRY_DSN=${SENTRY_DSN}
      - PROMETHEUS_ENDPOINT=http://prometheus:9090

      # Performance settings
      - MAX_WORKERS=8
      - WORKER_TIMEOUT=120
      - KEEP_ALIVE_TIMEOUT=5
      - MAX_CONNECTIONS=1000

      # Feature flags
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - ENABLE_RATE_LIMITING=true
    volumes:
      - app_logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-tier
      - monitoring-tier
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:size=100M,noexec,nosuid,nodev
    labels:
      - "com.claude-enhancer.service=app"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Database (PostgreSQL with optimization)
  # ==========================================================================
  postgres:
    image: postgres:15-alpine
    container_name: claude-enhancer-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - backend-tier
    ports:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c log_statement=all
      -c log_min_duration_statement=1000
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=postgres"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Cache (Redis with persistence)
  # ==========================================================================
  redis:
    image: redis:7-alpine
    container_name: claude-enhancer-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    networks:
      - backend-tier
    ports:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=redis"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Monitoring: Prometheus
  # ==========================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: claude-enhancer-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://${DOMAIN}/prometheus/'
      - '--web.route-prefix=/'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-tier
      - backend-tier
    ports:
      - "9090"
    depends_on:
      - app
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=prometheus"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Visualization: Grafana
  # ==========================================================================
  grafana:
    image: grafana/grafana:10.0.0
    container_name: claude-enhancer-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring-tier
    ports:
      - "3000"
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=grafana"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Logging: Elasticsearch
  # ==========================================================================
  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: claude-enhancer-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring-tier
    ports:
      - "9200"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=elasticsearch"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Log Processing: Logstash
  # ==========================================================================
  logstash:
    image: logstash:8.9.0
    container_name: claude-enhancer-logstash
    restart: unless-stopped
    environment:
      - "LS_JAVA_OPTS=-Xmx1g -Xms1g"
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - app_logs:/var/log/app:ro
    networks:
      - monitoring-tier
    ports:
      - "5044"
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=logstash"
      - "com.claude-enhancer.environment=production"

  # ==========================================================================
  # Log Visualization: Kibana
  # ==========================================================================
  kibana:
    image: kibana:8.9.0
    container_name: claude-enhancer-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
      - SERVER_PUBLICBASEURL=https://${DOMAIN}/kibana/
    networks:
      - monitoring-tier
    ports:
      - "5601"
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    security_opt:
      - no-new-privileges:true
    labels:
      - "com.claude-enhancer.service=kibana"
      - "com.claude-enhancer.environment=production"