# =============================================================================
# Docker Compose Configuration for Claude Enhancer 5.1
# Complete development and production environment setup
# =============================================================================

version: '3.8'

# =============================================================================
# Networks
# =============================================================================
networks:
  claude-enhancer:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local

# =============================================================================
# Services
# =============================================================================
services:
  # ---------------------------------------------------------------------------
  # Database: PostgreSQL 14
  # ---------------------------------------------------------------------------
  database:
    image: postgres:14-alpine
    container_name: claude-enhancer-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-claude_enhancer}
      POSTGRES_USER: ${POSTGRES_USER:-claude_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-claude_secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-md5}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - claude-enhancer
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-claude_user} -d ${POSTGRES_DB:-claude_enhancer}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # ---------------------------------------------------------------------------
  # Cache: Redis 7
  # ---------------------------------------------------------------------------
  cache:
    image: redis:7-alpine
    container_name: claude-enhancer-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis_secure_password}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - claude-enhancer
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ---------------------------------------------------------------------------
  # Backend: FastAPI Application
  # ---------------------------------------------------------------------------
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-1.0.0}
    container_name: claude-enhancer-backend
    restart: unless-stopped
    environment:
      # Application
      CLAUDE_ENV: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-this}

      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-claude_user}:${POSTGRES_PASSWORD:-claude_secure_password}@database:5432/${POSTGRES_DB:-claude_enhancer}
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_MAX_OVERFLOW: ${DATABASE_MAX_OVERFLOW:-20}

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@cache:6379/0
      REDIS_CACHE_TTL: ${REDIS_CACHE_TTL:-3600}

      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-key}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}

      # API Configuration
      API_V1_PREFIX: ${API_V1_PREFIX:-/api/v1}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-["http://localhost:3000","http://localhost:80","http://frontend"]}

      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Performance
      WORKERS: ${WORKERS:-4}
      WORKER_CLASS: ${WORKER_CLASS:-uvicorn.workers.UvicornWorker}
      MAX_REQUESTS: ${MAX_REQUESTS:-1000}
      MAX_REQUESTS_JITTER: ${MAX_REQUESTS_JITTER:-100}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./config:/app/config:ro
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - claude-enhancer
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ---------------------------------------------------------------------------
  # Frontend: React Application with Nginx
  # ---------------------------------------------------------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_BUILD_TARGET:-production}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-1.0.0}
        REACT_APP_API_URL: ${REACT_APP_API_URL:-/api}
        REACT_APP_ENVIRONMENT: ${ENVIRONMENT:-production}
    container_name: claude-enhancer-frontend
    restart: unless-stopped
    volumes:
      - nginx_cache:/var/cache/nginx
      - ./logs/nginx:/var/log/nginx
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - claude-enhancer
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ---------------------------------------------------------------------------
  # Monitoring: Prometheus (Optional)
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-enhancer-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - claude-enhancer
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ---------------------------------------------------------------------------
  # Monitoring: Grafana (Optional)
  # ---------------------------------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    container_name: claude-enhancer-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - claude-enhancer
    depends_on:
      - prometheus
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

# =============================================================================
# Additional Volumes for Monitoring
# =============================================================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local