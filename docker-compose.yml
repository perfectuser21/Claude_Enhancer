# =============================================================================
# Docker Compose for Perfect21 Claude Enhancer
# Complete development and production-ready environment
# =============================================================================

version: '3.8'

# Shared network for all services
networks:
  claude-enhancer:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Persistent volumes for data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

services:
  # ==========================================================================
  # Core Application Services
  # ==========================================================================

  # Claude Enhancer Main Application
  claude-enhancer:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-latest}
    container_name: claude-enhancer-app
    ports:
      - "8080:8080"
    environment:
      - CLAUDE_ENV=${CLAUDE_ENV:-development}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-claude_enhancer}
      - DB_USER=${DB_USER:-claude_user}
      - DB_PASSWORD=${DB_PASSWORD:-your-super-secure-database-password-here}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-your-redis-secure-password-here}
      - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET:-your-super-secret-jwt-access-key-minimum-256-bits-long-random-string}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-super-secret-jwt-refresh-key-minimum-256-bits-long-different-string}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./logs:/app/logs
      - ./.claude:/app/.claude:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - claude-enhancer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Authentication Service (integrated into main app)
  # auth-service:
  #   build:
  #     context: ./auth-system
  #     dockerfile: Dockerfile
  #   container_name: claude-enhancer-auth
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=${NODE_ENV:-development}
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_NAME=${DB_NAME:-claude_enhancer}
  #     - DB_USER=${DB_USER:-claude_user}
  #     - DB_PASSWORD=${DB_PASSWORD:-your-super-secure-database-password-here}
  #     - JWT_SECRET=${JWT_ACCESS_SECRET:-your-super-secret-jwt-access-key-minimum-256-bits-long-random-string}
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - claude-enhancer
  #   restart: unless-stopped

  # ==========================================================================
  # Database Services
  # ==========================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claude-enhancer-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-claude_enhancer}
      - POSTGRES_USER=${DB_USER:-claude_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-your-super-secure-database-password-here}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - claude-enhancer
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-claude_user} -d ${DB_NAME:-claude_enhancer}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: claude-enhancer-redis
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-your-redis-secure-password-here}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
    volumes:
      - redis_data:/data
    networks:
      - claude-enhancer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-your-redis-secure-password-here}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ==========================================================================
  # Monitoring & Observability
  # ==========================================================================

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-enhancer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - claude-enhancer
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: claude-enhancer-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-your-grafana-admin-password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - claude-enhancer
    restart: unless-stopped
    depends_on:
      - prometheus

  # Elasticsearch for Logs
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: claude-enhancer-elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - claude-enhancer
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: claude-enhancer-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - claude-enhancer
    restart: unless-stopped

  # ==========================================================================
  # Load Balancer & Reverse Proxy
  # ==========================================================================

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: claude-enhancer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - claude-enhancer
    networks:
      - claude-enhancer
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Development Tools (only in development)
  # ==========================================================================

  # pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: claude-enhancer-pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@claude-enhancer.local
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin123}
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    networks:
      - claude-enhancer
    restart: unless-stopped
    profiles:
      - development

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: claude-enhancer-redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-your-redis-secure-password-here}
    depends_on:
      - redis
    networks:
      - claude-enhancer
    restart: unless-stopped
    profiles:
      - development