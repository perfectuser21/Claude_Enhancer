{
  "name": "review-fix-cycle",
  "description": "代码审查修复循环钩子 - 检查review.md中的MUST FIX问题，如有问题则提示需要修复",
  "event": "PostToolUse", 
  "matcher": {
    "tool": ["Write", "Edit", "MultiEdit"],
    "file_pattern": ["**/review.md", "**/code_review.md", "**/审查*.md"]
  },
  "action": "#!/bin/bash\nset -euo pipefail\n\n# 检查是否是代码审查文件\nFILE_PATH=$(echo \"$CLAUDE_TOOL_INPUT\" | jq -r '.file_path // \"\"')\nTIMESTAMP=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n\n# 创建日志目录\nmkdir -p eval/logs\nFIX_LOG=\"eval/logs/fix_cycle.log\"\n\necho \"[$TIMESTAMP] 检查代码审查结果: $FILE_PATH\" >> \"$FIX_LOG\"\n\n# 检查文件是否存在\nif [[ ! -f \"$FILE_PATH\" ]]; then\n    echo \"[$TIMESTAMP] SKIP: 审查文件不存在: $FILE_PATH\" >> \"$FIX_LOG\"\n    echo \"⚠️  代码审查文件不存在，跳过修复检查\"\n    exit 0\nfi\n\necho \"🔍 正在检查代码审查结果...\"\n\n# 运行修复验证器\nif python3 scripts/fix_validator.py > /tmp/fix_report.txt 2>&1; then\n    # 没有问题需要修复\n    echo \"[$TIMESTAMP] ✅ 代码审查通过，无需修复\" >> \"$FIX_LOG\"\n    echo \"✅ 代码审查通过，可以继续下一步（commit）\"\n    exit 0\nelse\n    # 发现需要修复的问题\n    FIX_STATUS=$?\n    ISSUES_COUNT=$(grep -c \"^[0-9]\\+\\.\" /tmp/fix_report.txt 2>/dev/null || echo \"未知\")\n    \n    echo \"[$TIMESTAMP] 🔧 发现 $ISSUES_COUNT 个问题需要修复\" >> \"$FIX_LOG\"\n    echo \"\" >> \"$FIX_LOG\"\n    cat /tmp/fix_report.txt >> \"$FIX_LOG\"\n    echo \"\" >> \"$FIX_LOG\"\n    \n    echo \"🔧 发现代码问题需要修复！\"\n    echo \"\"\n    cat /tmp/fix_report.txt\n    echo \"\"\n    echo \"⚠️  请调用 developer-coder 修复以上问题后再继续\"\n    echo \"💡 修复提示：\"\n    echo \"   1. 针对每个 MUST FIX 问题进行代码修改\"\n    echo \"   2. 如果测试覆盖率不足，请添加测试用例\"\n    echo \"   3. 修复完成后重新运行 code-reviewer 验证\"\n    echo \"\"\n    echo \"🔄 建议的修复流程：\"\n    echo \"   developer-coder → test-runner → code-reviewer → (循环直到通过)\"\n    \n    # 清理临时文件\n    rm -f /tmp/fix_report.txt\n    \n    exit 0  # 不阻止流程，但提供明确提示\nfi",
  "enabled": true,
  "timeout": 15000,
  "scope": "project"
}