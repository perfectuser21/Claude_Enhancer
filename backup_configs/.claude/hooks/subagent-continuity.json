{
  "name": "subagent-continuity", 
  "description": "确保子代理完成后继续工作流，防止回落主线程",
  "event": "SubagentStop",
  "matcher": {
    "subagent": ["spec-planner", "developer-coder", "test-runner", "code-reviewer", "commit-bot", "coach-qa"]
  },
  "action": "#!/bin/bash\nset -euo pipefail\n\n# 获取子代理信息\nSUBAGENT_NAME=$(echo \"$CLAUDE_SUBAGENT_RESULT\" | jq -r '.subagent_name // \"unknown\"')\nSUBAGENT_STATUS=$(echo \"$CLAUDE_SUBAGENT_RESULT\" | jq -r '.status // \"unknown\"')\nSUBAGENT_OUTPUT=$(echo \"$CLAUDE_SUBAGENT_RESULT\" | jq -r '.output // \"\"')\n\n# 创建状态跟踪目录\nmkdir -p eval/workflow_state\nWORKFLOW_STATE=\"eval/workflow_state/current.json\"\nTIMESTAMP=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n\necho \"[$TIMESTAMP] Subagent $SUBAGENT_NAME completed with status: $SUBAGENT_STATUS\"\n\n# 分析 SELF-EVAL 输出\nOUTCOME=\"unknown\"\nCONFIDENCE=0\nNEXT_ACTION=\"unknown\"\n\nif echo \"$SUBAGENT_OUTPUT\" | grep -qA 10 \"## SELF-EVAL\"; then\n    OUTCOME=$(echo \"$SUBAGENT_OUTPUT\" | grep -A 10 \"## SELF-EVAL\" | grep \"Outcome:\" | cut -d':' -f2- | xargs || echo \"unknown\")\n    CONFIDENCE=$(echo \"$SUBAGENT_OUTPUT\" | grep -A 10 \"## SELF-EVAL\" | grep \"Confidence:\" | cut -d':' -f2- | tr -d '%' | xargs || echo \"0\")\n    NEXT_ACTION=$(echo \"$SUBAGENT_OUTPUT\" | grep -A 10 \"## SELF-EVAL\" | grep \"Next:\" | cut -d':' -f2- | xargs || echo \"unknown\")\nfi\n\n# 定义标准工作流序列\ndeclare -A WORKFLOW_SEQUENCE=(\n    [\"spec-planner\"]=\"developer-coder\"\n    [\"developer-coder\"]=\"test-runner\"\n    [\"test-runner\"]=\"code-reviewer\"\n    [\"code-reviewer\"]=\"commit-bot\"\n    [\"commit-bot\"]=\"coach-qa\"\n    [\"coach-qa\"]=\"complete\"\n)\n\n# 更新工作流状态\ncat > \"$WORKFLOW_STATE\" <<EOF\n{\n  \"timestamp\": \"$TIMESTAMP\",\n  \"last_completed\": \"$SUBAGENT_NAME\",\n  \"outcome\": \"$OUTCOME\",\n  \"confidence\": $CONFIDENCE,\n  \"next_suggested\": \"$NEXT_ACTION\",\n  \"workflow_next\": \"${WORKFLOW_SEQUENCE[$SUBAGENT_NAME]:-complete}\"\n}\nEOF\n\n# 决定下一步行动\nNEXT_SUBAGENT=\"${WORKFLOW_SEQUENCE[$SUBAGENT_NAME]:-}\"\n\necho \"🔄 工作流状态更新：$SUBAGENT_NAME -> $NEXT_SUBAGENT\"\n\ncase \"$SUBAGENT_NAME\" in\n    \"spec-planner\")\n        if [[ \"$OUTCOME\" == \"yes\" && $CONFIDENCE -gt 80 ]]; then\n            echo \"✅ 需求分析完成，建议继续编码阶段\"\n            echo \"📋 提示：请确认 PRD 后调用 developer-coder 开始实现\"\n        else\n            echo \"⚠️  需求分析存在问题，建议重新分析或澄清需求\"\n        fi\n        ;;\n    \"developer-coder\")\n        if [[ \"$OUTCOME\" == \"yes\" && $CONFIDENCE -gt 70 ]]; then\n            echo \"✅ 代码实现完成，自动进入测试阶段\"\n            echo \"🧪 建议：立即调用 test-runner 验证代码质量\"\n        else\n            echo \"⚠️  代码实现存在问题，需要review或重构\"\n        fi\n        ;;\n    \"test-runner\")\n        # 检查是否有测试失败\n        if echo \"$SUBAGENT_OUTPUT\" | grep -q \"MUST FIX\\|FAILED\\|ERROR\"; then\n            echo \"❌ 测试发现问题，需要修复后再继续\"\n            echo \"🔧 建议：让 developer-coder 修复问题后重新测试\"\n        elif [[ \"$OUTCOME\" == \"yes\" ]]; then\n            echo \"✅ 测试通过，进入代码审查阶段\" \n            echo \"👀 建议：调用 code-reviewer 进行质量审查\"\n        fi\n        ;;\n    \"code-reviewer\")\n        # 检查是否有 MUST FIX 问题\n        if echo \"$SUBAGENT_OUTPUT\" | grep -q \"MUST FIX\"; then\n            echo \"❌ 代码审查发现必须修复的问题\"\n            echo \"🔧 建议：让 developer-coder 修复后重新审查\"\n        elif [[ \"$OUTCOME\" == \"yes\" ]]; then\n            echo \"✅ 代码审查通过，可以提交\"\n            echo \"📝 建议：调用 commit-bot 提交代码\"\n        fi\n        ;;\n    \"commit-bot\")\n        if [[ \"$OUTCOME\" == \"yes\" ]]; then\n            echo \"✅ 代码提交完成\"\n            echo \"🎓 可选：调用 coach-qa 获取改进建议\"\n        else\n            echo \"⚠️  代码提交失败，检查 Git 状态\"\n        fi\n        ;;\n    \"coach-qa\")\n        echo \"✅ VibePilot 工作流完成！\"\n        echo \"🎉 所有阶段已完成，功能开发完毕\"\n        ;;\nesac\n\n# 记录完成日志\necho \"[$TIMESTAMP] Workflow guidance provided for $SUBAGENT_NAME -> $NEXT_SUBAGENT\" >> \"eval/logs/workflow.log\"\n\nexit 0",
  "enabled": true,
  "timeout": 10000,
  "scope": "project"
}