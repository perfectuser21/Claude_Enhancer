{
  "name": "version-consistency",
  "description": "版本一致性检查 - 确保所有配置文件版本号保持一致",
  "event": "SessionStart",
  "matcher": {},
  "action": "#!/bin/bash\nset -euo pipefail\n\n# 版本一致性检查脚本\nPROJECT_ROOT=\"$(pwd)\"\nVERSION_FILE=\"$PROJECT_ROOT/.vibepilot/VERSION\"\nLOG_FILE=\"$PROJECT_ROOT/eval/logs/version_consistency.log\"\nTIMESTAMP=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\n\n# 创建日志目录\nmkdir -p \"$(dirname \"$LOG_FILE\")\"\n\necho \"[$TIMESTAMP] 开始版本一致性检查\" >> \"$LOG_FILE\"\n\n# 检查版本文件是否存在\nif [[ ! -f \"$VERSION_FILE\" ]]; then\n    echo \"[$TIMESTAMP] WARNING: 版本文件不存在: $VERSION_FILE\" >> \"$LOG_FILE\"\n    echo \"⚠️  版本文件不存在，跳过一致性检查\"\n    exit 0\nfi\n\n# 读取当前版本\nCURRENT_VERSION=$(cat \"$VERSION_FILE\")\necho \"[$TIMESTAMP] 当前版本: $CURRENT_VERSION\" >> \"$LOG_FILE\"\n\n# 定义需要检查的文件和对应的版本模式\ndeclare -A VERSION_PATTERNS=(\n    [\".claude/settings.json\"]='\"version\": \"([^\"]*)\",'\n    [\".claude/settings-v2.1.json\"]='\"version\": \"([^\"]*)\",'\n    [\"config/vibepilot_max.yaml\"]='version: \"([^\"]*)\"'\n    [\"install.sh\"]='VERSION=\"([^\"]*)\"'\n    [\"scripts/stage_start.sh\"]='VERSION=\"([^\"]*)\"'\n)\n\n# 检查结果统计\nTOTAL_FILES=0\nMISMATCH_FILES=0\nMISSING_FILES=0\n\n# 检查每个文件\nfor file in \"${!VERSION_PATTERNS[@]}\"; do\n    TOTAL_FILES=$((TOTAL_FILES + 1))\n    FULL_PATH=\"$PROJECT_ROOT/$file\"\n    PATTERN=\"${VERSION_PATTERNS[$file]}\"\n    \n    if [[ ! -f \"$FULL_PATH\" ]]; then\n        echo \"[$TIMESTAMP] MISSING: $file\" >> \"$LOG_FILE\"\n        echo \"❌ 文件缺失: $file\"\n        MISSING_FILES=$((MISSING_FILES + 1))\n        continue\n    fi\n    \n    # 提取版本号\n    if FOUND_VERSION=$(grep -oP \"$PATTERN\" \"$FULL_PATH\" | head -1 | sed -n 's/.*\"\\([^\"]*\\)\".*/\\1/p'); then\n        if [[ \"$FOUND_VERSION\" == \"$CURRENT_VERSION\" ]]; then\n            echo \"[$TIMESTAMP] OK: $file version $FOUND_VERSION\" >> \"$LOG_FILE\"\n            echo \"✅ $file: $FOUND_VERSION\"\n        else\n            echo \"[$TIMESTAMP] MISMATCH: $file has $FOUND_VERSION, expected $CURRENT_VERSION\" >> \"$LOG_FILE\"\n            echo \"⚠️  版本不匹配: $file ($FOUND_VERSION ≠ $CURRENT_VERSION)\"\n            MISMATCH_FILES=$((MISMATCH_FILES + 1))\n        fi\n    else\n        echo \"[$TIMESTAMP] ERROR: Cannot extract version from $file\" >> \"$LOG_FILE\"\n        echo \"❌ 无法提取版本: $file\"\n        MISMATCH_FILES=$((MISMATCH_FILES + 1))\n    fi\ndone\n\n# 输出总结\necho \"\"\necho \"📊 版本一致性检查结果:\"\necho \"   总计文件: $TOTAL_FILES\"\necho \"   版本一致: $((TOTAL_FILES - MISMATCH_FILES - MISSING_FILES))\"\necho \"   版本不匹配: $MISMATCH_FILES\"\necho \"   文件缺失: $MISSING_FILES\"\n\n# 记录总结\necho \"[$TIMESTAMP] 检查完成 - 总计:$TOTAL_FILES, 不匹配:$MISMATCH_FILES, 缺失:$MISSING_FILES\" >> \"$LOG_FILE\"\n\n# 提供修复建议\nif [[ $MISMATCH_FILES -gt 0 || $MISSING_FILES -gt 0 ]]; then\n    echo \"\"\n    echo \"🔧 修复建议:\"\n    echo \"   运行版本升级脚本: ./scripts/bump-version.sh [type]\"\n    echo \"   或手动同步版本号到: $CURRENT_VERSION\"\nfi\n\nexit 0",
  "enabled": true,
  "timeout": 10000,
  "scope": "project"
}