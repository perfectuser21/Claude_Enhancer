{
  "name": "quality-assurance",
  "description": "质量保障钩子 - 自动格式化代码、运行冒烟测试、记录执行统计",
  "event": "PostToolUse",
  "matcher": {
    "tool": ["Edit", "Write", "MultiEdit"],
    "file_extension": [".js", ".ts", ".jsx", ".tsx", ".py", ".go", ".rs", ".java", ".php", ".rb", ".css", ".scss", ".html", ".vue", ".svelte"]
  },
  "action": "#!/bin/bash\nset -euo pipefail\n\n# 获取文件信息\nFILE_PATH=$(echo \"$CLAUDE_TOOL_INPUT\" | jq -r '.file_path // \"\"')\nTOOL_TYPE=$(echo \"$CLAUDE_TOOL_INPUT\" | jq -r '.tool_name // \"unknown\"')\n\n# 创建日志目录\nmkdir -p eval/logs\nSMOKE_LOG=\"eval/logs/smoke.log\"\nTIMESTAMP=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\nSTART_TIME=$(date +%s.%N)\n\necho \"[$TIMESTAMP] Starting post-tool quality checks for: $FILE_PATH\" >> \"$SMOKE_LOG\"\n\n# 检查文件是否存在\nif [[ ! -f \"$FILE_PATH\" ]]; then\n    echo \"[$TIMESTAMP] SKIP: File not found: $FILE_PATH\" >> \"$SMOKE_LOG\"\n    echo \"⚠️  文件不存在，跳过质量检查\"\n    exit 0\nfi\n\n# 获取文件扩展名\nFILE_EXT=\"${FILE_PATH##*.}\"\necho \"📁 处理文件：$FILE_PATH (.$FILE_EXT)\"\n\n# 代码格式化\nFORMAT_SUCCESS=true\nFORMAT_MSG=\"\"\n\ncase \"$FILE_EXT\" in\n    \"js\"|\"jsx\"|\"ts\"|\"tsx\")\n        echo \"🔧 JavaScript/TypeScript 格式化...\"\n        if command -v prettier >/dev/null 2>&1; then\n            if prettier --write \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ Prettier 格式化成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ Prettier 格式化失败\"\n            fi\n        elif command -v npx >/dev/null 2>&1; then\n            if npx prettier --write \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ Prettier (via npx) 格式化成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ Prettier 不可用，跳过格式化\"\n            fi\n        else\n            FORMAT_MSG=\"⚠️  未安装 Prettier，跳过格式化\"\n        fi\n        ;;\n    \"py\")\n        echo \"🔧 Python 格式化...\"\n        if command -v black >/dev/null 2>&1; then\n            if black \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ Black 格式化成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ Black 格式化失败\"\n            fi\n        elif command -v autopep8 >/dev/null 2>&1; then\n            if autopep8 --in-place \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ autopep8 格式化成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ autopep8 格式化失败\"\n            fi\n        else\n            FORMAT_MSG=\"⚠️  未安装格式化工具，跳过格式化\"\n        fi\n        ;;\n    \"go\")\n        echo \"🔧 Go 格式化...\"\n        if command -v gofmt >/dev/null 2>&1; then\n            if gofmt -w \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ gofmt 格式化成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ gofmt 格式化失败\"\n            fi\n        else\n            FORMAT_MSG=\"⚠️  未安装 Go，跳过格式化\"\n        fi\n        ;;\n    \"rs\")\n        echo \"🔧 Rust 格式化...\"\n        if command -v rustfmt >/dev/null 2>&1; then\n            if rustfmt \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ rustfmt 格式化成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ rustfmt 格式化失败\"\n            fi\n        else\n            FORMAT_MSG=\"⚠️  未安装 Rust，跳过格式化\"\n        fi\n        ;;\n    \"java\")\n        echo \"🔧 Java 格式化...\"\n        if command -v google-java-format >/dev/null 2>&1; then\n            if google-java-format --replace \"$FILE_PATH\" 2>/dev/null; then\n                FORMAT_MSG=\"✅ Google Java Format 成功\"\n            else\n                FORMAT_SUCCESS=false\n                FORMAT_MSG=\"❌ Google Java Format 失败\"\n            fi\n        else\n            FORMAT_MSG=\"⚠️  未安装 Google Java Format，跳过格式化\"\n        fi\n        ;;\n    *)\n        FORMAT_MSG=\"ℹ️  不支持的文件类型，跳过格式化\"\n        ;;\nesac\n\necho \"$FORMAT_MSG\"\n\n# 代码语法检查（冒烟测试）\nSYNTAX_SUCCESS=true\nSYNTAX_MSG=\"\"\n\ncase \"$FILE_EXT\" in\n    \"py\")\n        echo \"🔍 Python 语法检查...\"\n        if python3 -m py_compile \"$FILE_PATH\" 2>/dev/null; then\n            SYNTAX_MSG=\"✅ Python 语法检查通过\"\n        else\n            SYNTAX_SUCCESS=false\n            SYNTAX_MSG=\"❌ Python 语法错误\"\n        fi\n        ;;\n    \"js\"|\"jsx\")\n        echo \"🔍 JavaScript 语法检查...\"\n        if command -v node >/dev/null 2>&1; then\n            if node -c \"$FILE_PATH\" 2>/dev/null; then\n                SYNTAX_MSG=\"✅ JavaScript 语法检查通过\"\n            else\n                SYNTAX_SUCCESS=false\n                SYNTAX_MSG=\"❌ JavaScript 语法错误\"\n            fi\n        else\n            SYNTAX_MSG=\"⚠️  Node.js 不可用，跳过语法检查\"\n        fi\n        ;;\n    \"go\")\n        echo \"🔍 Go 语法检查...\"\n        if command -v go >/dev/null 2>&1; then\n            # 检查当前目录是否是Go模块\n            if [[ -f \"go.mod\" ]] || go env GOPATH >/dev/null 2>&1; then\n                if go build -o /dev/null \"$FILE_PATH\" 2>/dev/null; then\n                    SYNTAX_MSG=\"✅ Go 编译检查通过\"\n                else\n                    SYNTAX_SUCCESS=false\n                    SYNTAX_MSG=\"❌ Go 编译错误\"\n                fi\n            else\n                SYNTAX_MSG=\"⚠️  非Go模块环境，跳过编译检查\"\n            fi\n        else\n            SYNTAX_MSG=\"⚠️  Go 不可用，跳过语法检查\"\n        fi\n        ;;\n    \"rs\")\n        echo \"🔍 Rust 语法检查...\"\n        if command -v rustc >/dev/null 2>&1; then\n            if rustc --crate-type lib \"$FILE_PATH\" -o /dev/null 2>/dev/null; then\n                SYNTAX_MSG=\"✅ Rust 编译检查通过\"\n            else\n                SYNTAX_SUCCESS=false\n                SYNTAX_MSG=\"❌ Rust 编译错误\"\n            fi\n        else\n            SYNTAX_MSG=\"⚠️  Rust 不可用，跳过语法检查\"\n        fi\n        ;;\n    *)\n        SYNTAX_MSG=\"ℹ️  不支持的文件类型，跳过语法检查\"\n        ;;\nesac\n\necho \"$SYNTAX_MSG\"\n\n# 快速测试检查（如果存在测试命令）\nTEST_SUCCESS=true\nTEST_MSG=\"\"\n\necho \"🧪 快速冒烟测试...\"\n\n# 检查常见的测试命令\nif [[ -f \"package.json\" ]] && command -v npm >/dev/null 2>&1; then\n    # Node.js 项目\n    if npm run test --silent 2>/dev/null | head -5; then\n        TEST_MSG=\"✅ npm test 冒烟测试通过\"\n    else\n        # 检查是否有测试脚本\n        if grep -q '\"test\"' package.json; then\n            TEST_SUCCESS=false\n            TEST_MSG=\"❌ npm test 执行失败\"\n        else\n            TEST_MSG=\"ℹ️  未配置测试脚本，跳过测试\"\n        fi\n    fi\nelif [[ -f \"requirements.txt\" || -f \"setup.py\" ]] && command -v python3 >/dev/null 2>&1; then\n    # Python 项目\n    if python3 -m pytest --maxfail=1 -q 2>/dev/null | head -5; then\n        TEST_MSG=\"✅ pytest 冒烟测试通过\"\n    elif python3 -m unittest discover -q 2>/dev/null | head -5; then\n        TEST_MSG=\"✅ unittest 冒烟测试通过\"  \n    else\n        if find . -name \"*test*.py\" | head -1 | read; then\n            TEST_SUCCESS=false\n            TEST_MSG=\"❌ Python 测试执行失败\"\n        else\n            TEST_MSG=\"ℹ️  未发现测试文件，跳过测试\"\n        fi\n    fi\nelif [[ -f \"go.mod\" ]] && command -v go >/dev/null 2>&1; then\n    # Go 项目\n    if go test -v -short 2>/dev/null | head -5; then\n        TEST_MSG=\"✅ go test 冒烟测试通过\"\n    else\n        if find . -name \"*_test.go\" | head -1 | read; then\n            TEST_SUCCESS=false\n            TEST_MSG=\"❌ go test 执行失败\"\n        else\n            TEST_MSG=\"ℹ️  未发现测试文件，跳过测试\"\n        fi\n    fi\nelse\n    TEST_MSG=\"ℹ️  未识别项目类型，跳过自动化测试\"\nfi\n\necho \"$TEST_MSG\"\n\n# 计算执行时间\nEND_TIME=$(date +%s.%N)\nEXECUTION_TIME=$(echo \"$END_TIME - $START_TIME\" | bc -l 2>/dev/null || echo \"unknown\")\n\n# 记录结果到日志\necho \"[$TIMESTAMP] RESULTS for $FILE_PATH:\" >> \"$SMOKE_LOG\"\necho \"  Format: $FORMAT_SUCCESS - $FORMAT_MSG\" >> \"$SMOKE_LOG\"\necho \"  Syntax: $SYNTAX_SUCCESS - $SYNTAX_MSG\" >> \"$SMOKE_LOG\"\necho \"  Test: $TEST_SUCCESS - $TEST_MSG\" >> \"$SMOKE_LOG\"\necho \"  Duration: ${EXECUTION_TIME}s\" >> \"$SMOKE_LOG\"\necho \"\" >> \"$SMOKE_LOG\"\n\n# 输出最终状态\nif [[ \"$FORMAT_SUCCESS\" == true && \"$SYNTAX_SUCCESS\" == true && \"$TEST_SUCCESS\" == true ]]; then\n    echo \"✅ 质量检查全部通过 (耗时: ${EXECUTION_TIME}s)\"\n    exit 0\nelse\n    echo \"⚠️  质量检查发现问题 (耗时: ${EXECUTION_TIME}s)\"\n    if [[ \"$SYNTAX_SUCCESS\" == false ]]; then\n        echo \"   - 语法检查失败，建议立即修复\"\n    fi\n    if [[ \"$TEST_SUCCESS\" == false ]]; then\n        echo \"   - 测试执行失败，建议检查代码逻辑\"\n    fi\n    exit 0  # 不阻止流程，只是警告\nfi",
  "enabled": true,
  "timeout": 30000,
  "scope": "project"
}