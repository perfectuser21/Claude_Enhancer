#!/usr/bin/env bash
# Auto Release Script for Claude Enhancer v5.4.0
# Purpose: Automated git tag creation and GitHub release
# Used by: P6 release workflow

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../utils/common.sh
source "${SCRIPT_DIR}/../utils/common.sh"

# Configuration
VERSION_FILE="VERSION"
CHANGELOG_FILE="CHANGELOG.md"
DRY_RUN="${CE_DRY_RUN:-0}"

# Functions

get_next_version() {
    local current_version="$1"
    local bump_type="${2:-patch}"

    # Parse semver
    if [[ "$current_version" =~ ^v?([0-9]+)\.([0-9]+)\.([0-9]+)(-.*)?$ ]]; then
        local major="${BASH_REMATCH[1]}"
        local minor="${BASH_REMATCH[2]}"
        local patch="${BASH_REMATCH[3]}"
        local suffix="${BASH_REMATCH[4]}"

        case "$bump_type" in
            major)
                echo "v$((major + 1)).0.0"
                ;;
            minor)
                echo "v${major}.$((minor + 1)).0"
                ;;
            patch)
                echo "v${major}.${minor}.$((patch + 1))"
                ;;
            *)
                die "Invalid bump type: $bump_type (use: major, minor, patch)"
                ;;
        esac
    else
        die "Invalid version format: $current_version"
    fi
}

generate_release_notes() {
    local version="$1"
    local previous_version="$2"

    log_info "Generating release notes for $version..."

    # Get commits since last tag
    local commits
    if [[ -n "$previous_version" ]]; then
        commits=$(git log "${previous_version}..HEAD" --pretty=format:"- %s (%h)" --no-merges)
    else
        commits=$(git log --pretty=format:"- %s (%h)" --no-merges --max-count=50)
    fi

    # Categorize commits
    local features=$(echo "$commits" | grep -E "^- (feat|feature)" || true)
    local fixes=$(echo "$commits" | grep -E "^- (fix|bugfix)" || true)
    local perf=$(echo "$commits" | grep -E "^- (perf|performance)" || true)
    local docs=$(echo "$commits" | grep -E "^- (docs|documentation)" || true)
    local others=$(echo "$commits" | grep -vE "^- (feat|feature|fix|bugfix|perf|performance|docs|documentation)" || true)

    # Build release notes
    cat <<EOF
## 🎉 Release $version

**Release Date**: $(date +%Y-%m-%d)

### ✨ New Features
$(if [[ -n "$features" ]]; then echo "$features"; else echo "No new features in this release."; fi)

### 🐛 Bug Fixes
$(if [[ -n "$fixes" ]]; then echo "$fixes"; else echo "No bug fixes in this release."; fi)

### ⚡ Performance Improvements
$(if [[ -n "$perf" ]]; then echo "$perf"; else echo "No performance improvements in this release."; fi)

### 📚 Documentation
$(if [[ -n "$docs" ]]; then echo "$docs"; else echo "No documentation updates in this release."; fi)

### 🔧 Other Changes
$(if [[ -n "$others" ]]; then echo "$others"; else echo "No other changes in this release."; fi)

---

**Full Changelog**: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/compare/${previous_version}...${version}

🤖 Generated by Claude Enhancer v5.4.0
EOF
}

create_release() {
    local version="$1"
    local bump_type="${2:-patch}"

    # Get current version
    local current_version
    if [[ -f "$VERSION_FILE" ]]; then
        current_version=$(cat "$VERSION_FILE")
    else
        current_version=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
    fi

    log_info "Current version: $current_version"

    # Calculate new version if not specified
    if [[ "$version" == "auto" ]]; then
        version=$(get_next_version "$current_version" "$bump_type")
        log_info "Auto-calculated version: $version"
    fi

    # Validate version format
    if [[ ! "$version" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        die "Invalid version format: $version (expected: v1.2.3)"
    fi

    # Check if tag already exists
    if git rev-parse "$version" &>/dev/null; then
        log_error "Tag $version already exists"
        return 1
    fi

    # Generate release notes
    local release_notes=$(generate_release_notes "$version" "$current_version")

    # Update VERSION file
    if [[ "$DRY_RUN" != "1" ]]; then
        echo "$version" > "$VERSION_FILE"
        git add "$VERSION_FILE"
        git commit -m "chore(release): bump version to $version" || true
    fi

    # Dry run mode
    if [[ "$DRY_RUN" == "1" ]]; then
        log_info "DRY RUN: Would create release $version"
        echo ""
        echo "$release_notes"
        return 0
    fi

    # Create git tag
    log_info "Creating git tag $version..."
    git tag -a "$version" -m "Release $version"

    # Push tag
    log_info "Pushing tag to remote..."
    git push origin "$version"

    # Create GitHub release
    log_info "Creating GitHub release..."
    if echo "$release_notes" | gh release create "$version" --title "Release $version" --notes-file -; then
        log_success "Release $version created successfully"
        log_info "View release: https://github.com/$(gh repo view --json nameWithOwner --jq '.nameWithOwner')/releases/tag/$version"
        return 0
    else
        log_error "Failed to create GitHub release"
        return 1
    fi
}

# Main execution
main() {
    local version="${1:-auto}"
    local bump_type="${2:-patch}"

    log_info "Creating release..."

    # Check environment
    check_environment

    # Ensure we're on main/master
    local branch=$(get_current_branch)
    if ! is_main_branch "$branch"; then
        log_error "Must be on main/master branch to create release"
        log_info "Current branch: $branch"
        return 1
    fi

    # Ensure working directory is clean
    if ! git diff-index --quiet HEAD --; then
        log_error "Working directory has uncommitted changes"
        return 1
    fi

    # Create release
    create_release "$version" "$bump_type"
}

# Run main if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
