#!/usr/bin/env bash
# Auto PR Script for Claude Enhancer v5.4.0
# Purpose: Automated pull request creation with template and validation
# Used by: Claude automation, P6 release workflow

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../utils/common.sh
source "${SCRIPT_DIR}/../utils/common.sh"

# Configuration
AUTO_MERGE="${CE_AUTO_MERGE:-0}"
DRAFT="${CE_PR_DRAFT:-0}"
DRY_RUN="${CE_DRY_RUN:-0}"

# Functions

generate_pr_title() {
    local branch="$1"

    # Extract feature type and description from branch name
    if [[ "$branch" =~ ^(feature|bugfix|perf|docs|experiment)/(.+)$ ]]; then
        local type="${BASH_REMATCH[1]}"
        local description="${BASH_REMATCH[2]}"

        # Convert kebab-case to Title Case
        local title=$(echo "$description" | tr '-' ' ' | awk '{for(i=1;i<=NF;i++)sub(/./,toupper(substr($i,1,1)),$i)}1')

        case "$type" in
            feature) echo "feat: $title" ;;
            bugfix) echo "fix: $title" ;;
            perf) echo "perf: $title" ;;
            docs) echo "docs: $title" ;;
            experiment) echo "experiment: $title" ;;
        esac
    else
        echo "Update from $branch"
    fi
}

generate_pr_body() {
    local branch="$1"
    local base_branch="$2"

    # Get commit messages since branching
    local commits=$(git log --pretty=format:"- %s" "${base_branch}..HEAD")

    # Detect phase from latest commit
    local latest_commit=$(git log -1 --pretty=format:"%s")
    local phase=$(detect_phase "$latest_commit")
    local phase_name=$(get_phase_name "$phase")

    # Count changes
    local files_changed=$(git diff --name-only "${base_branch}..HEAD" | wc -l)
    local insertions=$(git diff --shortstat "${base_branch}..HEAD" | grep -oE '[0-9]+ insertion' | grep -oE '[0-9]+' || echo "0")
    local deletions=$(git diff --shortstat "${base_branch}..HEAD" | grep -oE '[0-9]+ deletion' | grep -oE '[0-9]+' || echo "0")

    cat <<EOF
## ðŸ“‹ Summary

This PR implements changes from branch \`$branch\`.

**Phase**: P${phase} - ${phase_name}

## ðŸ”„ Changes

$commits

## ðŸ“Š Stats

- **Files changed**: $files_changed
- **Insertions**: +$insertions
- **Deletions**: -$deletions

## âœ… Checklist

- [ ] Code follows project style guidelines
- [ ] Tests have been added/updated
- [ ] Documentation has been updated
- [ ] All CI checks pass
- [ ] Quality score â‰¥ 8.0/10

## ðŸ¤– Generated by Claude Enhancer v5.4.0
EOF
}

create_pull_request() {
    local branch="$1"
    local base_branch="${2:-$(get_default_branch)}"

    # Check if branch is pushed
    if ! remote_branch_exists "$branch"; then
        log_error "Branch $branch is not pushed to remote"
        log_info "Run: ./automation/core/auto_push.sh"
        return 1
    fi

    # Check if PR already exists
    local existing_pr=$(gh pr list --head "$branch" --json number --jq '.[0].number' 2>/dev/null || echo "")
    if [[ -n "$existing_pr" ]]; then
        log_warning "PR already exists: #$existing_pr"
        log_info "View at: $(gh pr view "$existing_pr" --json url --jq '.url')"
        return 0
    fi

    # Generate title and body
    local title=$(generate_pr_title "$branch")
    local body=$(generate_pr_body "$branch" "$base_branch")

    # Prepare flags
    local flags=("--base" "$base_branch" "--head" "$branch" "--title" "$title" "--body" "$body")

    if [[ "$DRAFT" == "1" ]]; then
        flags+=("--draft")
        log_info "Creating draft PR"
    fi

    # Dry run mode
    if [[ "$DRY_RUN" == "1" ]]; then
        log_info "DRY RUN: Would create PR with title: $title"
        echo ""
        echo "$body"
        return 0
    fi

    # Create PR
    log_info "Creating pull request..."
    local pr_url
    if pr_url=$(gh pr create "${flags[@]}" 2>&1); then
        log_success "Pull request created: $pr_url"

        # Extract PR number
        local pr_number=$(echo "$pr_url" | grep -oE '[0-9]+$')

        # Add to merge queue if auto-merge enabled
        if [[ "$AUTO_MERGE" == "1" ]]; then
            log_info "Adding to merge queue..."
            "${SCRIPT_DIR}/../queue/merge_queue_manager.sh" enqueue "$pr_number"
        fi

        return 0
    else
        log_error "Failed to create PR: $pr_url"
        return 1
    fi
}

# Main execution
main() {
    local branch="${1:-$(get_current_branch)}"
    local base_branch="${2:-$(get_default_branch)}"

    log_info "Creating PR: $branch â†’ $base_branch"

    # Check environment
    check_environment

    # Create PR
    create_pull_request "$branch" "$base_branch"
}

# Run main if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
