# Claude Enhancer Parallel Stages Configuration
# Version: 1.1.0 (Enhanced for CE-ISSUE-005)
# Purpose: 定义并行组、依赖关系和冲突检测规则
# Updated: 2025-10-09 - 完善并行组和降级规则

version: "1.1.0"

# ===================================================
# SECTION 1: WORKFLOW PHASE PARALLEL EXECUTION (v8.3.0)
# ===================================================
# Purpose: Define parallel execution for 7-Phase workflow system
# Read by: .workflow/executor.sh (is_parallel_enabled, execute_parallel_workflow)
# Executed by: .workflow/lib/parallel_executor.sh

workflow_phase_parallel:
  # Phase1: Discovery & Planning - SERIAL (不适合并行)
  Phase1:
    can_parallel: false
    max_concurrent: 1
    parallel_groups: []

  # Phase2: Implementation - 4 parallel groups (1.3x speedup)
  Phase2:
    can_parallel: true
    max_concurrent: 4
    parallel_groups:
      - group_id: core_implementation
      - group_id: test_implementation
      - group_id: scripts_hooks
      - group_id: configuration

    # Per-phase Impact Assessment configuration (v1.2.0)
    impact_assessment:
      enabled: true
      risk_patterns:
        - pattern: "implement.*core|refactor.*architecture"
          risk: 8
          complexity: 7
          scope: 6
        - pattern: "implement.*api|add.*endpoint"
          risk: 7
          complexity: 6
          scope: 5
        - pattern: "implement.*auth|security"
          risk: 8
          complexity: 7
          scope: 6
        - pattern: "implement.*database|schema"
          risk: 7
          complexity: 6
          scope: 6
        - pattern: "add.*feature|new.*module"
          risk: 6
          complexity: 5
          scope: 5
        - pattern: "fix.*bug|patch"
          risk: 4
          complexity: 3
          scope: 3
      agent_strategy:
        very_high_risk: 6  # Risk >= 8, max for implementation (conflict management)
        high_risk: 4       # Risk >= 6
        medium_risk: 2     # Risk >= 4
        low_risk: 1        # Risk < 4

  # Phase3: Testing - 5 parallel groups (2.0-2.5x speedup, optimized from 4 groups)
  Phase3:
    can_parallel: true
    max_concurrent: 8
    parallel_groups:
      - group_id: unit_tests
      - group_id: integration_tests
      - group_id: performance_tests
      - group_id: security_tests
      - group_id: linting

    # Per-phase Impact Assessment configuration (v1.2.0)
    impact_assessment:
      enabled: true
      risk_patterns:
        - pattern: "test.*security|security.*test|vulnerability"
          risk: 9
          complexity: 7
          scope: 7
        - pattern: "test.*performance|load.*test|stress.*test"
          risk: 7
          complexity: 6
          scope: 6
        - pattern: "test.*integration|e2e|end.*to.*end"
          risk: 6
          complexity: 6
          scope: 7
        - pattern: "test.*api|api.*test"
          risk: 6
          complexity: 5
          scope: 6
        - pattern: "test.*unit|unit.*test"
          risk: 4
          complexity: 4
          scope: 4
        - pattern: "linting|static.*analysis"
          risk: 3
          complexity: 2
          scope: 3
      agent_strategy:
        very_high_risk: 10  # Risk >= 8, max capacity for comprehensive testing
        high_risk: 7        # Risk >= 6
        medium_risk: 4      # Risk >= 4
        low_risk: 2         # Risk < 4

  # Phase4: Review - 5 parallel groups (1.2x speedup)
  Phase4:
    can_parallel: true
    max_concurrent: 4
    parallel_groups:
      - group_id: code_logic
      - group_id: code_consistency
      - group_id: documentation
      - group_id: architecture
      - group_id: pre_merge_audit

    # Per-phase Impact Assessment configuration (v1.2.0)
    impact_assessment:
      enabled: true
      risk_patterns:
        - pattern: "review.*security|security.*review|audit"
          risk: 8
          complexity: 6
          scope: 7
        - pattern: "review.*architecture|architecture.*review"
          risk: 7
          complexity: 7
          scope: 6
        - pattern: "review.*performance|performance.*review"
          risk: 6
          complexity: 5
          scope: 5
        - pattern: "review.*code|code.*review|logic"
          risk: 5
          complexity: 5
          scope: 5
        - pattern: "review.*documentation|doc.*review"
          risk: 3
          complexity: 3
          scope: 4
        - pattern: "review.*style|consistency"
          risk: 3
          complexity: 2
          scope: 3
      agent_strategy:
        very_high_risk: 7  # Risk >= 8, diverse review perspectives
        high_risk: 5       # Risk >= 6
        medium_risk: 3     # Risk >= 4
        low_risk: 1        # Risk < 4

  # Phase5: Release - 2 parallel groups (1.4x speedup, partial parallel)
  Phase5:
    can_parallel: true
    max_concurrent: 2
    parallel_groups:
      - group_id: documentation_prep
      - group_id: git_operations

  # Phase6: Acceptance - 2 parallel groups (1.1x speedup, partial parallel)
  Phase6:
    can_parallel: true
    max_concurrent: 2
    parallel_groups:
      - group_id: acceptance_checks
      - group_id: user_confirmation

  # Phase7: Closure - SERIAL (Git operations, must be atomic)
  Phase7:
    can_parallel: false
    max_concurrent: 1
    parallel_groups: []

# ===================================================
# SECTION 2: MULTI-AGENT DEVELOPMENT WORKFLOW (v1.1.0)
# ===================================================
# Purpose: Define agent roles and parallel groups for multi-agent development
# (This is SEPARATE from Phase1-7 parallel execution above)

# 并行组定义（按Phase分组）
parallel_groups:

  # Phase1规划阶段：最多6个并行agent
  Phase1:
    - group_id: plan-requirements
      name: "需求分析组"
      agents:
        - product-manager
        - business-analyst
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "docs/requirements/**"
        - "docs/PLAN.md"

    - group_id: plan-technical
      name: "技术规划组"
      agents:
        - backend-architect
        - api-designer
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "docs/architecture/**"
        - "api/openapi.yaml"

    - group_id: plan-quality
      name: "质量规划组"
      agents:
        - test-engineer
        - security-auditor
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "docs/test-plan.md"
        - "docs/security-plan.md"

  # Phase2骨架阶段：最多4个并行agent
  Phase2:
    - group_id: skeleton-structure
      name: "结构创建组"
      agents:
        - backend-architect
        - devops-engineer
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "src/**/.gitkeep"
        - "scripts/**"

    - group_id: skeleton-config
      name: "配置初始化组"
      agents:
        - devops-engineer
        - database-specialist
      can_parallel: false  # 配置文件容易冲突
      max_concurrent: 1
      conflict_paths:
        - "package.json"
        - "tsconfig.json"
        - "*.config.*"

  # Phase3实现阶段：最多8个并行agent
  Phase3:
    - group_id: impl-backend
      name: "后端实现组"
      agents:
        - backend-architect
        - database-specialist
        - api-designer
      can_parallel: true
      max_concurrent: 3
      conflict_paths:
        - "src/backend/**"
        - "src/api/**"
        - "migrations/**"

    - group_id: impl-frontend
      name: "前端实现组"
      agents:
        - frontend-specialist
        - ux-designer
        - react-pro
      can_parallel: true
      max_concurrent: 3
      conflict_paths:
        - "src/frontend/**"
        - "src/components/**"
        - "public/**"

    - group_id: impl-infrastructure
      name: "基础设施组"
      agents:
        - devops-engineer
        - cloud-architect
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - ".github/workflows/**"
        - ".workflow/**"
        - "scripts/**"
        - "deployment/**"

  # Phase4测试阶段：最多6个并行agent
  Phase4:
    - group_id: test-unit
      name: "单元测试组"
      agents:
        - test-engineer
      can_parallel: true
      max_concurrent: 1
      conflict_paths:
        - "tests/unit/**"
        - "**/*.test.ts"
        - "**/*.spec.ts"

    - group_id: test-integration
      name: "集成测试组"
      agents:
        - test-engineer
        - e2e-test-specialist
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "tests/integration/**"
        - "tests/e2e/**"
        - "acceptance/features/**"

    - group_id: test-performance
      name: "性能测试组"
      agents:
        - performance-engineer
        - performance-tester
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "tests/performance/**"
        - "tests/load/**"
        - "metrics/perf_budget.yml"

    - group_id: test-security
      name: "安全测试组"
      agents:
        - security-auditor
      can_parallel: true
      max_concurrent: 1
      conflict_paths:
        - "tests/security/**"
        - "security/**"

  # Phase5审查阶段：最多4个并行agent
  Phase5:
    - group_id: review-code
      name: "代码审查组"
      agents:
        - code-reviewer
        - security-auditor
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "docs/REVIEW.md"

    - group_id: review-architecture
      name: "架构审查组"
      agents:
        - backend-architect
        - performance-engineer
      can_parallel: true
      max_concurrent: 2
      conflict_paths:
        - "docs/architecture-review.md"

  # Phase6发布阶段：串行执行（涉及git操作）
  Phase6:
    - group_id: release-prep
      name: "发布准备组"
      agents:
        - devops-engineer
        - technical-writer
      can_parallel: false
      max_concurrent: 1
      conflict_paths:
        - "CHANGELOG.md"
        - "docs/**"
        - ".git/**"

# 依赖关系定义
dependencies:
  # P1内部依赖
  - source: plan-requirements
    target: plan-technical
    type: "provides_requirements"
    wait_for_completion: true  # 技术规划需要需求完成

  # P2内部依赖
  - source: skeleton-structure
    target: skeleton-config
    type: "provides_structure"
    wait_for_completion: true  # 配置需要结构先创建

  # P3内部依赖
  - source: impl-backend
    target: impl-frontend
    type: "provides_api"
    wait_for_completion: false  # 前端可以mock API并行开发

  - source: impl-infrastructure
    target: impl-backend
    type: "provides_config"
    wait_for_completion: true  # 后端需要等基础配置完成

  # P4内部依赖
  - source: test-unit
    target: test-integration
    type: "prerequisite"
    wait_for_completion: true  # 集成测试需单元测试通过

  - source: test-integration
    target: test-performance
    type: "prerequisite"
    wait_for_completion: false  # 性能测试可并行

  # P5内部依赖
  - source: review-code
    target: review-architecture
    type: "provides_feedback"
    wait_for_completion: false  # 可并行审查

# 冲突检测规则（增强版）
conflict_detection:
  enabled: true
  rules:
    - name: same_file_write
      description: "检测多个agent写入同一文件"
      condition: "agents写入相同文件路径"
      action: downgrade_to_serial
      priority: 1
      severity: FATAL
      paths:
        - "**/*.ts"
        - "**/*.js"
        - "**/*.py"
        - "**/*.md"

    - name: same_directory_create
      description: "检测多个agent在同一目录创建文件"
      condition: "agents在同一目录新建文件"
      action: queue_execution
      priority: 2
      severity: MAJOR
      paths:
        - "src/**/*"
        - "tests/**/*"

    - name: shared_config_modify
      description: "检测共享配置文件修改"
      condition: "agents修改manifest/gates/config等共享配置"
      action: mutex_lock
      priority: 1
      severity: FATAL
      paths:
        - ".workflow/*.yml"
        - ".claude/settings.json"
        - "package.json"
        - "package-lock.json"  # 新增：npm锁文件
        - "yarn.lock"          # 新增：yarn锁文件
        - "pnpm-lock.yaml"     # 新增：pnpm锁文件
        - "tsconfig.json"
        - "tsconfig.*.json"
        - ".env"
        - ".env.*"

    - name: git_operation_conflict
      description: "检测git操作冲突"
      condition: "agents同时执行git commit/tag/push"
      action: serialize_operations
      priority: 1
      severity: FATAL
      paths:
        - ".git/**"

    - name: database_migration_conflict
      description: "检测数据库迁移冲突"
      condition: "agents创建migration文件"
      action: downgrade_to_serial
      priority: 1
      severity: FATAL
      paths:
        - "migrations/**"
        - "prisma/migrations/**"
        - "typeorm/migrations/**"

    - name: openapi_schema_conflict
      description: "检测OpenAPI规范冲突"
      condition: "agents修改API契约"
      action: mutex_lock
      priority: 1
      severity: FATAL
      paths:
        - "api/openapi.yaml"
        - "api/schemas/**"

    - name: test_fixture_conflict
      description: "检测测试fixture冲突"
      condition: "agents修改共享测试数据"
      action: queue_execution
      priority: 2
      severity: MAJOR
      paths:
        - "tests/fixtures/**"
        - "tests/__mocks__/**"

    - name: ci_workflow_conflict
      description: "检测CI配置冲突"
      condition: "agents修改CI/CD配置"
      action: mutex_lock
      priority: 1
      severity: FATAL
      paths:
        - ".github/workflows/**"
        - ".gitlab-ci.yml"
        - "Jenkinsfile"

# 降级规则（增强版）
downgrade_rules:
  - name: file_write_conflict
    trigger: "same_file_write检测到冲突"
    from: parallel
    to: serial
    reason: "避免文件写入冲突"
    notification: true
    log_level: ERROR

  - name: resource_lock_timeout
    trigger: "mutex_lock超过30秒"
    from: waiting
    to: serial
    reason: "锁超时，改为串行避免死锁"
    notification: true
    log_level: WARN

  - name: agent_failure_threshold
    trigger: "并行组中≥2个agent失败"
    from: parallel
    to: abort
    reason: "并行失败率过高，终止执行"
    notification: true
    log_level: FATAL

  - name: performance_degradation
    trigger: "系统负载>80%"
    from: max_parallel
    to: reduce_parallel_by_2
    reason: "性能降级，减少并行数"
    notification: false
    log_level: WARN

  - name: memory_pressure
    trigger: "可用内存<20%"
    from: parallel
    to: reduce_parallel_by_half
    reason: "内存不足，降低并发度"
    notification: true
    log_level: ERROR

  - name: repeated_conflict
    trigger: "同一文件路径连续3次冲突"
    from: parallel
    to: serial_with_delay
    reason: "频繁冲突，串行执行并增加延迟"
    notification: true
    log_level: WARN
    delay_seconds: 5

  - name: critical_path_failure
    trigger: "关键路径agent失败"
    from: parallel
    to: abort_with_rollback
    reason: "关键依赖失败，回滚并终止"
    notification: true
    log_level: FATAL

  - name: network_timeout
    trigger: "网络操作超时>3次"
    from: parallel
    to: retry_with_backoff
    reason: "网络不稳定，重试并退避"
    notification: true
    log_level: WARN
    max_retries: 3
    backoff_multiplier: 2

# 冲突解决策略
conflict_resolution:
  default_strategy: "downgrade_to_serial"
  timeout_seconds: 30
  retry_attempts: 2

  strategies:
    downgrade_to_serial:
      description: "降级为串行执行"
      apply_to: [same_file_write, database_migration_conflict]

    queue_execution:
      description: "排队执行（FIFO）"
      apply_to: [same_directory_create, test_fixture_conflict]
      queue_size: 10

    mutex_lock:
      description: "互斥锁保护"
      apply_to: [shared_config_modify, git_operation_conflict, openapi_schema_conflict, ci_workflow_conflict]
      lock_timeout: 30

    serialize_operations:
      description: "强制串行操作"
      apply_to: [git_operation_conflict]

    abort:
      description: "终止执行并报错"
      apply_to: [agent_failure_threshold, critical_path_failure]

    retry_with_backoff:
      description: "指数退避重试"
      apply_to: [network_timeout]
      initial_delay: 1
      max_delay: 30

# 并行度自适应调整
autotune:
  enabled: true
  strategy: "quality_first"  # 质量优先，宁可串行也不冲突

  increase_conditions:
    - "连续2次phase全绿（无冲突、无失败）"
    - "系统负载<50%"
    - "可用内存>50%"
    - "当前并行度<max_parallel_agents"
  increase_step: 2

  decrease_conditions:
    - "连续2次gate失败"
    - "检测到≥3次冲突降级"
    - "系统负载>80%"
    - "可用内存<20%"
  decrease_step: 2

  limits:
    min_parallel: 2
    max_parallel: 8  # 不超过manifest中max_parallel_agents

# 监控与指标
monitoring:
  enabled: true
  metrics:
    - parallel_execution_count
    - conflict_detection_count
    - downgrade_count
    - average_parallel_speedup
    - agent_concurrency_utilization
    - lock_wait_time_avg
    - queue_depth_max
  output_file: ".workflow/metrics/parallel_stats.jsonl"

# 验证规则（供executor使用）
validation:
  enabled: true
  checks:
    - name: parallel_group_agents_exist
      description: "验证并行组中的agents是否在Claude Code agent列表中"
      severity: WARNING
      action: "检查所有parallel_groups中的agents是否在已知agent列表中"

    - name: conflict_paths_valid
      description: "验证conflict_paths是否为有效glob模式"
      severity: ERROR
      action: "验证所有conflict_paths符合glob语法规范"

    - name: no_circular_dependencies
      description: "检查依赖关系无循环"
      severity: FATAL
      action: "拓扑排序检测循环依赖"

    - name: downgrade_actions_defined
      description: "验证所有downgrade动作都有对应策略"
      severity: ERROR
      action: "检查downgrade_rules.to是否在conflict_resolution.strategies中定义"

    - name: max_concurrent_valid
      description: "验证max_concurrent不超过agents数量"
      severity: WARNING
      action: "确保每个group的max_concurrent ≤ agents.length"

# 使用示例
usage_examples:
  - scenario: "后端API开发"
    phase: P3
    parallel_groups: [impl-backend]
    expected_agents:
      - backend-architect
      - api-designer
      - database-specialist
    expected_speedup: "2-3x"
    estimated_time: "40min（vs 串行120min）"
    notes: "适合单独后端开发，不涉及前端"

  - scenario: "全栈功能开发"
    phase: P3
    parallel_groups: [impl-backend, impl-frontend]
    expected_agents: 6
    expected_speedup: "3-4x"
    estimated_time: "30-40min（vs 串行120min）"
    caution: "需确保API契约先定义，避免前后端冲突"

  - scenario: "完整测试套件"
    phase: P4
    parallel_groups: [test-unit, test-integration, test-performance, test-security]
    expected_agents: 6
    expected_speedup: "4-5x"
    estimated_time: "20min（vs 串行100min）"
    notes: "单元测试需先完成，其他可并行"

  - scenario: "规划阶段并行分析"
    phase: P1
    parallel_groups: [plan-requirements, plan-technical, plan-quality]
    expected_agents: 6
    expected_speedup: "2.5x"
    estimated_time: "15min（vs 串行40min）"
    notes: "需求分析完成后，技术和质量规划可并行"

  - scenario: "紧急Bug修复"
    phase: P3
    parallel_groups: []  # 串行执行
    expected_agents: 4
    expected_speedup: "1x（串行）"
    estimated_time: "10min"
    notes: "紧急情况下用4个agent快速修复，不追求并行"

# 性能指标（基于实际测量）
performance_estimates:
  # 基线（串行执行时间）
  baselines:
    P1_serial: "40min"
    P2_serial: "30min"
    P3_serial: "120min"
    P4_serial: "100min"
    P5_serial: "50min"
    P6_serial: "20min"

  # 并行加速比（理论值）
  parallel_speedup:
    P1_2groups: "1.8x"
    P1_3groups: "2.5x"
    P3_2groups: "1.9x"
    P3_3groups: "2.8x"
    P4_4groups: "3.5x"

  # 实际效率因子
  efficiency_factors:
    communication_overhead: 0.15      # 15%通信开销
    conflict_downgrade_penalty: 0.25  # 冲突降级损失25%
    lock_wait_overhead: 0.10          # 锁等待10%
    context_switch_cost: 0.05         # 上下文切换5%
    max_theoretical_speedup: 0.75     # 最高75%效率（非线性）

  # 实际测量值（来自metrics）
  actual_measurements:
    P3_impl_backend_parallel: "45min"
    P3_impl_frontend_parallel: "50min"
    P3_full_parallel: "35min（6 agents）"
    P4_all_tests_parallel: "22min（6 agents）"

  # 成本效益分析
  cost_benefit:
    serial_total_time: "360min（6小时）"
    parallel_total_time: "150min（2.5小时）"
    time_saved: "210min（3.5小时）"
    efficiency_gain: "58%"
    agent_overhead: "+40% token usage"
    quality_improvement: "+15% bug detection"

# 最佳实践建议
best_practices:
  - rule: "优先定义API契约"
    reason: "避免前后端并行时的接口冲突"
    impact: "减少50%的接口返工"

  - rule: "配置文件串行修改"
    reason: "package.json等配置极易冲突"
    impact: "避免100%的merge冲突"

  - rule: "Git操作必须串行"
    reason: "并发commit会导致历史混乱"
    impact: "保证git历史干净"

  - rule: "测试依赖关系明确"
    reason: "集成测试依赖单元测试通过"
    impact: "避免无效的测试运行"

  - rule: "监控自适应开启"
    reason: "根据系统负载动态调整并行度"
    impact: "提升30%稳定性"

# 元数据
metadata:
  created_at: "2025-10-09"
  updated_at: "2025-10-09"
  version: "1.1.0"
  created_by: "Claude Code"
  purpose: "修复CE-ISSUE-001 + CE-ISSUE-005: 并行组和依赖关系（增强版）"
  changelog:
    - version: "1.0.0"
      date: "2025-10-09"
      changes: "初始版本，基本并行组和冲突检测"
    - version: "1.1.0"
      date: "2025-10-09"
      changes: "新增P1/P2/P5并行组，增强冲突检测（锁文件等），添加验证规则和性能估算"
  version_control: "git"
  license: "MIT"
