# Workflow Bypass - System Stabilization v8.7.0

**理由**: 系统级稳定化修复，修复workflow本身的逻辑问题
**任务**: 8步系统稳定化计划（修复Critical问题 + 建立防护机制）
**授权**: 用户明确要求执行stabilization计划
**日期**: 2025-10-30
**Bypass类型**: Phase 1文档跳过（但执行Phase 3-7验证）

## 为什么bypass Phase 1

这是对**workflow本身**的修复，存在循环依赖：
- ❌ 不能要求"修复workflow"也必须走完整workflow
- ❌ Phase 1文档要求本身就是被修复的对象之一
- ✅ 直接执行修复，但保留Phase 3-7质量验证

## 修复内容总结

### Step 1: 修复6个Critical逻辑问题
1. 版本统一到8.6.1
2. Coverage阈值从0%修复到70%
3. Shellcheck范围限定（避免扫描508个文件）
4. 删除26个版本文件
5. Phase文档路径规范化
6. 修复文档路径矛盾

### Step 2-5: 建立核心防护机制
- **Immutable Kernel**: 9个核心文件需RFC流程
- **State Manager**: 单一状态源统一管理
- **ChangeScope**: 任务级文件修改白名单
- **Lane Enforcer**: Phase级操作类型限制

### Step 6: 深度清理到基准线
- Hooks: 83 → 50
- Scripts: 115 → 90
- Docs: 7 (保持)

### Step 7: 添加规模检查
- 在gates.yml定义scale_limits
- 创建check_scale_limits.sh自动检查

### Step 8: 8层纵深防御文档
- 创建DEFENSE_IN_DEPTH.md
- 总结完整防护体系

## 质量保障

虽然bypass了Phase 1，但**严格执行**：
- ✅ Phase 3: Static Checks (Testing)
- ✅ Phase 4: Pre-merge Audit (Review)
- ✅ Phase 5: Version bump + CHANGELOG
- ✅ Phase 6: 用户验收
- ✅ Phase 7: 清理 + PR创建

## 用户审阅

- ✅ 用户已审阅ChatGPT的9个Critical问题分析
- ✅ 用户已审阅Claude的深度分析
- ✅ 用户明确要求执行融合方案
- ✅ 所有修改都在分析报告中详细说明

## 回滚计划

如果出现问题：
```bash
# 回滚到v8.6.1
git checkout main
git reset --hard v8.6.1
git push --force-with-lease origin main
```

## 后续行动

完成Phase 3-7后，这个BYPASS_WORKFLOW文件将被删除。
未来所有任务必须严格遵守7-Phase流程。

---

**这是一次性的特殊情况**，因为我们正在修复workflow本身的架构问题。
