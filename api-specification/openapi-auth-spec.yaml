openapi: 3.0.3
info:
  title: Perfect21 Authentication & User Management API
  description: |
    完整的用户认证和管理系统API规范

    ## 功能特性
    - JWT令牌认证
    - 用户注册/登录/登出
    - 密码重置
    - 用户配置文件管理
    - 角色权限控制
    - API速率限制
    - 多种错误处理

    ## 安全特性
    - HTTPS强制
    - JWT令牌过期管理
    - 密码加密存储
    - 请求频率限制
    - 输入验证
    - CORS配置

    ## 版本策略
    - API版本通过URL路径管理 (/api/v1/, /api/v2/)
    - 向后兼容性保证
    - 废弃API通知机制
  version: "1.0.0"
  contact:
    name: Perfect21 API Support
    email: api-support@perfect21.dev
    url: https://perfect21.dev/api-docs
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://perfect21.dev/terms

servers:
  - url: https://api.perfect21.dev/v1
    description: 生产环境
  - url: https://staging-api.perfect21.dev/v1
    description: 测试环境
  - url: http://localhost:3000/api/v1
    description: 本地开发环境

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # 健康检查
  /health:
    get:
      tags:
        - System
      summary: 系统健康检查
      description: 检查API服务状态
      security: []
      responses:
        '200':
          description: 系统正常
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2024-01-20T10:30:00Z"
                version: "1.0.0"
                uptime: 86400

  # 认证相关接口
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 用户注册
      description: |
        创建新用户账户

        **速率限制**: 每IP每小时最多5次注册请求

        **验证规则**:
        - 邮箱格式验证
        - 密码强度检查 (最少8位，包含大小写字母和数字)
        - 用户名唯一性验证
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              basic:
                summary: 基本注册信息
                value:
                  username: "johndoe"
                  email: "john@example.com"
                  password: "SecurePass123"
                  firstName: "John"
                  lastName: "Doe"
              with_profile:
                summary: 包含个人资料的注册
                value:
                  username: "janedoe"
                  email: "jane@example.com"
                  password: "MyPassword456"
                  firstName: "Jane"
                  lastName: "Doe"
                  phone: "+1234567890"
                  organization: "Acme Corp"
      responses:
        '201':
          description: 注册成功
          headers:
            X-RateLimit-Remaining:
              description: 剩余请求次数
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: "用户注册成功"
                data:
                  user:
                    id: "usr_1234567890"
                    username: "johndoe"
                    email: "john@example.com"
                    firstName: "John"
                    lastName: "Doe"
                    role: "user"
                    emailVerified: false
                    createdAt: "2024-01-20T10:30:00Z"
                  tokens:
                    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expiresIn: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: 用户登录
      description: |
        用户身份验证

        **速率限制**: 每IP每分钟最多10次登录尝试

        **支持方式**:
        - 用户名/密码
        - 邮箱/密码
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              with_username:
                summary: 使用用户名登录
                value:
                  username: "johndoe"
                  password: "SecurePass123"
              with_email:
                summary: 使用邮箱登录
                value:
                  email: "john@example.com"
                  password: "SecurePass123"
      responses:
        '200':
          description: 登录成功
          headers:
            X-RateLimit-Remaining:
              description: 剩余请求次数
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                success: true
                message: "登录成功"
                data:
                  user:
                    id: "usr_1234567890"
                    username: "johndoe"
                    email: "john@example.com"
                    firstName: "John"
                    lastName: "Doe"
                    role: "user"
                    emailVerified: true
                    lastLoginAt: "2024-01-20T10:30:00Z"
                  tokens:
                    accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    expiresIn: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: 用户登出
      description: |
        用户登出，使当前令牌失效

        **功能**:
        - 使当前访问令牌失效
        - 可选择使所有设备的令牌失效
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                allDevices:
                  type: boolean
                  description: 是否登出所有设备
                  default: false
            example:
              allDevices: false
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "登出成功"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: 刷新访问令牌
      description: |
        使用刷新令牌获取新的访问令牌

        **功能**:
        - 验证刷新令牌有效性
        - 生成新的访问令牌
        - 可选择生成新的刷新令牌
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            example:
              refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 令牌刷新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
              example:
                success: true
                message: "令牌刷新成功"
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  expiresIn: 3600
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: 忘记密码
      description: |
        发起密码重置流程

        **速率限制**: 每邮箱每小时最多3次请求

        **流程**:
        1. 验证邮箱是否存在
        2. 生成重置令牌
        3. 发送重置邮件
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            example:
              email: "john@example.com"
      responses:
        '200':
          description: 重置邮件已发送
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "密码重置邮件已发送"
        '400':
          $ref: '#/components/responses/BadRequest'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: 重置密码
      description: |
        使用重置令牌设置新密码

        **验证**:
        - 重置令牌有效性
        - 令牌是否过期
        - 新密码强度
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            example:
              token: "reset_token_abc123"
              newPassword: "NewSecurePass456"
      responses:
        '200':
          description: 密码重置成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "密码重置成功"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: 修改密码
      description: |
        已认证用户修改密码

        **验证**:
        - 当前密码正确性
        - 新密码强度
        - 新旧密码不能相同
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
            example:
              currentPassword: "OldPassword123"
              newPassword: "NewSecurePass456"
      responses:
        '200':
          description: 密码修改成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "密码修改成功"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # 用户管理接口
  /users/profile:
    get:
      tags:
        - User Management
      summary: 获取用户配置文件
      description: 获取当前用户的详细信息
      responses:
        '200':
          description: 用户信息获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
              example:
                success: true
                data:
                  id: "usr_1234567890"
                  username: "johndoe"
                  email: "john@example.com"
                  firstName: "John"
                  lastName: "Doe"
                  phone: "+1234567890"
                  organization: "Acme Corp"
                  role: "user"
                  emailVerified: true
                  phoneVerified: false
                  avatar: "https://api.perfect21.dev/avatars/usr_1234567890.jpg"
                  preferences:
                    language: "zh-CN"
                    timezone: "Asia/Shanghai"
                    notifications: true
                  createdAt: "2024-01-15T10:30:00Z"
                  updatedAt: "2024-01-20T10:30:00Z"
                  lastLoginAt: "2024-01-20T10:30:00Z"
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - User Management
      summary: 更新用户配置文件
      description: |
        更新用户个人信息

        **可更新字段**:
        - 姓名
        - 电话
        - 组织
        - 个人偏好

        **不可更新字段**:
        - 用户名
        - 邮箱 (需要单独验证)
        - 角色 (需要管理员权限)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
            example:
              firstName: "John"
              lastName: "Smith"
              phone: "+1234567890"
              organization: "New Company"
              preferences:
                language: "en-US"
                timezone: "America/New_York"
                notifications: false
      responses:
        '200':
          description: 配置文件更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /users/avatar:
    post:
      tags:
        - User Management
      summary: 上传用户头像
      description: |
        上传或更新用户头像

        **文件要求**:
        - 格式: JPEG, PNG, WebP
        - 大小: 最大5MB
        - 尺寸: 建议正方形，最小100x100px
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                  description: 头像图片文件
      responses:
        '200':
          description: 头像上传成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      avatarUrl:
                        type: string
                        format: uri
                        description: 头像URL
              example:
                success: true
                message: "头像上传成功"
                data:
                  avatarUrl: "https://api.perfect21.dev/avatars/usr_1234567890.jpg"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '413':
          $ref: '#/components/responses/PayloadTooLarge'

  /users/verify-email:
    post:
      tags:
        - User Management
      summary: 验证邮箱
      description: |
        使用验证码验证用户邮箱

        **速率限制**: 每邮箱每小时最多5次验证请求
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: 邮箱验证令牌
            example:
              token: "email_verify_token_xyz789"
      responses:
        '200':
          description: 邮箱验证成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "邮箱验证成功"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  /users/resend-verification:
    post:
      tags:
        - User Management
      summary: 重新发送验证邮件
      description: |
        重新发送邮箱验证邮件

        **速率限制**: 每邮箱每小时最多3次请求
      responses:
        '200':
          description: 验证邮件已发送
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "验证邮件已发送"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'

  # 管理员接口
  /admin/users:
    get:
      tags:
        - Admin Management
      summary: 获取用户列表
      description: |
        管理员获取用户列表

        **权限要求**: admin 角色

        **功能**:
        - 分页查询
        - 搜索过滤
        - 排序
      security:
        - BearerAuth: ['admin']
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: 搜索关键词 (用户名、邮箱、姓名)
          schema:
            type: string
        - name: role
          in: query
          description: 角色过滤
          schema:
            type: string
            enum: [admin, user, guest]
        - name: status
          in: query
          description: 状态过滤
          schema:
            type: string
            enum: [active, inactive, banned]
        - name: sort
          in: query
          description: 排序字段
          schema:
            type: string
            enum: [createdAt, updatedAt, lastLoginAt, username, email]
            default: createdAt
        - name: order
          in: query
          description: 排序方向
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: 用户列表获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
              example:
                success: true
                data:
                  users:
                    - id: "usr_1234567890"
                      username: "johndoe"
                      email: "john@example.com"
                      firstName: "John"
                      lastName: "Doe"
                      role: "user"
                      status: "active"
                      emailVerified: true
                      createdAt: "2024-01-15T10:30:00Z"
                      lastLoginAt: "2024-01-20T10:30:00Z"
                  pagination:
                    currentPage: 1
                    totalPages: 5
                    totalUsers: 100
                    limit: 20
                    hasNext: true
                    hasPrev: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /admin/users/{userId}:
    get:
      tags:
        - Admin Management
      summary: 获取指定用户信息
      description: |
        管理员获取指定用户的详细信息

        **权限要求**: admin 角色
      security:
        - BearerAuth: ['admin']
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      responses:
        '200':
          description: 用户信息获取成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Admin Management
      summary: 更新用户信息
      description: |
        管理员更新指定用户信息

        **权限要求**: admin 角色

        **可更新字段**:
        - 角色
        - 状态
        - 基本信息
      security:
        - BearerAuth: ['admin']
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateUserRequest'
            example:
              role: "admin"
              status: "active"
              firstName: "John"
              lastName: "Doe"
              emailVerified: true
      responses:
        '200':
          description: 用户信息更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Admin Management
      summary: 删除用户
      description: |
        管理员删除指定用户

        **权限要求**: admin 角色

        **注意**: 此操作不可逆
      security:
        - BearerAuth: ['admin']
      parameters:
        - name: userId
          in: path
          required: true
          description: 用户ID
          schema:
            type: string
      responses:
        '200':
          description: 用户删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                success: true
                message: "用户删除成功"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT访问令牌认证

        格式: `Authorization: Bearer <token>`

        令牌包含以下信息:
        - 用户ID
        - 用户角色
        - 过期时间
        - 发布时间

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API密钥认证 (仅用于服务间调用)

        格式: `X-API-Key: <api_key>`

  schemas:
    # 请求模型
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
        - firstName
        - lastName
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
          pattern: '^[a-zA-Z0-9_-]+$'
          description: 用户名 (3-30位，字母数字下划线)
          example: "johndoe"
        email:
          type: string
          format: email
          maxLength: 254
          description: 邮箱地址
          example: "john@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: 密码 (最少8位，包含大小写字母和数字)
          example: "SecurePass123"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: 名字
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: 姓氏
          example: "Doe"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: 电话号码 (国际格式)
          example: "+1234567890"
        organization:
          type: string
          maxLength: 100
          description: 组织/公司名称
          example: "Acme Corp"

    LoginRequest:
      type: object
      required:
        - password
      anyOf:
        - required: [username]
        - required: [email]
      properties:
        username:
          type: string
          description: 用户名
          example: "johndoe"
        email:
          type: string
          format: email
          description: 邮箱地址
          example: "john@example.com"
        password:
          type: string
          description: 密码
          example: "SecurePass123"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: 刷新令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: 注册邮箱地址
          example: "john@example.com"

    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
          description: 密码重置令牌
          example: "reset_token_abc123"
        newPassword:
          type: string
          minLength: 8
          maxLength: 128
          description: 新密码
          example: "NewSecurePass456"

    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          description: 当前密码
          example: "OldPassword123"
        newPassword:
          type: string
          minLength: 8
          maxLength: 128
          description: 新密码
          example: "NewSecurePass456"

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: 名字
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: 姓氏
          example: "Smith"
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
          description: 电话号码
          example: "+1234567890"
        organization:
          type: string
          maxLength: 100
          description: 组织名称
          example: "New Company"
        preferences:
          $ref: '#/components/schemas/UserPreferences'

    AdminUpdateUserRequest:
      type: object
      properties:
        role:
          type: string
          enum: [admin, user, guest]
          description: 用户角色
          example: "user"
        status:
          type: string
          enum: [active, inactive, banned]
          description: 用户状态
          example: "active"
        firstName:
          type: string
          minLength: 1
          maxLength: 50
          description: 名字
          example: "John"
        lastName:
          type: string
          minLength: 1
          maxLength: 50
          description: 姓氏
          example: "Doe"
        emailVerified:
          type: boolean
          description: 邮箱验证状态
          example: true
        phoneVerified:
          type: boolean
          description: 电话验证状态
          example: false

    # 响应模型
    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          description: 操作是否成功
          example: true
        message:
          type: string
          description: 操作结果消息
          example: "操作成功"

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - version
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
          description: 系统状态
          example: "healthy"
        timestamp:
          type: string
          format: date-time
          description: 检查时间
          example: "2024-01-20T10:30:00Z"
        version:
          type: string
          description: API版本
          example: "1.0.0"
        uptime:
          type: integer
          description: 系统运行时间 (秒)
          example: 86400

    AuthResponse:
      type: object
      required:
        - success
        - message
        - data
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "认证成功"
        data:
          type: object
          required:
            - user
            - tokens
          properties:
            user:
              $ref: '#/components/schemas/User'
            tokens:
              $ref: '#/components/schemas/TokenPair'

    TokenResponse:
      type: object
      required:
        - success
        - message
        - data
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "令牌刷新成功"
        data:
          $ref: '#/components/schemas/TokenPair'

    UserProfileResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/UserProfile'

    UserListResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          required:
            - users
            - pagination
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/UserSummary'
            pagination:
              $ref: '#/components/schemas/Pagination'

    AdminUserResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/AdminUserDetail'

    # 数据模型
    User:
      type: object
      required:
        - id
        - username
        - email
        - role
        - emailVerified
        - createdAt
      properties:
        id:
          type: string
          description: 用户唯一标识
          example: "usr_1234567890"
        username:
          type: string
          description: 用户名
          example: "johndoe"
        email:
          type: string
          format: email
          description: 邮箱地址
          example: "john@example.com"
        firstName:
          type: string
          description: 名字
          example: "John"
        lastName:
          type: string
          description: 姓氏
          example: "Doe"
        role:
          type: string
          enum: [admin, user, guest]
          description: 用户角色
          example: "user"
        emailVerified:
          type: boolean
          description: 邮箱验证状态
          example: true
        createdAt:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-01-15T10:30:00Z"
        lastLoginAt:
          type: string
          format: date-time
          description: 最后登录时间
          example: "2024-01-20T10:30:00Z"

    UserProfile:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            phone:
              type: string
              description: 电话号码
              example: "+1234567890"
            organization:
              type: string
              description: 组织名称
              example: "Acme Corp"
            phoneVerified:
              type: boolean
              description: 电话验证状态
              example: false
            avatar:
              type: string
              format: uri
              description: 头像URL
              example: "https://api.perfect21.dev/avatars/usr_1234567890.jpg"
            preferences:
              $ref: '#/components/schemas/UserPreferences'
            updatedAt:
              type: string
              format: date-time
              description: 更新时间
              example: "2024-01-20T10:30:00Z"

    UserSummary:
      type: object
      required:
        - id
        - username
        - email
        - role
        - status
        - emailVerified
        - createdAt
      properties:
        id:
          type: string
          description: 用户ID
          example: "usr_1234567890"
        username:
          type: string
          description: 用户名
          example: "johndoe"
        email:
          type: string
          format: email
          description: 邮箱地址
          example: "john@example.com"
        firstName:
          type: string
          description: 名字
          example: "John"
        lastName:
          type: string
          description: 姓氏
          example: "Doe"
        role:
          type: string
          enum: [admin, user, guest]
          description: 用户角色
          example: "user"
        status:
          type: string
          enum: [active, inactive, banned]
          description: 用户状态
          example: "active"
        emailVerified:
          type: boolean
          description: 邮箱验证状态
          example: true
        createdAt:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-01-15T10:30:00Z"
        lastLoginAt:
          type: string
          format: date-time
          description: 最后登录时间
          example: "2024-01-20T10:30:00Z"

    AdminUserDetail:
      allOf:
        - $ref: '#/components/schemas/UserProfile'
        - type: object
          properties:
            status:
              type: string
              enum: [active, inactive, banned]
              description: 用户状态
              example: "active"
            loginCount:
              type: integer
              description: 登录次数
              example: 42
            lastIP:
              type: string
              format: ipv4
              description: 最后登录IP
              example: "192.168.1.100"
            notes:
              type: string
              description: 管理员备注
              example: "VIP用户"

    UserPreferences:
      type: object
      properties:
        language:
          type: string
          enum: [zh-CN, en-US, ja-JP, ko-KR]
          description: 界面语言
          default: "zh-CN"
          example: "zh-CN"
        timezone:
          type: string
          description: 时区
          default: "Asia/Shanghai"
          example: "Asia/Shanghai"
        notifications:
          type: boolean
          description: 是否接收通知
          default: true
          example: true
        theme:
          type: string
          enum: [light, dark, auto]
          description: 主题模式
          default: "auto"
          example: "auto"

    TokenPair:
      type: object
      required:
        - accessToken
        - refreshToken
        - expiresIn
      properties:
        accessToken:
          type: string
          description: 访问令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          description: 刷新令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          description: 访问令牌过期时间 (秒)
          example: 3600

    Pagination:
      type: object
      required:
        - currentPage
        - totalPages
        - totalUsers
        - limit
        - hasNext
        - hasPrev
      properties:
        currentPage:
          type: integer
          description: 当前页码
          example: 1
        totalPages:
          type: integer
          description: 总页数
          example: 5
        totalUsers:
          type: integer
          description: 总用户数
          example: 100
        limit:
          type: integer
          description: 每页数量
          example: 20
        hasNext:
          type: boolean
          description: 是否有下一页
          example: true
        hasPrev:
          type: boolean
          description: 是否有上一页
          example: false

    # 错误模型
    Error:
      type: object
      required:
        - success
        - error
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: 错误码
              example: "VALIDATION_ERROR"
            message:
              type: string
              description: 错误描述
              example: "请求参数验证失败"
            details:
              type: array
              description: 详细错误信息
              items:
                type: object
                properties:
                  field:
                    type: string
                    description: 错误字段
                    example: "email"
                  message:
                    type: string
                    description: 字段错误信息
                    example: "邮箱格式不正确"
            timestamp:
              type: string
              format: date-time
              description: 错误发生时间
              example: "2024-01-20T10:30:00Z"
            requestId:
              type: string
              description: 请求ID
              example: "req_abc123xyz789"

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              type: object
              properties:
                code:
                  example: "VALIDATION_ERROR"
                message:
                  example: "请求参数验证失败"
                details:
                  type: array
                  items:
                    type: object
                    properties:
                      field:
                        type: string
                        example: "email"
                      message:
                        type: string
                        example: "邮箱格式不正确"
                      code:
                        type: string
                        example: "INVALID_FORMAT"

    RateLimitError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            error:
              type: object
              properties:
                code:
                  example: "RATE_LIMIT_EXCEEDED"
                message:
                  example: "请求频率超过限制"
                retryAfter:
                  type: integer
                  description: 重试等待时间 (秒)
                  example: 300

  responses:
    BadRequest:
      description: 请求参数错误
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "BAD_REQUEST"
              message: "请求参数错误"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    Unauthorized:
      description: 未授权访问
      headers:
        WWW-Authenticate:
          description: 认证方式
          schema:
            type: string
            example: "Bearer"
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "认证失败或令牌已过期"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    Forbidden:
      description: 访问权限不足
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "FORBIDDEN"
              message: "权限不足，无法执行此操作"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    NotFound:
      description: 资源不存在
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "请求的资源不存在"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    Conflict:
      description: 资源冲突
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "CONFLICT"
              message: "用户名或邮箱已存在"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    ValidationError:
      description: 请求数据验证失败
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            success: false
            error:
              code: "VALIDATION_ERROR"
              message: "请求参数验证失败"
              details:
                - field: "email"
                  message: "邮箱格式不正确"
                  code: "INVALID_FORMAT"
                - field: "password"
                  message: "密码强度不足"
                  code: "WEAK_PASSWORD"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    RateLimitExceeded:
      description: 请求频率超过限制
      headers:
        X-RateLimit-Limit:
          description: 每小时限制次数
          schema:
            type: integer
        X-RateLimit-Remaining:
          description: 剩余请求次数
          schema:
            type: integer
        X-RateLimit-Reset:
          description: 限制重置时间 (Unix时间戳)
          schema:
            type: integer
        Retry-After:
          description: 重试等待时间 (秒)
          schema:
            type: integer
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RateLimitError'
          example:
            success: false
            error:
              code: "RATE_LIMIT_EXCEEDED"
              message: "请求频率超过限制，请稍后重试"
              retryAfter: 300
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    PayloadTooLarge:
      description: 请求体过大
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "PAYLOAD_TOO_LARGE"
              message: "上传文件大小超过限制 (5MB)"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

    InternalServerError:
      description: 服务器内部错误
      headers:
        X-Request-Id:
          description: 请求唯一标识
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "INTERNAL_SERVER_ERROR"
              message: "服务器内部错误，请稍后重试"
              timestamp: "2024-01-20T10:30:00Z"
              requestId: "req_abc123xyz789"

tags:
  - name: System
    description: 系统状态和健康检查
  - name: Authentication
    description: 用户认证相关接口
  - name: User Management
    description: 用户管理相关接口
  - name: Admin Management
    description: 管理员操作接口

# API使用说明
x-api-usage:
  authentication:
    description: |
      ## 认证方式

      ### JWT Bearer Token
      - 通过 `/auth/login` 获取访问令牌
      - 在请求头中添加: `Authorization: Bearer <access_token>`
      - 访问令牌有效期: 1小时
      - 使用刷新令牌延长会话

      ### API Key (仅服务间调用)
      - 在请求头中添加: `X-API-Key: <api_key>`
      - 用于服务间的安全通信

      ## 令牌生命周期
      1. 登录获取令牌对 (access + refresh)
      2. 使用access token访问API
      3. access token过期前使用refresh token获取新令牌
      4. 登出时撤销所有令牌

  rate-limiting:
    description: |
      ## 速率限制策略

      ### 全局限制
      - 每IP每分钟: 100请求
      - 每用户每分钟: 200请求

      ### 特殊接口限制
      - 注册: 每IP每小时5次
      - 登录: 每IP每分钟10次
      - 密码重置: 每邮箱每小时3次
      - 邮箱验证: 每邮箱每小时5次

      ### 响应头
      ```
      X-RateLimit-Limit: 100
      X-RateLimit-Remaining: 95
      X-RateLimit-Reset: 1642680000
      ```

  versioning:
    description: |
      ## API版本策略

      ### 版本命名
      - 主版本: v1, v2, v3...
      - 小版本通过响应头标识

      ### 版本管理
      - URL路径版本: `/api/v1/`, `/api/v2/`
      - 向后兼容性: 至少支持前一个主版本
      - 废弃通知: 提前6个月通知

      ### 迁移指南
      - 新版本发布时提供迁移文档
      - 关键变更会在响应头中标识
      - 提供版本兼容性测试工具

  error-handling:
    description: |
      ## 错误处理规范

      ### 错误码体系
      - `BAD_REQUEST`: 请求参数错误
      - `UNAUTHORIZED`: 认证失败
      - `FORBIDDEN`: 权限不足
      - `NOT_FOUND`: 资源不存在
      - `CONFLICT`: 资源冲突
      - `VALIDATION_ERROR`: 数据验证失败
      - `RATE_LIMIT_EXCEEDED`: 频率限制
      - `INTERNAL_SERVER_ERROR`: 服务器错误

      ### 错误响应格式
      ```json
      {
        "success": false,
        "error": {
          "code": "VALIDATION_ERROR",
          "message": "请求参数验证失败",
          "details": [
            {
              "field": "email",
              "message": "邮箱格式不正确",
              "code": "INVALID_FORMAT"
            }
          ],
          "timestamp": "2024-01-20T10:30:00Z",
          "requestId": "req_abc123xyz789"
        }
      }
      ```

  security:
    description: |
      ## 安全措施

      ### 数据保护
      - 密码bcrypt加密存储
      - 敏感数据传输加密
      - PII数据访问日志

      ### 请求安全
      - HTTPS强制
      - CORS策略配置
      - 请求签名验证
      - SQL注入防护
      - XSS攻击防护

      ### 认证安全
      - JWT令牌签名验证
      - 令牌黑名单机制
      - 多设备登录管理
      - 异常登录检测

  monitoring:
    description: |
      ## 监控和日志

      ### 请求跟踪
      - 每个请求分配唯一ID
      - 请求响应时间监控
      - 错误率统计

      ### 性能指标
      - API响应时间
      - 系统资源使用率
      - 数据库查询性能

      ### 日志记录
      - 请求/响应日志
      - 错误详情日志
      - 安全事件日志
      - 用户行为分析