# PyProject Configuration for Claude Enhancer v5.4.0
# Purpose: Python project configuration and tool settings

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-enhancer"
version = "5.4.0"
description = "Production-Grade AI Programming Workflow System"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Claude Enhancer Team"}
]
keywords = ["ai", "workflow", "automation", "development", "claude"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Quality Assurance",
]

[project.urls]
Homepage = "https://github.com/your-org/claude-enhancer"
Repository = "https://github.com/your-org/claude-enhancer"
Issues = "https://github.com/your-org/claude-enhancer/issues"

# Black Configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Pylint Configuration
[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0103",  # Invalid name (sometimes we use short names intentionally)
    "C0114",  # Missing module docstring
    "R0913",  # Too many arguments
    "R0914",  # Too many local variables
]

[tool.pylint.format]
max-line-length = 100

# MyPy Configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=.workflow --cov-report=term-missing --cov-report=html"
testpaths = ["test/unit", "test/integration"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "security: Security-related tests",
]

# Coverage Configuration
[tool.coverage.run]
source = [".workflow", ".claude"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
]
precision = 2
