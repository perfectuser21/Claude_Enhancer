/**
 * Checkpoint Encryption Demo
 * Demonstrates the production-ready encrypted checkpoint system
 */

const path = require('path');
const CheckpointManager = require('./src/recovery/CheckpointManager');

async function demonstrateCheckpointEncryption() {
    console.log('üîê Claude Enhancer 5.0 Checkpoint Encryption Demo');
    console.log('======================================\n');

    // Set up encryption key (in production, this should be in environment)
    process.env.PERFECT21_CHECKPOINT_KEY = 'your-secure-256-bit-key-here-32-chars-minimum';

    try {
        // Initialize checkpoint manager with encryption enabled
        const checkpointManager = new CheckpointManager({
            checkpointsDir: './.claude/checkpoints-demo',
            encryptionEnabled: true,
            maxCheckpoints: 50,
            retentionPeriod: 24 * 60 * 60 * 1000, // 24 hours
            autoBackup: true
        });

        console.log('‚úÖ Checkpoint manager initialized with encryption');
        console.log('Encryption info:', checkpointManager.getEncryptionInfo());
        console.log();

        // 1. Create encrypted checkpoints for different phases
        console.log('üìù Creating encrypted checkpoints...');

        const phase1State = {\n            phase: 'Phase1_Analysis',\n            requirements: [\n                'User authentication system',\n                'Data validation layer',\n                'Error handling framework'\n            ],\n            stakeholders: ['Product Manager', 'Lead Developer', 'Security Team'],\n            timeline: '2024-01-15 to 2024-01-20',\n            confidence: 0.85\n        };\n\n        const checkpoint1 = await checkpointManager.createCheckpoint(\n            'phase1-analysis-complete',\n            phase1State,\n            {\n                description: 'Requirements analysis completed',\n                tags: ['phase1', 'analysis', 'requirements'],\n                critical: true,\n                metadata: {\n                    author: 'claude-code',\n                    project: 'claude-enhancer-demo',\n                    environment: 'development'\n                }\n            }\n        );\n\n        console.log('   ‚úì Phase 1 checkpoint created and encrypted');\n\n        const phase3State = {\n            phase: 'Phase3_Implementation',\n            completedModules: [\n                {\n                    name: 'AuthenticationService',\n                    files: ['auth.js', 'middleware.js', 'validation.js'],\n                    tests: ['auth.test.js', 'integration.test.js'],\n                    coverage: 95.2\n                },\n                {\n                    name: 'CheckpointManager',\n                    files: ['CheckpointManager.js', 'encryption.js'],\n                    tests: ['checkpoint.test.js', 'encryption.test.js'],\n                    coverage: 98.7\n                }\n            ],\n            metrics: {\n                linesOfCode: 2547,\n                testCoverage: 96.4,\n                performanceScore: 92,\n                securityScore: 98\n            },\n            nextSteps: ['Phase 4 testing', 'Security audit', 'Performance optimization']\n        };\n\n        const checkpoint3 = await checkpointManager.createCheckpoint(\n            'phase3-implementation-milestone',\n            phase3State,\n            {\n                description: 'Major implementation milestone reached',\n                tags: ['phase3', 'implementation', 'milestone'],\n                critical: true,\n                metadata: {\n                    milestone: 'core-modules-complete',\n                    completionPercentage: 75\n                }\n            }\n        );\n\n        console.log('   ‚úì Phase 3 checkpoint created and encrypted');\n        console.log();\n\n        // 2. Demonstrate checkpoint listing and filtering\n        console.log('üìã Listing checkpoints...');\n        \n        const allCheckpoints = await checkpointManager.listCheckpoints();\n        console.log(`   Total checkpoints: ${allCheckpoints.length}`);\n        \n        const criticalCheckpoints = await checkpointManager.listCheckpoints({ critical: true });\n        console.log(`   Critical checkpoints: ${criticalCheckpoints.length}`);\n        \n        const phase3Checkpoints = await checkpointManager.listCheckpoints({ \n            tags: ['phase3'],\n            limit: 5 \n        });\n        console.log(`   Phase 3 checkpoints: ${phase3Checkpoints.length}`);\n        console.log();\n\n        // 3. Demonstrate checkpoint restoration\n        console.log('üîÑ Restoring checkpoint...');\n        \n        const restoredPhase1 = await checkpointManager.restoreCheckpoint('phase1-analysis-complete');\n        console.log('   ‚úì Phase 1 checkpoint restored');\n        console.log(`   Restored requirements count: ${restoredPhase1.state.requirements.length}`);\n        console.log(`   Confidence level: ${restoredPhase1.state.confidence}`);\n        console.log();\n\n        // 4. Demonstrate encryption statistics\n        console.log('üìä Encryption Statistics:');\n        const encryptionInfo = checkpointManager.getEncryptionInfo();\n        console.log(`   Encryption enabled: ${encryptionInfo.encryptionEnabled}`);\n        console.log(`   Algorithm: ${encryptionInfo.algorithm}`);\n        console.log(`   Key source: ${encryptionInfo.keySource}`);\n        console.log(`   Encrypted checkpoints: ${encryptionInfo.encryptedCheckpoints}`);\n        console.log(`   Total operations: ${encryptionInfo.stats.encrypted} encrypted, ${encryptionInfo.stats.decrypted} decrypted`);\n        console.log();\n\n        // 5. Create a backup checkpoint for disaster recovery\n        console.log('üíæ Creating disaster recovery checkpoint...');\n        \n        const systemState = {\n            timestamp: new Date().toISOString(),\n            systemHealth: {\n                cpuUsage: 15.2,\n                memoryUsage: 48.7,\n                diskSpace: 78.3,\n                networkLatency: 23\n            },\n            applicationState: {\n                activePhase: 'Phase3_Implementation',\n                lastSuccessfulBuild: '2024-01-22T10:30:00Z',\n                deploymentStatus: 'staging',\n                featureFlags: {\n                    encryptionEnabled: true,\n                    advancedLogging: true,\n                    performanceMonitoring: true\n                }\n            },\n            configuration: {\n                environment: 'production',\n                version: '2.0.0',\n                buildNumber: 'build-1642',\n                commitHash: 'a7b9c2d1e4f5'\n            }\n        };\n\n        await checkpointManager.createCheckpoint(\n            'disaster-recovery-snapshot',\n            systemState,\n            {\n                description: 'Full system state snapshot for disaster recovery',\n                tags: ['disaster-recovery', 'system-snapshot', 'production'],\n                critical: true,\n                retentionOverride: 30 * 24 * 60 * 60 * 1000, // 30 days\n                metadata: {\n                    backupType: 'full-system',\n                    priority: 'highest',\n                    automatedBackup: false\n                }\n            }\n        );\n        \n        console.log('   ‚úì Disaster recovery checkpoint created');\n        console.log();\n\n        // 6. Demonstrate advanced features\n        console.log('üöÄ Advanced Features Demo...');\n        \n        // Get comprehensive statistics\n        const stats = await checkpointManager.getStatistics();\n        console.log('   System Statistics:');\n        console.log(`     Total checkpoints: ${stats.totalCheckpoints}`);\n        console.log(`     Active checkpoints: ${stats.activeCheckpoints}`);\n        console.log(`     Critical checkpoints: ${stats.criticalCheckpoints}`);\n        console.log(`     Total size: ${(stats.totalSize / 1024).toFixed(1)} KB`);\n        console.log(`     Average size: ${(stats.averageSize / 1024).toFixed(1)} KB`);\n        console.log();\n        \n        // Demonstrate cleanup (dry run)\n        console.log('üßπ Cleanup simulation (dry run)...');\n        const cleanupResult = await checkpointManager.cleanupCheckpoints({ \n            dryRun: true,\n            preserveCritical: true \n        });\n        \n        console.log(`   Would delete: ${cleanupResult.deleted.length} checkpoints`);\n        console.log(`   Would preserve: ${cleanupResult.preserved.length} checkpoints`);\n        console.log();\n\n        // 7. Security demonstration\n        console.log('üîí Security Features:');\n        console.log('   ‚úì AES-256-GCM encryption with authentication');\n        console.log('   ‚úì PBKDF2 key derivation (100,000 rounds)');\n        console.log('   ‚úì Random salt and IV for each encryption');\n        console.log('   ‚úì Environment-based key management');\n        console.log('   ‚úì Backward compatibility with unencrypted data');\n        console.log('   ‚úì Secure file permissions (0600)');\n        console.log('   ‚úì Comprehensive error handling');\n        console.log();\n\n        // 8. Performance demonstration\n        console.log('‚ö° Performance Test...');\n        const performanceStart = Date.now();\n        \n        // Create multiple checkpoints rapidly\n        const performancePromises = [];\n        for (let i = 0; i < 10; i++) {\n            const testState = {\n                iteration: i,\n                data: `Performance test data ${i}`,\n                timestamp: Date.now(),\n                random: Math.random()\n            };\n            \n            performancePromises.push(\n                checkpointManager.createCheckpoint(\n                    `perf-test-${i}`,\n                    testState,\n                    {\n                        description: `Performance test checkpoint ${i}`,\n                        tags: ['performance', 'test']\n                    }\n                )\n            );\n        }\n        \n        await Promise.all(performancePromises);\n        const performanceEnd = Date.now();\n        \n        console.log(`   ‚úì Created 10 encrypted checkpoints in ${performanceEnd - performanceStart}ms`);\n        console.log(`   Average: ${((performanceEnd - performanceStart) / 10).toFixed(1)}ms per checkpoint`);\n        console.log();\n\n        // Final summary\n        console.log('‚ú® Demo completed successfully!');\n        console.log('Key Features Demonstrated:');\n        console.log('  - Production-ready AES-256-GCM encryption');\n        console.log('  - Secure key management with environment variables');\n        console.log('  - Backward compatibility with existing checkpoints');\n        console.log('  - Comprehensive checkpoint lifecycle management');\n        console.log('  - Advanced filtering and querying capabilities');\n        console.log('  - Automated retention policies and cleanup');\n        console.log('  - Performance optimized for high-throughput scenarios');\n        console.log('  - Enterprise-grade security and error handling');\n\n    } catch (error) {\n        console.error('‚ùå Demo failed:', error.message);\n        console.error('Stack trace:', error.stack);\n        process.exit(1);\n    }\n}\n\n// Usage examples for different scenarios\nasync function usageExamples() {\n    console.log('\\nüìñ Usage Examples:');\n    console.log('==================\\n');\n\n    console.log('1. Basic Setup (Environment Key):');\n    console.log('```bash');\n    console.log('export PERFECT21_CHECKPOINT_KEY=\"your-secure-256-bit-encryption-key\"');\n    console.log('```\\n');\n\n    console.log('2. Initialize with Custom Configuration:');\n    console.log('```javascript');\n    console.log('const checkpointManager = new CheckpointManager({');\n    console.log('    checkpointsDir: \"./.claude/checkpoints\",');\n    console.log('    encryptionEnabled: true,');\n    console.log('    encryptionKey: \"explicit-key-override\", // Optional');\n    console.log('    maxCheckpoints: 100,');\n    console.log('    retentionPeriod: 7 * 24 * 60 * 60 * 1000, // 7 days');\n    console.log('    autoBackup: true');\n    console.log('});');\n    console.log('```\\n');\n\n    console.log('3. Create Encrypted Checkpoint:');\n    console.log('```javascript');\n    console.log('const checkpoint = await checkpointManager.createCheckpoint(');\n    console.log('    \"my-secure-checkpoint\",');\n    console.log('    { sensitive: \"data\", user: \"info\" },');\n    console.log('    {');\n    console.log('        description: \"User data backup\",');\n    console.log('        tags: [\"user-data\", \"backup\"],');\n    console.log('        critical: true');\n    console.log('    }');\n    console.log(');');\n    console.log('```\\n');\n\n    console.log('4. Restore and Use:');\n    console.log('```javascript');\n    console.log('const restored = await checkpointManager.restoreCheckpoint(\"my-secure-checkpoint\");');\n    console.log('console.log(\"Restored data:\", restored.state);');\n    console.log('```\\n');\n\n    console.log('5. Migration from Unencrypted:');\n    console.log('```javascript');\n    console.log('// Migrate existing unencrypted checkpoints');\n    console.log('const result = await checkpointManager.migrateToEncrypted({');\n    console.log('    dryRun: false,    // Set to true to preview changes');\n    console.log('    batchSize: 10     // Process in batches');\n    console.log('});');\n    console.log('console.log(`Migrated ${result.migrated.length} checkpoints`);');\n    console.log('```\\n');\n\n    console.log('6. Advanced Querying:');\n    console.log('```javascript');\n    console.log('const secureCheckpoints = await checkpointManager.listCheckpoints({');\n    console.log('    encrypted: true,');\n    console.log('    critical: true,');\n    console.log('    tags: [\"production\"],');\n    console.log('    sortBy: \"timestamp\",');\n    console.log('    sortOrder: \"desc\",');\n    console.log('    limit: 10');\n    console.log('});');\n    console.log('```');\n}\n\n// Run demo if called directly\nif (require.main === module) {\n    (async () => {\n        await demonstrateCheckpointEncryption();\n        await usageExamples();\n    })();\n}\n\nmodule.exports = { demonstrateCheckpointEncryption, usageExamples };