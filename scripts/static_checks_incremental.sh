#!/usr/bin/env bash
# Â¢ûÈáèÈùôÊÄÅÊ£ÄÊü•ËÑöÊú¨ - Âü∫Á∫øÊØîËæÉÁâà
# Âü∫‰∫éChatGPT P1-7ÂÆ°Ê†∏: Ê∑ªÂä†Âü∫Á∫øÊØîËæÉÈò≤Ê≠¢Ë¥®ÈáèÈÄÄÂåñ
# Êó•Êúü: 2025-10-25

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "üîç Incremental Static Checks (with Baseline Validation)"
echo ""

# Ëé∑ÂèñbaseÂàÜÊîØ
BASE=${BASE:-origin/main}
git fetch origin +refs/heads/main:refs/remotes/origin/main >/dev/null 2>&1 || true

# Ëé∑ÂèñÂèòÊõ¥Êñá‰ª∂
CHANGED=$(git diff --name-only --diff-filter=ACMR "$BASE"...HEAD || true)

if [ -z "$CHANGED" ]; then
    echo "‚úÖ No files changed"
    exit 0
fi

echo "Changed files:"
echo "$CHANGED"
echo ""

# Ê£ÄÊü•ShellÊñá‰ª∂
echo "üìù Checking shell files..."
SHELL_FILES=$(echo "$CHANGED" | grep -E '\.sh$' || true)
if [ -n "$SHELL_FILES" ]; then
    # Only check for errors, not warnings (severity=error)
    echo "$SHELL_FILES" | xargs -r -n1 shellcheck --severity=error
    echo "‚úÖ Shell files passed"
else
    echo "‚è≠Ô∏è  No shell files changed"
fi
echo ""

# Ê£ÄÊü•PythonÊñá‰ª∂Ôºà‰∏çË¶Å|| trueÔºåËÆ©ÈîôËØØÁúüÂÆûÊö¥Èú≤Ôºâ
echo "üêç Checking Python files..."
PY_FILES=$(echo "$CHANGED" | grep -E '\.py$' || true)
if [ -n "$PY_FILES" ]; then
    # PythonËØ≠Ê≥ïÊ£ÄÊü•
    echo "$PY_FILES" | xargs -r -n1 python3 -m py_compile

    # Flake8Ê£ÄÊü•Ôºà‰∏çË¶Å|| trueÔºâ
    echo "$PY_FILES" | xargs -r -n1 flake8 --max-line-length=120

    echo "‚úÖ Python files passed"
else
    echo "‚è≠Ô∏è  No Python files changed"
fi
echo ""

echo "‚úÖ Incremental file checks completed"
echo ""

# ============================================
# Âü∫Á∫øÈ™åËØÅÔºöÊ£ÄÊü•ÂÖ®Â±ÄË¥®ÈáèÊåáÊ†á
# ============================================
echo "üìä Validating against quality baselines..."
echo ""

BASELINE_VIOLATIONS=0

# Baseline 1: Shellcheck ÊÄªË≠¶ÂëäÊï∞ ‚â§ 1850
if command -v shellcheck >/dev/null 2>&1; then
    SHELLCHECK_BASELINE=1850

    # Êü•ÊâæÊâÄÊúâshellËÑöÊú¨
    ALL_SHELL_FILES=$(find . -type f -name "*.sh" \
        -not -path "./.git/*" \
        -not -path "./node_modules/*" \
        -not -path "./.temp/*" \
        -not -path "./archive/*" 2>/dev/null || true)

    if [ -n "$ALL_SHELL_FILES" ]; then
        # ËÆ°ÁÆóÊÄªË≠¶ÂëäÊï∞Ôºà‰∏ç‰ΩøÁî®|| trueÔºåËÆ©shellcheckÂ§±Ë¥•ÁúüÂÆûÊö¥Èú≤Ôºâ
        # shellcheck disable=SC2086
        SHELLCHECK_OUTPUT=$(shellcheck -f gcc $ALL_SHELL_FILES 2>/dev/null || true)
        SHELLCHECK_WARNINGS=$(echo "$SHELLCHECK_OUTPUT" | grep -c "warning:" || true)

        echo -e "  Shellcheck warnings: $SHELLCHECK_WARNINGS / $SHELLCHECK_BASELINE (baseline)"

        if [ "$SHELLCHECK_WARNINGS" -le "$SHELLCHECK_BASELINE" ]; then
            echo -e "  ${GREEN}‚úÖ Within baseline${NC}"
        else
            EXCESS=$((SHELLCHECK_WARNINGS - SHELLCHECK_BASELINE))
            echo -e "  ${RED}‚ùå Exceeds baseline by $EXCESS warnings${NC}"
            echo ""
            echo -e "${YELLOW}Top 10 new warnings:${NC}"
            echo "$SHELLCHECK_OUTPUT" | grep "warning:" | head -10 | sed 's/^/    /'
            ((BASELINE_VIOLATIONS++))
        fi
    fi
else
    echo -e "  ${YELLOW}‚ö†Ô∏è  shellcheck not installed - skipping baseline check${NC}"
fi

echo ""

# Final verdict
if [ $BASELINE_VIOLATIONS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ ALL CHECKS PASSED (incremental + baseline)${NC}"
    exit 0
else
    echo -e "${RED}‚ùå BASELINE VIOLATIONS DETECTED${NC}"
    echo -e "${RED}   Incremental changes caused quality regression${NC}"
    echo ""
    echo -e "${YELLOW}Fix required:${NC} Reduce warnings to meet baseline or update baseline with justification"
    exit 1
fi
