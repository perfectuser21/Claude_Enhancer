# Phase 1 完成确认机制
# Purpose: Phase 1结束时，AI必须用人话向用户说明白并等待确认

meta:
  version: "1.0.0"
  purpose: "确保Phase 1结束时用户理解要做什么，如何验证不是空架子"
  target_user: "编程小白和技术用户都能理解"
  trigger: "Phase 1.5 (Architecture Planning)完成后"

# ====================================================================
# 核心原则：Phase 1结束必须完成3件事
# ====================================================================
must_do:
  1_explain_in_plain_language:
    rule: "用人话说明白要做什么（不是技术术语）"
    format: |
      ## 一、我要实现什么？（用人话说）

      **简单来说**：现在XXX → 改成YYY

      **举例说明**：

      ❌ **现在的问题**：
      [具体场景描述]

      ✅ **改造后**：
      [具体场景描述改进后的样子]

      **核心**：[一句话总结核心价值]

  2_show_checklist:
    rule: "明确的Checklist（如何验证不是空架子）"
    required_sections:
      - "7-Phase Workflow强制检查（Phase 2-7的详细步骤）"
      - "实际可运行的测试（具体测试用例和预期结果）"
      - "你能验证的证据（实际运行命令和输出）"
      - "N项验收标准（来自user_request.md的Acceptance Criteria）"
      - "如果出问题怎么办（回滚机制和修复流程）"

    format: |
      ## 二、如何保证能落地？（Checklist机制）

      ### ✅ 保障层1：7-Phase Workflow强制检查

      Phase 2: Implementation
      ├─ [ ] 2.1 具体任务1
      ├─ [ ] 2.2 具体任务2
      └─ [ ] 2.N 所有代码能运行

      Phase 3: Testing（必须全部通过）
      ├─ [ ] 3.1 bash -n验证语法 ← 不通过不能继续
      ├─ [ ] 3.2 测试项2 ← 不通过不能继续
      └─ [ ] 3.N 性能达标 ← 不通过不能继续

      Phase 4: Review（必须全部通过）
      ├─ [ ] 4.1 审查项1 ← 不通过不能继续
      └─ [ ] 4.N Pre-merge audit通过 ← 不通过不能继续

      Phase 5-7: ...

      **关键点**：
      - ⛔ Phase N任何一项失败 → 回到Phase N-1修复
      - ⛔ 你说"有问题" → 不进入下一Phase

      ### ✅ 保障层2：实际可运行的测试

      ```bash
      # 测试1：[描述]
      测试："[具体内容]"
      预期：[预期结果]
      实际：运行 [命令]
      结果：[验证方法] ✓ 通过

      # 测试2、3...
      ```

      ### ✅ 保障层3：你能验证的证据

      1. **实际运行结果**：
         ```bash
         # 你可以自己运行验证：
         [实际命令]
         # 输出：[预期输出]
         ```

      2. **测试通过截图**：
         ```
         ✅ 单元测试：X/X passed
         ✅ 集成测试：Y/Y passed
         ```

      3. **代码审查报告**（REVIEW.md）：
         - 逐行检查代码逻辑
         - 验证版本一致性
         - 确认没有空壳实现

      ### ✅ N项验收标准（质量落地Checklist）

      **重要**：这个Checklist要用"人话+技术+证据"三重格式：

      **示例格式**：
      ```
      F1: 功能描述
      - 技术：技术术语描述
      - 人话：用户能理解的描述
      - 证据：如何验证（命令、文件、截图）
      ```

      **Checklist分类**：
      - 功能承诺（F1-FN）
      - 性能承诺（P1-PN）
      - 质量承诺（Q1-QN）
      - 集成承诺（I1-IN）
      - 文档承诺（D1-DN）

      **验收门槛**：≥90%完成（N项中≥X项）

      **Phase 1作用**：给用户看"我承诺做到哪些"
      **Phase 6作用**：给用户看"我实际完成了哪些"（✅/❌ + 证据）

  3_wait_for_confirmation:
    rule: "必须等待用户确认，不能自动进入Phase 2"
    required_user_responses:
      - "我理解了，开始Phase 2"
      - "Phase 1通过，开始Phase 2"
      - "可以，继续"
      - "没问题，进入Phase 2"

    blocked_until: "用户明确确认"

    format: |
      ## 三、现在需要你确认的

      **Phase 1已完成，请你确认3件事**：

      1. **你理解我要做什么了吗？**
         - ✅ 是：[一句话总结核心]
         - ❌ 否：我重新解释

      2. **你认可这个方案吗？**
         - ✅ 是：[方案关键点]
         - ❌ 否：说哪里不满意，我重新设计

      3. **可以开始Phase 2了吗？**
         - ✅ 是：我开始改代码（预计X小时完成）
         - ❌ 否：我等你的问题和建议

      **请用你的话告诉我**：
      - "我理解了，开始Phase 2" 或
      - "我有疑问：XXX" 或
      - "方案不行，需要改成YYY"

# ====================================================================
# 禁止的行为
# ====================================================================
forbidden:
  - action: "Phase 1结束后直接进入Phase 2写代码"
    reason: "用户可能没理解或不认可方案"
    consequence: "用户失去控制感，可能做错方向"

  - action: "只给技术文档（P1_DISCOVERY.md, PLAN.md）不总结"
    reason: "用户可能看不懂技术文档"
    consequence: "用户不知道要做什么，无法判断方案是否合理"

  - action: "只说'Phase 1完成'不解释checklist"
    reason: "用户不知道如何验证不是空架子"
    consequence: "用户担心最后拿到的是空架子"

  - action: "用技术术语解释（如'per-phase架构'、'YAML schema'）"
    reason: "用户可能听不懂"
    consequence: "用户无法判断方案是否符合需求"

# ====================================================================
# 输出模板
# ====================================================================
output_template: |
  # 🎯 Phase 1 完成 → 向你确认的内容

  ## 一、我要实现什么？（用人话说）

  **简单来说**：[现状] → [改造后]

  **举例说明**：

  ❌ **现在的问题**：
  [具体场景，用对话形式]

  ✅ **改造后**：
  [具体场景改进后，用对话形式]

  **核心**：[一句话总结]

  ---

  ## 二、具体改什么文件？

  **只改N个文件**：

  1. **文件1** - [简单说明]
     - 增加：[具体内容]
     - 修改：[具体内容]

  2. **文件2** - [简单说明]
     - 增加：[具体内容]

  **不改其他文件**！

  ---

  ## 三、如何保证能落地？（Checklist机制）

  ### ✅ 保障层1：7-Phase Workflow强制检查

  [详细的Phase 2-7步骤，每个步骤标注是否阻塞]

  ### ✅ 保障层2：实际可运行的测试

  [具体测试用例，包含命令和预期结果]

  ### ✅ 保障层3：你能验证的证据

  [用户可以自己运行的验证命令]

  ### ✅ 质量落地Checklist（Phase 1承诺 → Phase 6验收）

  **格式要求**："人话+技术+证据"三重格式

  **F1**: [功能1描述]
  - 技术：[技术术语]
  - 人话：[用户能理解的描述]
  - 证据：[如何验证]

  **F2-FN**: [其他功能...]

  **P1-PN**: [性能承诺...]

  **Q1-QN**: [质量承诺...]

  **I1-IN**: [集成承诺...]

  **D1-DN**: [文档承诺...]

  **验收门槛**：≥90%完成

  ---

  **Phase 6时展示格式**：
  ```
  功能承诺：✅✅✅❌✅ (4/5 = 80%)
  性能承诺：✅✅✅ (3/3 = 100%)
  质量承诺：✅✅✅✅✅ (5/5 = 100%)
  集成承诺：✅✅✅✅ (4/4 = 100%)
  文档承诺：✅✅✅ (3/3 = 100%)

  总计：19/20 (95%) ✅ 达标
  ```

  然后逐项展示证据（运行结果、文件内容、截图）

  ---

  ## 四、如果出问题怎么办？

  **场景1**：[问题描述]
  ```
  我做什么：[修复步骤]
  你看到什么：[结果]
  ```

  **场景2、3...**

  **回滚机制**：
  - 所有代码在feature分支（不影响main）
  - 你说"停" → 我立即停止
  - 你说"回滚" → 我执行git reset

  ---

  ## 五、我的承诺（防止空架子）

  **我保证做到**：

  1. ✅ **不跳Phase** - [具体说明]
  2. ✅ **每个代码都能运行** - [具体说明]
  3. ✅ **每个功能都有证据** - [具体说明]
  4. ✅ **每个阶段等你确认** - [具体说明]
  5. ✅ **问题立即修复** - [具体说明]

  ---

  ## 六、现在需要你确认的

  **Phase 1已完成，请你确认3件事**：

  1. **你理解我要做什么了吗？**
  2. **你认可这个方案吗？**
  3. **可以开始Phase 2了吗？**

  **请用你的话告诉我**：
  - "我理解了，开始Phase 2" 或
  - "我有疑问：XXX" 或
  - "方案不行，需要改成YYY"

  ---

  **这就是我应该在Phase 1结束时告诉你的内容**

# ====================================================================
# Hook集成
# ====================================================================
integration:
  hook_file: ".claude/hooks/phase1_completion_check.sh"
  trigger_condition: "Phase 1.5 (PLAN.md)完成后"

  hook_logic: |
    #!/bin/bash
    # Phase 1完成检查：确保AI给出了用户确认内容

    # 检查是否在Phase 1.5
    if [[ ! -f .workflow/PLAN.md ]]; then
        exit 0  # 不在Phase 1，不检查
    fi

    # 检查最近的对话是否包含"Phase 1完成确认"关键内容
    # （这需要Claude Code的API支持，目前无法实现）

    # 替代方案：在CLAUDE.md中明确写明此规则
    echo "⚠️  提醒：Phase 1完成后必须给用户确认内容（见phase1_confirmation.yml）"

# ====================================================================
# 示例（好的 vs 坏的）
# ====================================================================
examples:
  bad_example:
    description: "Phase 1结束后直接进Phase 2"
    ai_message: |
      Phase 1完成！现在开始Phase 2实现...

      [AI开始修改STAGES.yml...]

    problem: "用户还没确认理解和认可方案！"

  good_example:
    description: "Phase 1结束后用人话总结+等确认"
    ai_message: |
      # 🎯 Phase 1 完成 → 向你确认的内容

      ## 一、我要实现什么？（用人话说）

      **简单来说**：现在Impact Assessment是"一刀切" → 改成"每个阶段自己说了算"

      [详细举例...]

      ## 二、具体改什么文件？

      **只改3个文件**：[列表...]

      ## 三、如何保证能落地？

      ### ✅ 保障层1：7-Phase强制检查
      [详细步骤...]

      ### ✅ 保障层2：实际可运行的测试
      [测试用例...]

      ### ✅ 27项验收标准
      [逐项列出...]

      ## 四、现在需要你确认

      请告诉我：
      - "我理解了，开始Phase 2" 或
      - "我有疑问：XXX"

      [等待用户回复...]

    why_good: "用户能理解要做什么，如何验证，有控制权"

# ====================================================================
# 与现有workflow的集成
# ====================================================================
workflow_integration:
  phase_1_steps:
    - id: "1.1"
      name: "Branch Check"
      output: "feature分支创建"

    - id: "1.2"
      name: "Requirements Discussion"
      output: "user_request.md"

    - id: "1.3"
      name: "Technical Discovery"
      output: "P1_DISCOVERY.md (>300行)"

    - id: "1.4"
      name: "Impact Assessment"
      output: "影响半径评分+推荐agents数量"

    - id: "1.5"
      name: "Architecture Planning"
      output: "PLAN.md (>1000行)"

    - id: "1.6"  # 新增步骤
      name: "User Confirmation"
      trigger: "1.5完成后"
      required: true
      blocking: true  # 阻塞，不确认不能进Phase 2
      output: |
        1. 用人话总结（按phase1_confirmation.yml模板）
        2. 详细Checklist
        3. 等待用户回复确认

      success_criteria:
        - "用户说'我理解了，开始Phase 2'"
        - "用户说'Phase 1通过'"
        - "用户说'可以，继续'"

      failure_handling:
        - "用户说'有疑问' → AI回答疑问 → 重新确认"
        - "用户说'方案不行' → 返回1.3或1.5重新设计"

  gates:
    phase_1_to_phase_2:
      name: "Phase 1 → Phase 2 转换门禁"
      type: "user_confirmation"  # 需要用户确认
      check:
        - "P1_DISCOVERY.md存在且>300行"
        - "PLAN.md存在且>1000行"
        - "user_request.md中Acceptance Criteria已定义"
        - "用户已确认理解和认可方案"  # 新增

      blocking: true
      can_bypass: false  # 不能绕过用户确认

# ====================================================================
# 更新CLAUDE.md
# ====================================================================
claude_md_addition: |
  ## 🎯 Phase 1完成确认机制（强制）

  **触发时机**：Phase 1.5 (Architecture Planning)完成后

  **必须做的3件事**：

  1. ✅ **用人话说明白要做什么**
     - 不用技术术语
     - 举例说明before/after
     - 一句话总结核心价值

  2. ✅ **展示详细Checklist**
     - 7-Phase强制检查步骤
     - 实际可运行的测试用例
     - N项验收标准（来自user_request.md）
     - 回滚机制和问题处理

  3. ✅ **等待用户确认**
     - 必须等用户说"我理解了，开始Phase 2"
     - 不能自动进入Phase 2
     - 用户说"有疑问"或"方案不行" → 重新设计

  **详细规范**：见`.claude/phase1_confirmation.yml`

  **禁止行为**：
  - ❌ Phase 1结束后直接写代码
  - ❌ 只给技术文档不总结
  - ❌ 用技术术语解释
  - ❌ 不等用户确认就继续

# ====================================================================
# 版本历史
# ====================================================================
changelog:
  - version: "1.0.0"
    date: "2025-10-29"
    changes:
      - "创建Phase 1完成确认机制"
      - "定义3个must_do规则"
      - "提供详细输出模板"
      - "集成到workflow gates"
    reason: "用户反馈Phase 1结束时缺少'用人话总结+Checklist+等确认'的机制"
