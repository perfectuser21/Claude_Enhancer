#!/bin/bash
# =============================================================================
# Claude Enhancer Enhanced Security Pre-commit Hook
# Comprehensive security and quality checks before code commits
# =============================================================================

set -e

echo "üîê Enhanced Security Pre-commit Check"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Security check results
SECURITY_PASSED=true
QUALITY_PASSED=true
TOTAL_ISSUES=0

# =============================================================================
# 1. CRITICAL SECURITY CHECKS
# =============================================================================
echo -e "${PURPLE}üîí CRITICAL SECURITY CHECKS${NC}"

# Check for hardcoded passwords
echo "1.1 Checking for hardcoded passwords..."
if git diff --cached --name-only | xargs grep -l "password\s*[=:]\s*[\"'][^\"']*[\"']" 2>/dev/null | grep -v test | grep -v example; then
    echo -e "${RED}‚ùå CRITICAL: Hardcoded passwords detected${NC}"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No hardcoded passwords${NC}"
fi

# Check for API keys
echo "1.2 Checking for API keys..."
if git diff --cached --name-only | xargs grep -l -E "(api[_-]?key|secret[_-]?key|access[_-]?token)" 2>/dev/null | grep -v test | grep -v example | grep -v .md; then
    echo -e "${RED}‚ùå CRITICAL: Potential API keys detected${NC}"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No API keys detected${NC}"
fi

# Check for private keys
echo "1.3 Checking for private keys..."
if git diff --cached --name-only | xargs grep -l "BEGIN.*PRIVATE KEY" 2>/dev/null; then
    echo -e "${RED}‚ùå CRITICAL: Private keys detected${NC}"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No private keys detected${NC}"
fi

# Check for database URLs with credentials
echo "1.4 Checking for database URLs with credentials..."
if git diff --cached --name-only | xargs grep -l -E "(postgresql|mysql|mongodb)://[^:]+:[^@]+@" 2>/dev/null | grep -v example; then
    echo -e "${RED}‚ùå CRITICAL: Database URLs with credentials detected${NC}"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No database URLs with credentials${NC}"
fi

# Check for JWT secrets
echo "1.5 Checking for JWT secrets..."
if git diff --cached --name-only | xargs grep -l -E "(jwt[_-]?secret|jwt[_-]?key)" 2>/dev/null | grep -v test | grep -v example; then
    echo -e "${RED}‚ùå CRITICAL: JWT secrets detected${NC}"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No JWT secrets detected${NC}"
fi

# =============================================================================
# 2. FILE SECURITY CHECKS
# =============================================================================
echo -e "\n${PURPLE}üìÅ FILE SECURITY CHECKS${NC}"

# Check for sensitive file types
echo "2.1 Checking for sensitive file types..."
SENSITIVE_FILES=$(git diff --cached --name-only | grep -E '\.(key|pem|p12|pfx|jks)$' || true)
if [ -n "$SENSITIVE_FILES" ]; then
    echo -e "${RED}‚ùå Sensitive files detected:${NC}"
    echo "$SENSITIVE_FILES"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No sensitive files${NC}"
fi

# Check file permissions
echo "2.2 Checking file permissions..."
EXECUTABLE_CONFIGS=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | grep -E '^-rwx.*\.(json|yaml|yml|conf)$' || true)
if [ -n "$EXECUTABLE_CONFIGS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Executable config files detected${NC}"
    echo "$EXECUTABLE_CONFIGS"
fi

# =============================================================================
# 3. CODE QUALITY CHECKS
# =============================================================================
echo -e "\n${PURPLE}üßπ CODE QUALITY CHECKS${NC}"

# Check for TODO and FIXME comments
echo "3.1 Checking for TODO/FIXME comments..."
TODO_COUNT=$(git diff --cached | grep -c -E "(TODO|FIXME|XXX|HACK)" || echo "0")
if [ "$TODO_COUNT" -gt 5 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: $TODO_COUNT TODO/FIXME comments found${NC}"
fi

# Check for debug statements
echo "3.2 Checking for debug statements..."
DEBUG_STATEMENTS=$(git diff --cached --name-only | xargs grep -l -E "(console\.log|print\(|debugger|pdb\.set_trace)" 2>/dev/null | grep -v test || true)
if [ -n "$DEBUG_STATEMENTS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Debug statements found${NC}"
    echo "$DEBUG_STATEMENTS"
fi

# Check for large files
echo "3.3 Checking for large files..."
LARGE_FILES=$(git diff --cached --name-only | xargs ls -la 2>/dev/null | awk '$5 > 1048576 {print $9 " (" $5 " bytes)"}' || true)
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Large files detected (>1MB):${NC}"
    echo "$LARGE_FILES"
fi

# =============================================================================
# 4. DEPENDENCY SECURITY
# =============================================================================
echo -e "\n${PURPLE}üì¶ DEPENDENCY SECURITY${NC}"

# Check for known vulnerable dependencies (if tools are available)
echo "4.1 Checking dependencies..."
if command -v npm &> /dev/null && [ -f "package.json" ]; then
    if npm audit --audit-level=high &>/dev/null; then
        echo -e "${GREEN}‚úÖ NPM dependencies secure${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  NPM security vulnerabilities found${NC}"
    fi
fi

if command -v pip &> /dev/null && [ -f "requirements.txt" ]; then
    if command -v safety &> /dev/null; then
        if safety check --short-report &>/dev/null; then
            echo -e "${GREEN}‚úÖ Python dependencies secure${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Python security vulnerabilities found${NC}"
        fi
    fi
fi

# =============================================================================
# 5. COMMIT MESSAGE SECURITY
# =============================================================================
echo -e "\n${PURPLE}üìù COMMIT MESSAGE SECURITY${NC}"

# Check if commit message contains sensitive information
echo "5.1 Checking commit message..."
COMMIT_MSG_FILE=$(git rev-parse --git-dir)/COMMIT_EDITMSG
if [ -f "$COMMIT_MSG_FILE" ]; then
    if grep -q -E "(password|secret|key|token)" "$COMMIT_MSG_FILE"; then
        echo -e "${RED}‚ùå Commit message contains sensitive keywords${NC}"
        SECURITY_PASSED=false
        ((TOTAL_ISSUES++))
    else
        echo -e "${GREEN}‚úÖ Commit message is secure${NC}"
    fi
fi

# =============================================================================
# 6. ENVIRONMENT VALIDATION
# =============================================================================
echo -e "\n${PURPLE}üåç ENVIRONMENT VALIDATION${NC}"

# Check for .env files in staging
echo "6.1 Checking environment files..."
ENV_FILES=$(git diff --cached --name-only | grep -E '\.env$|\.env\.' | grep -v example | grep -v template || true)
if [ -n "$ENV_FILES" ]; then
    echo -e "${RED}‚ùå Environment files detected in commit:${NC}"
    echo "$ENV_FILES"
    SECURITY_PASSED=false
    ((TOTAL_ISSUES++))
else
    echo -e "${GREEN}‚úÖ No environment files in commit${NC}"
fi

# =============================================================================
# 7. FINAL CLEANUP
# =============================================================================
echo -e "\n${PURPLE}üßΩ CLEANUP${NC}"

# Auto-cleanup temporary files
echo "7.1 Cleaning temporary files..."
CLEANUP_SCRIPT=".claude/scripts/cleanup.sh"
if [ -f "$CLEANUP_SCRIPT" ]; then
    bash "$CLEANUP_SCRIPT" --silent
    echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
fi

# =============================================================================
# FINAL VERDICT
# =============================================================================
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

if [ "$SECURITY_PASSED" = true ]; then
    echo -e "${GREEN}üéâ SECURITY CHECKS PASSED${NC}"
    
    if [ "$TOTAL_ISSUES" -eq 0 ]; then
        echo -e "${GREEN}‚úÖ No security issues detected. Commit approved!${NC}"
        exit 0
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $TOTAL_ISSUES non-critical issues detected. Review recommended.${NC}"
        exit 0
    fi
else
    echo -e "${RED}üö® SECURITY CHECKS FAILED${NC}"
    echo -e "${RED}‚ùå $TOTAL_ISSUES critical security issues detected!${NC}"
    echo ""
    echo -e "${YELLOW}üîß REMEDIATION STEPS:${NC}"
    echo "1. Remove all hardcoded secrets and credentials"
    echo "2. Use environment variables for sensitive data"
    echo "3. Add sensitive files to .gitignore"
    echo "4. Use external secret management systems"
    echo "5. Review and fix all security issues above"
    echo ""
    echo -e "${BLUE}üí° TIPS:${NC}"
    echo "- Use 'git stash' to temporarily store changes"
    echo "- Create .env.example with placeholder values"
    echo "- Consider using tools like git-secrets or pre-commit"
    echo ""
    exit 1
fi
