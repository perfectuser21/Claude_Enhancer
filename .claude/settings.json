{
  "version": "8.8.0",
  "project": "Claude Enhancer",
  "description": "ÂõõÂ±ÇÊû∂ÊûÑÂàÜÂ±ÇÁ≥ªÁªü + Ëá™ÊÑàÁ≥ªÁªü + Â∑•‰ΩúÊµÅÂº∫Âà∂ÊâßË°å + Dual-Language Checklist System + Workflow Interference Fix + Performance Optimization (62% faster)",
  "permissions": {
    "defaultMode": "bypassPermissions",
    "allow": [
      "Bash",
      "Bash(cd:*)",
      "Bash(test:*)",
      "Bash(bash:*)",
      "Bash(export:*)",
      "Bash(timeout:*)",
      "Bash(cat:*)",
      "Bash(wc:*)",
      "Bash(ls:*)",
      "Bash(git:*)",
      "Bash(python3:*)",
      "Bash(jq:*)",
      "Bash(grep:*)",
      "Bash(shellcheck:*)",
      "Read(/home/xx/**)",
      "Write(/home/xx/**)",
      "Edit(/home/xx/**)",
      "Read",
      "Write",
      "Edit",
      "Glob",
      "Grep",
      "Task",
      "TodoWrite",
      "WebSearch",
      "WebFetch",
      "NotebookEdit",
      "KillShell",
      "BashOutput",
      "SlashCommand"
    ]
  },
  "hooks": {
    "PreBash": [
      ".claude/hooks/pr_creation_guard.sh"
    ],
    "UserPromptSubmit": [
      ".claude/hooks/requirement_clarification.sh",
      ".claude/hooks/workflow_auto_start.sh"
    ],
    "PrePrompt": [
      ".claude/hooks/force_branch_check.sh",
      ".claude/hooks/phase_state_tracker.sh",
      ".claude/hooks/ai_behavior_monitor.sh",
      ".claude/hooks/workflow_enforcer.sh",
      ".claude/hooks/phase2_5_autonomous.sh",
      ".claude/hooks/smart_agent_selector.sh",
      ".claude/hooks/gap_scan.sh",
      ".claude/hooks/impact_assessment_enforcer.sh",
      ".claude/hooks/parallel_subagent_suggester.sh",
      ".claude/hooks/per_phase_impact_assessor.sh"
    ],
    "PreToolUse": [
      ".claude/hooks/task_branch_enforcer.sh",
      ".claude/hooks/branch_helper.sh",
      ".claude/hooks/phase1_completion_enforcer.sh",
      ".claude/hooks/code_writing_check.sh",
      ".claude/hooks/agent_usage_enforcer.sh",
      ".claude/hooks/quality_gate.sh",
      ".claude/hooks/auto_cleanup_check.sh",
      ".claude/hooks/concurrent_optimizer.sh",
      ".claude/hooks/subagent_auto_scheduler.sh"
    ],
    "PostToolUse": [
      {
        "name": "checklist_generator",
        "path": ".claude/hooks/checklist_generator.sh",
        "trigger": "phase1.3_complete",
        "description": "Generate dual-language checklists after Phase 1.3",
        "optional": true
      },
      {
        "name": "validate_checklist_mapping",
        "path": ".claude/hooks/validate_checklist_mapping.sh",
        "trigger": "pre_phase2",
        "description": "Validate checklist mapping before Phase 2",
        "optional": false
      },
      {
        "name": "acceptance_report_generator",
        "path": ".claude/hooks/acceptance_report_generator.sh",
        "trigger": "phase6_start",
        "description": "Generate acceptance report in Phase 6",
        "optional": true
      },
      ".claude/hooks/merge_confirmer.sh",
      ".claude/hooks/unified_post_processor.sh",
      ".claude/hooks/agent_error_recovery.sh",
      ".claude/hooks/phase_completion_validator.sh",
      ".claude/hooks/telemetry_logger.sh"
    ]
  },
  "skills": [
    {
      "name": "checklist-validator",
      "description": "Validates checklist items have evidence before marking complete",
      "trigger": {
        "event": "before_tool_use",
        "tool": [
          "Write",
          "Edit"
        ],
        "pattern": "CHECKLIST.*\\.md$"
      },
      "action": {
        "script": "scripts/evidence/validate_checklist.sh",
        "args": [
          "{{file_path}}"
        ]
      },
      "enabled": true
    },
    {
      "name": "learning-capturer",
      "description": "Captures errors and lessons learned during phase transitions",
      "trigger": {
        "event": "on_error",
        "context": "phase_transition"
      },
      "action": {
        "script": "scripts/learning/capture.sh",
        "args": [
          "error",
          "{{error_message}}",
          "{{context}}"
        ]
      },
      "enabled": true
    },
    {
      "name": "evidence-collector",
      "description": "Reminds AI to collect evidence after completing tasks",
      "trigger": {
        "event": "after_tool_use",
        "tool": [
          "Bash",
          "Edit",
          "Write"
        ],
        "pattern": "(test|check|validate|fix|implement)"
      },
      "action": {
        "type": "reminder",
        "message": "Consider collecting evidence for this change using scripts/evidence/collect.sh"
      },
      "enabled": true,
      "priority": "P1"
    },
    {
      "name": "kpi-reporter",
      "description": "Generates KPI report at phase transitions",
      "trigger": {
        "event": "phase_transition",
        "phases": [
          "Phase4",
          "Phase5",
          "Phase7"
        ]
      },
      "action": {
        "script": "scripts/kpi/weekly_report.sh",
        "args": [
          "--auto"
        ],
        "async": true
      },
      "enabled": true,
      "priority": "P1"
    },
    {
      "name": "parallel-performance-tracker",
      "description": "Tracks parallel execution performance metrics (v8.3.0)",
      "trigger": {
        "event": "after_parallel_execution",
        "context": "any_phase",
        "min_groups": 2
      },
      "action": {
        "script": "scripts/parallel/track_performance.sh",
        "args": [
          "{{phase}}",
          "{{exec_time_sec}}",
          "{{group_count}}"
        ],
        "async": true
      },
      "enabled": true,
      "priority": "P1"
    },
    {
      "name": "parallel-conflict-validator",
      "description": "Validates parallel groups for conflicts before execution (v8.3.0)",
      "trigger": {
        "event": "before_parallel_execution",
        "context": "any_phase"
      },
      "action": {
        "script": "scripts/parallel/validate_conflicts.sh",
        "args": [
          "{{phase}}",
          "{{groups}}"
        ],
        "blocking": true
      },
      "enabled": true,
      "priority": "P0"
    },
    {
      "name": "parallel-load-balancer",
      "description": "Dynamic load balancing for parallel execution (v8.4.0 placeholder)",
      "trigger": {
        "event": "before_parallel_execution",
        "context": "high_load"
      },
      "action": {
        "script": "scripts/parallel/rebalance_load.sh",
        "args": [
          "{{phase}}"
        ]
      },
      "enabled": false,
      "priority": "P1",
      "note": "Placeholder for v8.4.0"
    },
    {
      "name": "workflow-guardian-enforcer",
      "description": "Enforces Phase 1 documents before Phase 2 coding",
      "trigger": {
        "event": "before_tool_use",
        "tool": [
          "Write",
          "Edit"
        ],
        "context": "code_file"
      },
      "action": {
        "script": "scripts/workflow_guardian.sh",
        "args": [],
        "blocking": true
      },
      "enabled": true,
      "priority": "P0"
    },
    {
      "name": "phase-transition-validator",
      "description": "Validates phase transition requirements",
      "trigger": {
        "event": "phase_transition",
        "context": "any_phase"
      },
      "action": {
        "script": ".claude/hooks/phase_completion_validator.sh",
        "args": [
          "{{current_phase}}",
          "{{next_phase}}"
        ],
        "blocking": true
      },
      "enabled": true,
      "priority": "P0"
    },
    {
      "name": "phase1-completion-reminder",
      "description": "Reminds AI to confirm Phase 1 completion before Phase 2 coding",
      "trigger": {
        "event": "before_tool_use",
        "tool": [
          "Write",
          "Edit",
          "Bash"
        ],
        "context": "phase1_complete_but_unconfirmed"
      },
      "action": {
        "type": "reminder",
        "message": "‚ö†Ô∏è Phase 1 Completion Detected\\n\\nüìã Required Actions:\\n1. Display 7-Phase checklist to user\\n2. Summarize what we'll implement (in plain language)\\n3. Wait for user to say 'I understand, start Phase 2'\\n4. Then create .phase/phase1_confirmed marker\\n5. Update .phase/current to Phase2\\n\\n‚ùå Do NOT start coding until user confirms!"
      },
      "enabled": true,
      "priority": "P0"
    }
  ],
  "parallel_execution": {
    "enabled": true,
    "max_concurrent_phases": 1,
    "Phase2": {
      "enabled": true,
      "max_concurrent": 4,
      "timeout": 600,
      "groups": [
        "core_implementation",
        "test_implementation",
        "scripts_hooks",
        "configuration"
      ]
    },
    "Phase3": {
      "enabled": true,
      "max_concurrent": 5,
      "timeout": 900,
      "groups": [
        "unit_tests",
        "integration_tests",
        "performance_tests",
        "security_tests",
        "linting"
      ]
    },
    "Phase4": {
      "enabled": true,
      "max_concurrent": 3,
      "timeout": 300,
      "groups": [
        "code_review",
        "documentation_check",
        "version_audit"
      ]
    },
    "Phase7": {
      "enabled": true,
      "max_concurrent": 3,
      "timeout": 180,
      "groups": [
        "cleanup_temp",
        "cleanup_versions",
        "git_optimization"
      ]
    }
  },
  "cache_system": {
    "enabled": true,
    "strategy": "intelligent",
    "ttl_hours": 24,
    "layers": {
      "L1_syntax": {
        "enabled": true,
        "commands": [
          "bash -n",
          "shellcheck"
        ],
        "hit_rate_target": 0.99
      },
      "L2_unit_tests": {
        "enabled": true,
        "by_module": true,
        "hit_rate_target": 0.7
      },
      "L3_linting": {
        "enabled": true,
        "tools": [
          "shellcheck",
          "shfmt"
        ],
        "hit_rate_target": 0.8
      }
    },
    "invalidation": {
      "on_file_change": true,
      "on_dependency_change": true,
      "on_test_change": true
    }
  },
  "incremental_checks": {
    "enabled": true,
    "scope": "git_diff",
    "fallback_to_full": true,
    "force_full_on": [
      "VERSION",
      "settings.json",
      "SPEC.yaml",
      "manifest.yml",
      "package.json",
      "CHANGELOG.md"
    ]
  },
  "async_tasks": {
    "enabled": true,
    "max_concurrent": 3,
    "timeout": 60,
    "tasks": [
      "kpi_reporter",
      "evidence_indexer",
      "changelog_generator",
      "performance_tracker"
    ]
  }
}
