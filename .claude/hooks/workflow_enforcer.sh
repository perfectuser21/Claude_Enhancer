#!/bin/bash
# Auto-mode detection
if [[ "$CE_AUTO_MODE" == "true" ]]; then
    export CE_SILENT_MODE=true
fi
# Claude Enhancer Â∑•‰ΩúÊµÅÂº∫Âà∂ÊâßË°åÂô®
# Á°Æ‰øùÊâÄÊúâÁºñÁ®ã‰ªªÂä°ÊåâÁÖß8-PhaseÂ∑•‰ΩúÊµÅÊâßË°å

# Áªü‰∏ÄÊó•ÂøóËÆ∞ÂΩïÔºàÊøÄÊ¥ªËøΩË∏™Ôºâ
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
LOG_FILE="$PROJECT_ROOT/.workflow/logs/claude_hooks.log"
mkdir -p "$(dirname "$LOG_FILE")"
echo "$(date +'%F %T') [workflow_enforcer.sh] triggered by ${USER:-claude} args: $*" >> "$LOG_FILE"

set -euo pipefail

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# Ëé∑ÂèñÂΩìÂâçPhase
get_current_phase() {
    if [[ -f "$PROJECT_ROOT/.phase/current" ]]; then
        cat "$PROJECT_ROOT/.phase/current"
    else
        echo "P0"
    fi
}

# Ê£ÄÊü•ÊòØÂê¶ÊòØÁºñÁ®ã‰ªªÂä°
is_programming_task() {
    local prompt="$1"

    # ÁºñÁ®ã‰ªªÂä°ÂÖ≥ÈîÆËØç
    local programming_keywords=(
        "ÂÆûÁé∞" "ÂºÄÂèë" "ÁºñÂÜô" "ÂàõÂª∫" "‰øÆÂ§ç" "‰ºòÂåñ" "ÈáçÊûÑ"
        "implement" "develop" "write" "create" "fix" "optimize" "refactor"
        "‰ª£Á†Å" "ÂäüËÉΩ" "ÁªÑ‰ª∂" "Ê®°Âùó" "Á≥ªÁªü" "Êû∂ÊûÑ"
        "code" "feature" "component" "module" "system" "architecture"
    )

    for keyword in "${programming_keywords[@]}"; do
        if [[ "$prompt" == *"$keyword"* ]]; then
            return 0
        fi
    done

    return 1
}

# Âº∫Âà∂ÊâßË°åÂ∑•‰ΩúÊµÅ
enforce_workflow() {
    local current_phase=$(get_current_phase)

    # Ê†πÊçÆÈùôÈªòÊ®°ÂºèÂÜ≥ÂÆöÊòØÂê¶ËæìÂá∫
    if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
        echo -e "${RED}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
        echo -e "${RED}‚ïë            üõë Â∑•‰ΩúÊµÅÂº∫Âà∂ÊâßË°å - ÈòªÂ°ûÊ®°Âºè                   ‚ïë${NC}"
        echo -e "${RED}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
        echo

        echo -e "${YELLOW}‚ö†Ô∏è  Ê£ÄÊµãÂà∞ÁºñÁ®ã‰ªªÂä°Ôºå‰ΩÜÊú™ÊåâÂ∑•‰ΩúÊµÅÊâßË°åÔºÅ${NC}"
        echo
        echo -e "${BLUE}üìç ÂΩìÂâçPhase: ${current_phase}${NC}"
        echo
    elif [[ "${CE_COMPACT_OUTPUT:-false}" == "true" ]]; then
        # Á¥ßÂáëÊ®°ÂºèËæìÂá∫
        echo "[Workflow] ‚ö†Ô∏è Êú™ÊåâÂ∑•‰ΩúÊµÅÊâßË°å (Phase: ${current_phase})"
    fi

    case "$current_phase" in
        "P0"|"")
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${RED}‚ùå ÈîôËØØÔºöÂøÖÈ°ªÂÖàÂàõÂª∫ÂàÜÊîØÔºàPhase 0Ôºâ${NC}"
                echo -e "${GREEN}‚úÖ ËØ∑ÊâßË°åÔºögit checkout -b feature/your-feature${NC}"
                echo
                echo -e "${YELLOW}Â∑•‰ΩúÊµÅË¶ÅÊ±ÇÔºö${NC}"
                echo "  1. Phase 0: ÂàõÂª∫featureÂàÜÊîØ"
                echo "  2. Phase 1: ÂàõÂª∫ËÆ°ÂàíÊñáÊ°£ (docs/PLAN.md)"
                echo "  3. Phase 2: ËÆæËÆ°Êû∂ÊûÑÈ™®Êû∂"
                echo "  4. Phase 3: ÂÆûÁé∞ÂäüËÉΩÔºà4-6-8 AgentÁ≠ñÁï•Ôºâ"
                echo "  5. Phase 4: Êú¨Âú∞ÊµãËØï"
                echo "  6. Phase 5: ‰ª£Á†ÅÊèê‰∫§"
                echo "  7. Phase 6: ‰ª£Á†ÅÂÆ°Êü•"
                echo
                echo -e "${RED}üö´ Êìç‰ΩúÂ∑≤ÈòªÂ°ûÔºÅËØ∑ÊåâÂ∑•‰ΩúÊµÅÊâßË°å„ÄÇ${NC}"
            elif [[ "${CE_COMPACT_OUTPUT:-false}" == "true" ]]; then
                echo "[Workflow] ‚ùå ÈúÄË¶ÅÂàõÂª∫ÂàÜÊîØ (Phase 0)"
            fi
            exit 1
            ;;

        "P1")
            if [[ ! -f "$PROJECT_ROOT/docs/PLAN.md" ]]; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${RED}‚ùå ÈîôËØØÔºöPhase 1ÈúÄË¶ÅÂàõÂª∫ËÆ°ÂàíÊñáÊ°£${NC}"
                    echo -e "${GREEN}‚úÖ ËØ∑ÂÖàÂàõÂª∫Ôºödocs/PLAN.md${NC}"
                    echo
                    echo "ËÆ°ÂàíÊñáÊ°£ÂøÖÈ°ªÂåÖÂê´Ôºö"
                    echo "  - ## ‰ªªÂä°Ê∏ÖÂçïÔºàËá≥Â∞ë5È°πÔºâ"
                    echo "  - ## ÂèóÂΩ±ÂìçÊñá‰ª∂Ê∏ÖÂçï"
                    echo "  - ## ÂõûÊªöÊñπÊ°à"
                    echo
                    echo -e "${RED}üö´ Êìç‰ΩúÂ∑≤ÈòªÂ°ûÔºÅ${NC}"
                elif [[ "${CE_COMPACT_OUTPUT:-false}" == "true" ]]; then
                    echo "[Workflow] ‚ùå ÈúÄË¶ÅËÆ°ÂàíÊñáÊ°£ docs/PLAN.md"
                fi
                exit 1
            fi
            ;;

        "P2")
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${YELLOW}üìê Phase 2: ËØ∑ÂÖàÂÆåÊàêÊû∂ÊûÑËÆæËÆ°${NC}"
                echo "  - ÂàõÂª∫ÂøÖË¶ÅÁöÑÁõÆÂΩïÁªìÊûÑ"
                echo "  - ÂÆö‰πâÊé•Âè£ÂíåÊï∞ÊçÆÁªìÊûÑ"
                echo "  - ËÆ∞ÂΩïËÆæËÆ°ÂÜ≥Á≠ñ"
            elif [[ "${CE_COMPACT_OUTPUT:-false}" == "true" ]]; then
                echo "[Workflow] üìê Phase 2: Êû∂ÊûÑËÆæËÆ°"
            fi
            ;;

        "P3")
            # P3 Implementation Phase Validation
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${BLUE}üîç Validating P3 (Implementation) phase...${NC}"
            fi

            # Check 1: Agent count (minimum 3 for implementation)
            AGENT_COUNT=0
            if [[ -f ".gates/agents_invocation.json" ]]; then
                AGENT_COUNT=$(jq '.agents | length' .gates/agents_invocation.json 2>/dev/null || echo "0")
            fi

            if [ "$AGENT_COUNT" -lt 3 ]; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${RED}‚ùå P3 requires ‚â•3 agents for implementation (found: $AGENT_COUNT)${NC}"
                    echo -e "${YELLOW}üí° Use: backend-architect, test-engineer, devops-engineer${NC}"
                fi
                exit 1
            fi

            # Check 2: Code changes present
            if ! git diff --cached --name-only | grep -qE '\.(py|sh|js|ts|yml)$'; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${YELLOW}‚ö†Ô∏è P3 should have code changes${NC}"
                fi
            fi

            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${GREEN}‚úÖ P3 validation passed${NC}"
            fi
            ;;

        "P4")
            # P4 Testing Phase Validation
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${BLUE}üß™ Validating P4 (Testing) phase...${NC}"
            fi

            # Check 1: Test files exist
            TEST_FILES=$(git diff --cached --name-only | grep -E 'test_|_test\.|\.test\.' | wc -l)
            if [ "$TEST_FILES" -eq 0 ]; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${RED}‚ùå P4 requires test files${NC}"
                    echo -e "${YELLOW}üí° Add tests in test/ directory${NC}"
                fi
                exit 1
            fi

            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${GREEN}‚úÖ P4 validation passed ($TEST_FILES test files)${NC}"
            fi
            ;;

        "P5")
            # P5 Review Phase Validation
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${BLUE}üëÄ Validating P5 (Review) phase...${NC}"
            fi

            # Check 1: REVIEW.md exists
            if [[ ! -f "docs/REVIEW.md" ]] && ! git diff --cached --name-only | grep -q "docs/REVIEW.md"; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${RED}‚ùå P5 requires REVIEW.md${NC}"
                    echo -e "${YELLOW}üí° Generate code review report: docs/REVIEW.md${NC}"
                fi
                exit 1
            fi

            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${GREEN}‚úÖ P5 validation passed${NC}"
            fi
            ;;

        "P6")
            # P6 Release Phase Validation
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${BLUE}üöÄ Validating P6 (Release) phase...${NC}"
            fi

            # Check 1: CHANGELOG.md updated
            if ! git diff --cached --name-only | grep -q "CHANGELOG.md"; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${RED}‚ùå P6 requires CHANGELOG.md update${NC}"
                    echo -e "${YELLOW}üí° Add release notes to CHANGELOG.md${NC}"
                fi
                exit 1
            fi

            # Check 2: Documentation updated
            DOC_FILES=$(git diff --cached --name-only | grep -E '\.md$|docs/' | wc -l)
            if [ "$DOC_FILES" -eq 0 ]; then
                if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                    echo -e "${YELLOW}‚ö†Ô∏è No documentation updates in release${NC}"
                fi
            fi

            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${GREEN}‚úÖ P6 validation passed${NC}"
            fi
            ;;

        "P7")
            # P7 Monitoring Phase - usually no commit restrictions
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${GREEN}‚úÖ P7 Monitoring phase - no commit restrictions${NC}"
            fi
            ;;

        *)
            if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
                echo -e "${BLUE}‚ÑπÔ∏è  ÂΩìÂâçÂú®Phase ${current_phase}${NC}"
            elif [[ "${CE_COMPACT_OUTPUT:-false}" == "true" ]]; then
                echo "[Workflow] Phase: ${current_phase}"
            fi
            ;;
    esac

    # ÊòæÁ§∫Ê≠£Á°ÆÁöÑÊâßË°åÂëΩ‰ª§
    if [[ "${CE_SILENT_MODE:-false}" != "true" ]]; then
        echo
        echo -e "${MAGENTA}üìã Êé®ËçêÊâßË°åÊ≠•È™§Ôºö${NC}"
        echo "  1. Êü•ÁúãÂΩìÂâçÁä∂ÊÄÅÔºö"
        echo "     ${GREEN}./.workflow/executor.sh status${NC}"
        echo
        echo "  2. È™åËØÅÂΩìÂâçPhaseÔºö"
        echo "     ${GREEN}./.workflow/executor.sh validate${NC}"
        echo
        echo "  3. ËøõÂÖ•‰∏ã‰∏ÄPhaseÔºö"
        echo "     ${GREEN}./.workflow/executor.sh next${NC}"
        echo
    elif [[ "${CE_COMPACT_OUTPUT:-false}" == "true" ]]; then
        echo "[Workflow] ‰ΩøÁî® ./.workflow/executor.sh ÁÆ°ÁêÜÊµÅÁ®ã"
    fi

    # ËøîÂõûÈòªÂ°û‰ø°Âè∑
    return 1
}

# ‰∏ªÂáΩÊï∞
main() {
    local user_prompt="${1:-}"

    # Ê£ÄÊü•ÊòØÂê¶ÊòØÁºñÁ®ã‰ªªÂä°
    if is_programming_task "$user_prompt"; then
        # Ê£ÄÊü•ÊòØÂê¶Â∑≤Âú®Ê≠£Á°ÆÁöÑPhase
        local current_phase=$(get_current_phase)

        # Enforce workflow for all phases (no bypass)
        # All phases now have proper validation in enforce_workflow()
        enforce_workflow
    fi

    # Â¶ÇÊûú‰∏ÄÂàáÊ≠£Â∏∏ÔºåËøîÂõûÊàêÂäü
    return 0
}

# ÊâßË°å‰∏ªÂáΩÊï∞
main "$@"
