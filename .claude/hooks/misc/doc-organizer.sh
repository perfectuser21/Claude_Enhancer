#!/bin/bash
# Document Organizer - Ëá™Âä®Êï¥ÁêÜÈ°πÁõÆÊñáÊ°£

PROJECT_ROOT="${CLAUDE_ENHANCER_HOME:-$(pwd)}"
DOCS_DIR="$PROJECT_ROOT/docs"
DATE=$(date +%Y-%m-%d)

# ÂàõÂª∫ÊñáÊ°£ÁõÆÂΩïÁªìÊûÑ
setup_docs_structure() {
    mkdir -p "$DOCS_DIR"/{architecture,api,guides,testing,decisions,archive}

    # ÂàõÂª∫.gitignoreÈò≤Ê≠¢‰∏¥Êó∂Êñá‰ª∂Êèê‰∫§
    cat > "$DOCS_DIR/.gitignore" << EOF
*.tmp
*.log
.DS_Store
archive/*.old
EOF
}

# ÁßªÂä®Âπ∂ÁªÑÁªáÁé∞ÊúâÊñáÊ°£
organize_existing_docs() {
    echo "üìÅ Organizing documents..."

    # Êû∂ÊûÑÊñáÊ°£
    if [ -f "$PROJECT_ROOT/ARCHITECTURE_ANALYSIS.md" ]; then
        mv "$PROJECT_ROOT/ARCHITECTURE_ANALYSIS.md" "$DOCS_DIR/architecture/$DATE-architecture-analysis.md" 2>/dev/null
        echo "  ‚úì Moved architecture analysis"
    fi

    # ÊµãËØïÊä•Âëä
    for report in "$PROJECT_ROOT"/*TEST*.md "$PROJECT_ROOT"/*test*.json; do
        if [ -f "$report" ]; then
            filename=$(basename "$report")
            mv "$report" "$DOCS_DIR/testing/$DATE-$filename" 2>/dev/null
            echo "  ‚úì Moved test report: $filename"
        fi
    done

    # Á≥ªÁªüÁä∂ÊÄÅÊä•Âëä
    if [ -f "$PROJECT_ROOT/CLAUDE_ENHANCER_SYSTEM_STATUS.md" ]; then
        mv "$PROJECT_ROOT/CLAUDE_ENHANCER_SYSTEM_STATUS.md" "$DOCS_DIR/architecture/system-status.md" 2>/dev/null
        echo "  ‚úì Moved system status"
    fi
}

# Ê∏ÖÁêÜÊóßÊñá‰ª∂
cleanup_old_files() {
    echo "üóëÔ∏è Cleaning up old files..."

    # ÁßªÂä®30Â§©ÂâçÁöÑÊñáÊ°£Âà∞archive
    find "$DOCS_DIR" -name "*.md" -mtime +30 -exec mv {} "$DOCS_DIR/archive/" \; 2>/dev/null

    # Âà†Èô§‰∏¥Êó∂Êñá‰ª∂
    find "$PROJECT_ROOT" -name "*.tmp" -o -name "*.backup.*" -mtime +7 -delete 2>/dev/null

    echo "  ‚úì Cleaned old files"
}

# ÁîüÊàêÊñáÊ°£Á¥¢Âºï
generate_index() {
    echo "üìù Generating documentation index..."

    cat > "$DOCS_DIR/INDEX.md" << EOF
# Documentation Index
Generated: $(date)

## Recent Documents

### Architecture
$(ls -t "$DOCS_DIR/architecture/" 2>/dev/null | head -5 | sed 's/^/- /')

### Testing Reports
$(ls -t "$DOCS_DIR/testing/" 2>/dev/null | head -5 | sed 's/^/- /')

### API Documentation
$(ls -t "$DOCS_DIR/api/" 2>/dev/null | head -5 | sed 's/^/- /')

### Guides
$(ls -t "$DOCS_DIR/guides/" 2>/dev/null | head -5 | sed 's/^/- /')

## Statistics
- Total documents: $(find "$DOCS_DIR" -name "*.md" | wc -l)
- Architecture docs: $(find "$DOCS_DIR/architecture" -name "*.md" | wc -l)
- Test reports: $(find "$DOCS_DIR/testing" -name "*.md" -o -name "*.json" | wc -l)
- Archived: $(find "$DOCS_DIR/archive" -name "*" | wc -l)
EOF

    echo "  ‚úì Index generated"
}

# ÊòæÁ§∫ÊñáÊ°£ÁªüËÆ°
show_stats() {
    echo ""
    echo "üìä Documentation Statistics:"
    echo "  ‚Ä¢ Total docs: $(find "$DOCS_DIR" -name "*.md" 2>/dev/null | wc -l)"
    echo "  ‚Ä¢ Root directory: $(ls "$PROJECT_ROOT"/*.md 2>/dev/null | wc -l) markdown files"
    echo "  ‚Ä¢ Organized docs: $(find "$DOCS_DIR" -type f 2>/dev/null | wc -l) files"
    echo ""
}

# ‰∏ªÈÄªËæë
main() {
    echo "üóÇÔ∏è Document Organization Tool"
    echo ""

    case "${1:-help}" in
        organize)
            setup_docs_structure
            organize_existing_docs
            generate_index
            show_stats
            ;;
        clean)
            cleanup_old_files
            show_stats
            ;;
        index)
            generate_index
            ;;
        stats)
            show_stats
            ;;
        *)
            echo "Usage:"
            echo "  organize - Organize all documents"
            echo "  clean    - Clean old files"
            echo "  index    - Generate index"
            echo "  stats    - Show statistics"
            ;;
    esac
}

main "$@"