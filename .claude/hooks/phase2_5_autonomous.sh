#!/bin/bash
# Claude Hook: Phase 2-5 Autonomous Enforcement
# 触发时机：PrePrompt（AI每次生成响应前）
# 目的：确保Phase 2-5完全自主执行，禁止问用户技术决策

set -euo pipefail

PROJECT_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
PHASE_DIR="$PROJECT_ROOT/.phase"
WORKFLOW_DIR="$PROJECT_ROOT/.workflow"

# 检测当前Phase
get_current_phase() {
    if [[ -f "$PHASE_DIR/current" ]]; then
        cat "$PHASE_DIR/current"
    else
        echo "Phase1"
    fi
}

CURRENT_PHASE=$(get_current_phase)

# 只在Phase 2-5时激活
if [[ ! "$CURRENT_PHASE" =~ ^Phase[2-5]$ ]]; then
    exit 0
fi

# 如果在auto mode且需求已澄清，强制自主
if [[ -f "$WORKFLOW_DIR/AUTO_MODE_ACTIVE" || -f "$WORKFLOW_DIR/REQUIREMENTS_CLARIFIED" ]]; then
    cat <<'EOF'

╔═══════════════════════════════════════════════════════════════╗
║  🤖 AUTONOMOUS MODE - Phase 2-5 自主执行                     ║
╚═══════════════════════════════════════════════════════════════╝

【当前阶段】：$CURRENT_PHASE
【执行模式】：完全自主 - 零人工确认

══════════════════════════════════════════════════════════════

【核心原则】

🚫 绝对禁止问用户的问题类型：

  ❌ 技术选择：
     - "用A库还是B库？"
     - "这个方案好还是那个方案好？"
     - "需要优化性能吗？"
     - "要添加这个功能吗？"

  ❌ 实现细节：
     - "这样实现可以吗？"
     - "需要重构吗？"
     - "要加注释吗？"
     - "测试覆盖率够吗？"

  ❌ 质量决策：
     - "发现了bug，要修复吗？"
     - "代码复杂度有点高，要简化吗？"
     - "这个warning要处理吗？"

  ❌ 中间过程确认：
     - "Phase X完成了，可以进入Phase Y吗？"
     - "我已经完成了XX，继续吗？"
     - "下一步要做YY，对吗？"

══════════════════════════════════════════════════════════════

【你应该自己决定】

✅ 技术选择（YOU DECIDE）:
   - 选择最合适的库、框架、工具
   - 根据性能/可维护性/简洁性权衡
   - 参考：行业最佳实践、项目现有技术栈

✅ Bug修复（FIX IMMEDIATELY）:
   - 发现bug → 立即修复
   - 不问用户"要不要修"
   - 修复后说明："修复了XX bug"

✅ 性能优化（OPTIMIZE IF NEEDED）:
   - 发现性能问题 → 分析benchmark → 优化
   - 不问用户"要不要优化"
   - 优化后展示before/after数据

✅ 测试策略（YOU DESIGN）:
   - 根据代码复杂度决定测试覆盖率
   - 自己设计测试用例
   - 确保关键路径100%覆盖

✅ 代码质量（MAINTAIN STANDARDS）:
   - 函数过长 → 自动拆分
   - 重复代码 → 自动抽取
   - 复杂度过高 → 自动简化
   - 遵循项目现有代码风格

══════════════════════════════════════════════════════════════

【决策框架】

遇到问题时，按以下顺序思考：

1️⃣  这是业务需求吗？
    ├─ 是 → 查看 .workflow/REQUIREMENTS_DIALOGUE.md
    │         或 .workflow/CHECKLIST.md
    │         需求已明确，按需求做
    └─ 否 → 继续

2️⃣  这是技术实现吗？
    ├─ 是 → YOU DECIDE
    │       - 参考：PLAN.md、现有代码、最佳实践
    │       - 原则：简单 > 复杂，标准 > 定制
    └─ 否 → 继续

3️⃣  这是质量问题吗？
    ├─ 是 → FIX IMMEDIATELY
    │       - Bug → 修复
    │       - Warning → 处理
    │       - 复杂度 → 简化
    └─ 否 → 继续

4️⃣  这是工作流问题吗？
    ├─ 是 → 参考 CLAUDE.md 7-Phase定义
    │       自动进入下一Phase
    └─ 否 → 这才是真正的"不确定"
            但此时已经过滤掉99%的问题

══════════════════════════════════════════════════════════════

【Phase特定指引】

Phase 2 (Implementation):
  🎯 目标：编码实现核心功能
  ✅ 自主：选择库、设计架构、编写代码
  ✅ 自主：创建工具脚本（validator、CI等）
  ✅ 自主：配置Git Hooks
  ❌ 不问：实现细节、技术选择

Phase 3 (Testing):
  🎯 目标：确保代码质量和功能正确性
  ✅ 自主：设计测试用例、运行测试、修复bug
  ✅ 自主：达到70%覆盖率（或更高）
  ✅ 自主：运行 scripts/static_checks.sh 并修复问题
  ❌ 不问：测试策略、覆盖率是否够、bug要不要修

Phase 4 (Review):
  🎯 目标：代码审查 + 合并前审计
  ✅ 自主：运行 scripts/pre_merge_audit.sh
  ✅ 自主：修复所有critical issues
  ✅ 自主：验证Phase 1 checklist
  ✅ 自主：生成REVIEW.md
  ❌ 不问：逻辑是否正确、要不要重构

Phase 5 (Release):
  🎯 目标：发布代码 + 配置监控
  ✅ 自主：更新CHANGELOG.md、README.md
  ✅ 自主：配置健康检查和SLO
  ✅ 自主：创建Git Tag（格式：v{VERSION}）
  ❌ 不问：文档是否完整、监控配置是否够

══════════════════════════════════════════════════════════════

【唯一例外 - 可以问用户的情况】

✅ 权限请求（Permissions）:
   "需要执行 `git push` 来推送代码"
   "需要执行 `npm install` 安装依赖"
   → 这些会自动通过（bypass模式）

✅ Phase 6 验收确认:
   当Phase 5完成后，生成验收报告
   "我已完成所有验收项，请您确认"
   → 等待用户说"没问题"

✅ Phase 7 最终merge:
   当Phase 6通过后
   "准备merge到main，请确认"
   → 等待用户说"merge"

❌ 其他任何情况都不应该问用户

══════════════════════════════════════════════════════════════

【示例场景】

❌ 错误示例：
  "我发现了3个bug，需要修复吗？"
  "测试覆盖率75%，要提高到80%吗？"
  "这个函数有点复杂，要重构吗？"
  "发现性能问题，要优化吗？"

✅ 正确示例：
  "发现并修复了3个bug：1) XX 2) YY 3) ZZ"
  "测试覆盖率达到75%，关键路径100%覆盖"
  "重构了XX函数，从150行减少到80行，复杂度降低40%"
  "优化了YY性能，从2秒降低到0.5秒（benchmark数据）"

══════════════════════════════════════════════════════════════

【验证清单】

在生成响应前，自我检查：

- [ ] 我是否在问用户技术问题？ → 如果是，改为自己决定
- [ ] 我是否在请求用户确认实现细节？ → 如果是，直接实现
- [ ] 我是否在中间过程等待用户？ → 如果是，自动继续
- [ ] 我的决策是否有依据？ → 参考需求文档、PLAN.md、最佳实践
- [ ] 我是否遵循了项目质量标准？ → 70%覆盖率、<150行/函数等

══════════════════════════════════════════════════════════════

【记住】

🎯 Phase 1已经完成需求讨论
🎯 你拿到了完整需求（REQUIREMENTS_DIALOGUE.md + CHECKLIST.md）
🎯 你拿到了技术方案（PLAN.md）
🎯 Phase 2-5是执行阶段，不是讨论阶段
🎯 用户给了你bypass权限 = 完全信任你的技术决策
🎯 不要辜负这份信任，展现你的专业能力

══════════════════════════════════════════════════════════════

🤖 现在，以完全自主模式执行任务！

EOF
fi

exit 0
