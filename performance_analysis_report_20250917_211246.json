{
  "analysis_metadata": {
    "timestamp": "2025-09-17T21:12:46.564734",
    "analysis_duration": 60.90967408102006,
    "system_info": {
      "platform": "posix",
      "cpu_count": 4,
      "cpu_freq": {
        "current": 2494.14,
        "min": 0.0,
        "max": 0.0
      },
      "memory_total_gb": 7.751277923583984,
      "disk_total_gb": 154.8827362060547,
      "python_version": "3.10.12 (main, Aug 15 2025, 14:32:43) [GCC 11.4.0]",
      "process_id": 48738
    }
  },
  "performance_score": {
    "overall_score": 100.0,
    "grade": "A",
    "status": "Excellent",
    "score_breakdown": {
      "base_score": 100.0,
      "benchmark_penalty": 0,
      "resource_penalty": 0
    },
    "improvement_potential": 0
  },
  "benchmark_results": {
    "workflow_generation": "BenchmarkResult(test_name='workflow_generation', execution_time=0.000263496246188879, memory_usage=0.0043359375, cpu_usage=0, throughput=3795.1204788062955, error_count=0, success_rate=100.0, metadata={'iterations': 100, 'min_time': 0.00018169311806559563, 'max_time': 0.0011568930931389332, 'p95_time': 0.0005722857778891921})",
    "agent_selection": "BenchmarkResult(test_name='agent_selection', execution_time=4.974361509084702e-06, memory_usage=0, cpu_usage=0, throughput=201030.825398133, error_count=0, success_rate=100.0, metadata={'iterations': 1000, 'agents_tested': 9, 'avg_selections_per_iteration': 2.5})",
    "parallel_execution": "BenchmarkResult(test_name='parallel_execution', execution_time=0.13644094672054052, memory_usage=0, cpu_usage=0, throughput=366.4589054956531, error_count=0, success_rate=100.0, metadata={'sequential_time': 0.5135804675519466, 'parallel_time': 0.13644094672054052, 'speedup': 3.764122720460643, 'efficiency': 94.10306801151607, 'workers': 4, 'tasks': 50})",
    "file_operations": "BenchmarkResult(test_name='file_operations', execution_time=4.548515658825636e-05, memory_usage=0, cpu_usage=0, throughput=21985.194182187035, error_count=0, success_rate=100.0, metadata={'file_count': 100, 'file_size': 1024, 'write_times': [0.00016297632828354836, 6.408989429473877e-05, 4.5301858335733414e-05, 4.7690700739622116e-05, 4.155933856964111e-05, 4.0951184928417206e-05, 3.813393414020538e-05, 3.918306902050972e-05, 4.9963127821683884e-05, 8.609192445874214e-05], 'read_times': [5.1972921937704086e-05, 3.3694785088300705e-05, 2.8281938284635544e-05, 2.9725953936576843e-05, 2.777017652988434e-05, 2.7542002499103546e-05, 2.7089379727840424e-05, 2.689007669687271e-05, 3.137020394206047e-05, 4.07160259783268e-05]})",
    "regex_performance": "BenchmarkResult(test_name='regex_performance', execution_time=0.0003355137351900339, memory_usage=0, cpu_usage=0, throughput=2980.5039112142554, error_count=0, success_rate=100.0, metadata={'patterns_tested': 50, 'text_size': 10000, 'total_matches': 18870, 'patterns_used': 10})"
  },
  "resource_analysis": {
    "monitoring_duration": 60,
    "samples_collected": 594,
    "cpu_analysis": {
      "avg": 0.8654882154882155,
      "max": 9.9,
      "min": 0.0,
      "p95": 9.9
    },
    "memory_analysis": {
      "avg_percent": 0.4371210653497972,
      "max_percent": 0.4395283153973693,
      "avg_rss_mb": 34.69564788510101,
      "max_rss_mb": 34.88671875,
      "memory_growth": 0.25390625
    },
    "disk_analysis": {
      "avg_usage": 28.6,
      "max_usage": 28.6
    },
    "stability_metrics": {
      "cpu_volatility": 2.796710458779877,
      "memory_volatility": 0.0013816307344690173
    }
  },
  "profiling_results": {
    "memory_profiling": {
      "total_memory_mb": 0.02301502227783203,
      "top_memory_consumers": [
        {
          "filename": "  File \"/usr/lib/python3.10/json/encoder.py\"",
          "line_number": "line 253",
          "size_mb": 0.0041961669921875,
          "count": 110
        },
        {
          "filename": "  File \"/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py\"",
          "line_number": "line 832",
          "size_mb": 0.001953125,
          "count": 4
        },
        {
          "filename": "  File \"/usr/lib/python3.10/json/encoder.py\"",
          "line_number": "line 333",
          "size_mb": 0.001678466796875,
          "count": 10
        },
        {
          "filename": "  File \"<string>\"",
          "line_number": "line 3",
          "size_mb": 0.0013275146484375,
          "count": 12
        },
        {
          "filename": "  File \"/usr/lib/python3.10/json/encoder.py\"",
          "line_number": "line 402",
          "size_mb": 0.0012664794921875,
          "count": 2
        },
        {
          "filename": "  File \"/home/xx/dev/Perfect21/performance_analysis_complete.py\"",
          "line_number": "line 677",
          "size_mb": 0.001068115234375,
          "count": 20
        },
        {
          "filename": "  File \"/usr/lib/python3.10/json/encoder.py\"",
          "line_number": "line 147",
          "size_mb": 0.0009918212890625,
          "count": 15
        },
        {
          "filename": "  File \"/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py\"",
          "line_number": "line 829",
          "size_mb": 0.000823974609375,
          "count": 4
        },
        {
          "filename": "  File \"/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py\"",
          "line_number": "line 828",
          "size_mb": 0.000823974609375,
          "count": 4
        },
        {
          "filename": "  File \"/usr/lib/python3.10/json/encoder.py\"",
          "line_number": "line 413",
          "size_mb": 0.0006866455078125,
          "count": 5
        }
      ]
    },
    "cpu_profiling": {
      "total_function_calls": 516996,
      "total_execution_time": 0.16557389900000002,
      "top_hot_spots": [
        {
          "function": "/home/xx/dev/Perfect21/performance_analysis_complete.py:734(<genexpr>)",
          "total_time": 0.07373808000000001,
          "cumulative_time": 0.07373808000000001,
          "call_count": 500050,
          "per_call_time": 1.4746141385861415e-07
        },
        {
          "function": "~:0(<built-in method builtins.sum>)",
          "total_time": 0.057374020000000005,
          "cumulative_time": 0.1311121,
          "call_count": 50,
          "per_call_time": 0.0011474804000000001
        },
        {
          "function": "~:0(<built-in method io.open>)",
          "total_time": 0.0106986,
          "cumulative_time": 0.011052676,
          "call_count": 50,
          "per_call_time": 0.00021397200000000002
        }
      ],
      "performance_bottlenecks": [
        {
          "function": "~:0(<built-in method builtins.sum>)",
          "total_time": 0.057374020000000005,
          "cumulative_time": 0.1311121,
          "call_count": 50,
          "per_call_time": 0.0011474804000000001
        }
      ]
    },
    "function_profiling": {
      "total_unique_functions": 38,
      "total_function_calls": 183,
      "total_execution_time": 0.006137814372777939,
      "most_called_functions": [
        {
          "function": "/usr/lib/python3.10/json/encoder.py:_iterencode_dict",
          "call_count": 86
        },
        {
          "function": "/usr/lib/python3.10/json/encoder.py:_iterencode",
          "call_count": 54
        },
        {
          "function": "/usr/lib/python3.10/pathlib.py:__fspath__",
          "call_count": 3
        },
        {
          "function": "/usr/lib/python3.10/pathlib.py:__str__",
          "call_count": 3
        },
        {
          "function": "/usr/lib/python3.10/logging/__init__.py:getLogger",
          "call_count": 2
        },
        {
          "function": "/usr/lib/python3.10/pathlib.py:_format_parsed_parts",
          "call_count": 2
        },
        {
          "function": "<string>:__init__",
          "call_count": 2
        },
        {
          "function": "/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py:__init__",
          "call_count": 1
        },
        {
          "function": "/usr/lib/python3.10/logging/__init__.py:_acquireLock",
          "call_count": 1
        },
        {
          "function": "/usr/lib/python3.10/logging/__init__.py:_releaseLock",
          "call_count": 1
        }
      ],
      "most_time_consuming_functions": [
        {
          "function": "/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py:load_workflow",
          "total_time": 0.0014070207253098488
        },
        {
          "function": "/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py:_save_execution_state",
          "total_time": 0.0012687928974628448
        },
        {
          "function": "/usr/lib/python3.10/json/__init__.py:dump",
          "total_time": 0.0009759189561009407
        },
        {
          "function": "/usr/lib/python3.10/json/encoder.py:_iterencode_dict",
          "total_time": 0.0008565876632928848
        },
        {
          "function": "/usr/lib/python3.10/json/encoder.py:_iterencode",
          "total_time": 0.0007670987397432327
        },
        {
          "function": "/home/xx/dev/Perfect21/features/workflow_orchestrator/orchestrator.py:__init__",
          "total_time": 0.0001910231076180935
        },
        {
          "function": "/usr/lib/python3.10/pathlib.py:__new__",
          "total_time": 6.514787673950195e-05
        },
        {
          "function": "/usr/lib/python3.10/pathlib.py:mkdir",
          "total_time": 6.276415660977364e-05
        },
        {
          "function": "/usr/lib/python3.10/pathlib.py:_from_parts",
          "total_time": 5.5443961173295975e-05
        },
        {
          "function": "/usr/lib/python3.10/logging/__init__.py:getLogger",
          "total_time": 4.97894361615181e-05
        }
      ]
    }
  },
  "bottleneck_analysis": {
    "bottlenecks": {
      "cpu_bottlenecks": [],
      "memory_bottlenecks": [],
      "io_bottlenecks": [],
      "algorithmic_bottlenecks": []
    },
    "summary": {
      "total_bottlenecks": 0,
      "critical_bottlenecks": 0,
      "severity_distribution": {
        "critical": 0,
        "high": 0,
        "medium": 0
      }
    }
  },
  "optimization_recommendations": [
    {
      "category": "caching",
      "priority": "medium",
      "component": "workflow_orchestrator",
      "issue": "Repeated workflow loading",
      "recommendation": "Implement workflow template caching",
      "expected_improvement": "60-80% faster workflow loading",
      "implementation_effort": "low"
    },
    {
      "category": "concurrency",
      "priority": "medium",
      "component": "task_execution",
      "issue": "Sequential task processing",
      "recommendation": "Increase parallelism in task execution",
      "expected_improvement": "2-4x faster task completion",
      "implementation_effort": "medium"
    },
    {
      "category": "database",
      "priority": "low",
      "component": "data_access",
      "issue": "Database query optimization",
      "recommendation": "Add database indexes and query optimization",
      "expected_improvement": "50-200% faster queries",
      "implementation_effort": "low"
    }
  ]
}