#!/usr/bin/env python3
# =============================================================================
# Claude Enhancer 5.1 专业性能测试配置
# =============================================================================

test_config:
  # 测试环境配置
  environment:
    name: "Claude Enhancer 5.1 Performance Test"
    version: "1.0.0"
    base_url: "http://localhost:8000"
    frontend_url: "http://localhost:3000"
    database_url: "postgresql://claude_user:claude_secure_password@localhost:5432/claude_enhancer"
    redis_url: "redis://localhost:6379/0"

  # API性能测试目标
  api_performance:
    target_response_time: 100  # ms
    max_response_time: 500     # ms
    target_concurrent_users: 1000
    target_throughput: 5000    # requests per second
    test_duration: 300         # seconds
    ramp_up_time: 60          # seconds

  # 数据库性能测试
  database_performance:
    max_query_time: 50        # ms
    complex_query_time: 200   # ms
    batch_operation_size: 1000
    connection_pool_size: 20

  # 前端性能测试
  frontend_performance:
    first_contentful_paint: 1500  # ms
    largest_contentful_paint: 2500 # ms
    cumulative_layout_shift: 0.1
    first_input_delay: 100         # ms
    time_to_interactive: 3000      # ms

  # 内存和CPU性能基准
  system_performance:
    max_memory_usage: 80      # percentage
    max_cpu_usage: 70         # percentage
    memory_leak_threshold: 10 # MB increase per hour

# 测试场景配置
test_scenarios:
  # 基础API测试场景
  basic_api_test:
    name: "基础API性能测试"
    users: 50
    spawn_rate: 10
    duration: 60
    endpoints:
      - path: "/health"
        method: "GET"
        weight: 10
      - path: "/api/auth/login"
        method: "POST"
        weight: 5
        body: {"email": "test@example.com", "password": "test123"}
      - path: "/api/tasks"
        method: "GET"
        weight: 20
        auth_required: true
      - path: "/api/projects"
        method: "GET"
        weight: 15
        auth_required: true

  # 高并发压力测试
  stress_test:
    name: "高并发压力测试"
    users: 1000
    spawn_rate: 50
    duration: 300
    endpoints:
      - path: "/api/tasks"
        method: "GET"
        weight: 30
        auth_required: true
      - path: "/api/tasks"
        method: "POST"
        weight: 20
        auth_required: true
        body: {"title": "Test Task", "description": "Performance test task", "priority": "medium"}
      - path: "/api/projects/{project_id}/tasks"
        method: "GET"
        weight: 25
        auth_required: true
      - path: "/api/dashboard/stats"
        method: "GET"
        weight: 15
        auth_required: true
      - path: "/api/notifications"
        method: "GET"
        weight: 10
        auth_required: true

  # 数据库重载测试
  database_load_test:
    name: "数据库性能测试"
    concurrent_connections: 50
    operations_per_connection: 100
    test_queries:
      - name: "简单查询"
        query: "SELECT * FROM tasks WHERE user_id = $1 LIMIT 20"
        params: [1]
        expected_time: 10
      - name: "复杂关联查询"
        query: |
          SELECT t.*, p.name as project_name, u.username
          FROM tasks t
          JOIN projects p ON t.project_id = p.id
          JOIN users u ON t.assigned_to = u.id
          WHERE t.status = $1 AND t.created_at >= $2
          ORDER BY t.priority DESC, t.created_at DESC
          LIMIT 50
        params: ["active", "2024-01-01"]
        expected_time: 50
      - name: "聚合统计查询"
        query: |
          SELECT
            COUNT(*) as total_tasks,
            COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_tasks,
            AVG(EXTRACT(EPOCH FROM (completed_at - created_at))/3600) as avg_completion_hours
          FROM tasks
          WHERE created_at >= $1
          GROUP BY project_id
        params: ["2024-01-01"]
        expected_time: 100

# 监控和指标配置
monitoring:
  metrics_collection_interval: 5  # seconds

  system_metrics:
    - cpu_usage
    - memory_usage
    - disk_io
    - network_io
    - open_file_descriptors

  application_metrics:
    - response_time_percentiles
    - request_rate
    - error_rate
    - active_connections
    - database_connection_pool
    - cache_hit_rate

  database_metrics:
    - query_execution_time
    - active_connections
    - lock_wait_time
    - index_usage
    - table_scan_rate

# 报告配置
reporting:
  output_formats:
    - html
    - json
    - csv
    - pdf

  charts:
    - response_time_distribution
    - throughput_over_time
    - error_rate_trends
    - resource_usage_heatmap
    - performance_comparison

  thresholds:
    response_time_p95: 200  # ms
    response_time_p99: 500  # ms
    error_rate_max: 1       # percentage
    throughput_min: 1000    # req/s

# 测试数据配置
test_data:
  users:
    count: 1000
    roles: ["admin", "user", "manager"]

  projects:
    count: 100
    tasks_per_project: 50

  tasks:
    total_count: 5000
    statuses: ["pending", "active", "completed", "cancelled"]
    priorities: ["low", "medium", "high", "urgent"]