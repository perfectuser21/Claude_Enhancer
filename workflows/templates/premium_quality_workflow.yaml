# Perfect21 质量优先工作流模板
name: 质量优先完整工作流
version: 2.0
philosophy: "宁可慢，不可错；宁可重，不可漏"
target_quality: production_grade
estimated_time: "根据复杂度动态计算"

metadata:
  description: "质量优先的完整开发工作流，适用于生产级别的功能开发"
  suitable_for: ["新功能开发", "重要模块重构", "关键系统组件"]
  required_agents: ["orchestrator", "project-manager", "business-analyst", "technical-writer"]
  optional_agents: ["根据项目类型动态选择"]

# ===== Claude Code分层执行策略 =====
execution_strategy:
  mode: "layered_sequential_with_parallel_groups"
  quality_first: true
  thinking_enhancement: true

stages:
  # ===== 第1层：深度理解阶段 =====
  - name: deep_understanding
    description: "多角度深度理解需求，确保需求一致性"
    execution_mode: parallel_then_sync
    thinking_mode: ultrathink

    claude_instruction: |
      ## 第1层执行：深度需求理解

      请**并行调用**以下agents进行多角度需求分析：

      Task(
          subagent_type="project-manager",
          description="从产品管理角度分析需求",
          prompt="请从产品角度深度分析这个需求：{task_description}

          分析要点：
          1. 用户价值和业务价值
          2. 功能范围和边界
          3. 优先级和依赖关系
          4. 成功标准和验收条件
          5. 风险评估和缓解策略

          输出格式：产品需求文档(PRD)格式"
      )

      Task(
          subagent_type="business-analyst",
          description="从业务分析角度理解需求",
          prompt="请从业务角度深度分析这个需求：{task_description}

          分析要点：
          1. 业务流程和用例分析
          2. 干系人分析和影响评估
          3. 业务规则和约束条件
          4. 数据流和信息架构
          5. 合规性和法规要求

          输出格式：业务需求文档(BRD)格式"
      )

      Task(
          subagent_type="technical-writer",
          description="从技术文档角度理解需求",
          prompt="请从文档和用户角度分析这个需求：{task_description}

          分析要点：
          1. 用户交互流程和体验
          2. 功能描述的准确性和完整性
          3. 技术术语和概念定义
          4. 文档结构和信息架构
          5. 用户帮助和错误处理

          输出格式：用户需求文档(URD)格式"
      )

    # 🔴 同步点1：需求共识检查
    sync_point:
      name: requirements_consensus
      type: cross_validation
      instruction: |
        ## 需求共识同步点检查

        请**仔细对比**上述三个agents的输出：

        1. **一致性检查**：
           - 识别共同理解的部分
           - 找出理解分歧的地方
           - 分析分歧的根本原因

        2. **分歧解决**：
           如果发现分歧，请：
           - 让三个agents互相评审对方的理解
           - 组织"虚拟需求澄清会议"
           - 达成统一的需求理解

        3. **输出要求**：
           生成unified_requirements.md，包含：
           - 一致的需求描述
           - 明确的功能边界
           - 统一的验收标准
           - 识别的风险和依赖

        **质量标准**: 三个agents必须对核心需求100%达成一致

      validation_criteria:
        - requirement_consistency: "三方理解一致性 > 95%"
        - scope_clarity: "功能边界清晰明确"
        - acceptance_criteria: "验收标准可执行"
        - risk_identification: "主要风险已识别"

    outputs:
      - unified_requirements.md
      - stakeholder_analysis.md
      - risk_assessment.md

    quality_gate:
      checklist: "knowledge/checklists/quality_gates.md#pre-implementation"
      must_pass: true

  # ===== 第2层：架构设计阶段 =====
  - name: architecture_design
    description: "分层架构设计，确保设计一致性"
    execution_mode: sequential_with_review
    thinking_mode: think_hard
    depends_on: [deep_understanding]

    claude_instruction: |
      ## 第2层执行：分层架构设计

      基于unified_requirements.md，请**按顺序**调用以下agents进行架构设计：

      ### 步骤1：API设计（基础）
      Task(
          subagent_type="api-designer",
          description="设计API接口规范",
          prompt="基于需求文档，请设计完整的API接口：

          设计要点：
          1. RESTful API设计原则
          2. 请求/响应数据结构
          3. 错误码和异常处理
          4. 认证授权机制
          5. 版本控制策略
          6. 限流和安全策略

          请参考：knowledge/patterns/best_practices.md#api-design
          输出：OpenAPI 3.1规范文件"
      )

      **等待API设计完成后，再进行后续设计**

      ### 步骤2：后端架构设计（依赖API）
      Task(
          subagent_type="backend-architect",
          description="基于API设计后端架构",
          prompt="基于API规范，设计后端架构：

          设计要点：
          1. 系统架构模式（分层、微服务等）
          2. 数据访问层设计
          3. 业务逻辑层设计
          4. 缓存策略和性能优化
          5. 安全实现方案
          6. 监控和日志策略

          请参考：knowledge/patterns/best_practices.md#backend-architecture
          输出：后端架构设计文档"
      )

      ### 步骤3：数据库设计（依赖后端架构）
      Task(
          subagent_type="database-specialist",
          description="设计数据库模型",
          prompt="基于后端架构，设计数据库：

          设计要点：
          1. 实体关系模型(ERD)
          2. 数据库表结构设计
          3. 索引策略和性能优化
          4. 数据迁移策略
          5. 备份和恢复方案
          6. 数据安全和隐私保护

          请参考：knowledge/patterns/best_practices.md#database-design
          输出：数据库设计文档和DDL脚本"
      )

      ### 步骤4：前端架构设计（依赖API）
      Task(
          subagent_type="frontend-specialist",
          description="设计前端架构",
          prompt="基于API规范，设计前端架构：

          设计要点：
          1. 组件架构和状态管理
          2. 路由设计和页面结构
          3. 用户界面设计原则
          4. 性能优化策略
          5. 错误处理和用户体验
          6. 无障碍性和响应式设计

          请参考：knowledge/patterns/best_practices.md#frontend-architecture
          输出：前端架构设计文档"
      )

    cross_review: true

    # 🔴 同步点2：架构评审
    sync_point:
      name: architecture_review
      type: multi_agent_review
      instruction: |
        ## 架构设计交叉评审

        现在请召集**多个角度的expert reviewer**对架构进行评审：

        Task(
            subagent_type="security-auditor",
            description="从安全角度评审架构",
            prompt="请从安全视角评审整个架构设计：

            评审重点：
            1. 认证和授权机制的安全性
            2. 数据传输和存储的安全性
            3. 输入验证和SQL注入防护
            4. API安全最佳实践
            5. 潜在的安全风险点

            请给出具体的改进建议和风险缓解方案"
        )

        Task(
            subagent_type="performance-engineer",
            description="从性能角度评审架构",
            prompt="请从性能视角评审整个架构设计：

            评审重点：
            1. 数据库查询性能和索引策略
            2. API响应时间和吞吐量
            3. 缓存策略的有效性
            4. 前端性能和用户体验
            5. 系统瓶颈和扩展性

            请给出具体的性能优化建议"
        )

        Task(
            subagent_type="devops-engineer",
            description="从运维角度评审架构",
            prompt="请从DevOps视角评审整个架构设计：

            评审重点：
            1. 部署架构的可操作性
            2. 监控和告警策略
            3. 日志收集和分析
            4. 容灾和备份方案
            5. CI/CD集成便利性

            请给出部署和运维方面的建议"
        )

        **评审流程**：
        1. 每个reviewer独立进行评审
        2. 提出具体的改进建议
        3. 架构师响应评审意见并调整设计
        4. 所有reviewer确认修改后的架构

        **质量标准**: 所有reviewers必须approve架构设计

      validation_criteria:
        - security_approval: "安全评审通过，无高风险项"
        - performance_approval: "性能评审通过，满足目标指标"
        - devops_approval: "运维评审通过，可部署可维护"
        - design_consistency: "API、后端、数据库、前端架构一致"

    outputs:
      - api_specification.yaml
      - backend_architecture.md
      - database_design.md
      - frontend_architecture.md
      - architecture_review_report.md

    quality_gate:
      checklist: "knowledge/checklists/quality_gates.md#architecture-design"
      must_pass: true

  # ===== 第3层：并行实现阶段 =====
  - name: parallel_implementation
    description: "按领域并行实现，确保代码质量"
    execution_mode: domain_parallel
    thinking_mode: think_with_examples
    depends_on: [architecture_design]

    claude_instruction: |
      ## 第3层执行：领域并行实现

      基于架构设计文档，现在可以**并行实现**不同领域的代码：

      ### 后端实现域
      Task(
          subagent_type="backend-architect",
          description="实现后端API和业务逻辑",
          prompt="基于架构设计，实现完整的后端系统：

          实现要点：
          1. 按照OpenAPI规范实现所有API端点
          2. 实现业务逻辑和数据访问层
          3. 集成认证授权机制
          4. 实现缓存和性能优化
          5. 添加日志和监控点
          6. 错误处理和异常管理

          代码质量要求：
          - 遵循SOLID原则
          - 单一职责，低耦合高内聚
          - 完整的错误处理
          - 必要的注释和文档

          请参考：knowledge/patterns/best_practices.md
          同时进行单元测试开发"
      )

      ### 前端实现域
      Task(
          subagent_type="frontend-specialist",
          description="实现前端界面和交互",
          prompt="基于架构设计和API规范，实现前端应用：

          实现要点：
          1. 实现所有用户界面组件
          2. 集成API调用和状态管理
          3. 实现路由和页面导航
          4. 错误处理和用户反馈
          5. 响应式设计和无障碍支持
          6. 性能优化和用户体验

          代码质量要求：
          - 组件化和可复用性
          - TypeScript类型安全
          - 错误边界和异常处理
          - 用户友好的交互设计

          请参考：knowledge/patterns/best_practices.md
          同时开发组件测试"
      )

      ### 数据层实现域
      Task(
          subagent_type="database-specialist",
          description="实现数据库和数据访问层",
          prompt="基于数据库设计，实现数据存储层：

          实现要点：
          1. 创建数据库表和索引
          2. 实现数据迁移脚本
          3. 数据访问层和ORM配置
          4. 查询优化和性能调优
          5. 数据备份和恢复脚本
          6. 数据安全和访问控制

          代码质量要求：
          - 规范的SQL和索引设计
          - 事务边界控制
          - 数据一致性保证
          - 迁移脚本可回滚

          输出：数据库脚本和数据访问层代码"
      )

      ### 测试实现域
      Task(
          subagent_type="test-engineer",
          description="实现全面的测试套件",
          prompt="为整个系统实现完整的测试：

          测试策略：
          1. 单元测试：覆盖率>90%
          2. 集成测试：API和数据库集成
          3. 端到端测试：关键用户流程
          4. 性能测试：响应时间和负载
          5. 安全测试：常见攻击向量
          6. 兼容性测试：浏览器和设备

          测试质量要求：
          - 测试独立性和可重复性
          - 测试数据工厂模式
          - 清晰的断言和错误信息
          - CI/CD集成友好

          请参考：knowledge/patterns/best_practices.md#testing
          输出：完整的测试套件"
      )

    # 实现过程中的质量检查
    continuous_quality_checks:
      - trigger: "every_100_lines"
        action: "运行lint和格式检查"
      - trigger: "every_function"
        action: "单元测试覆盖"
      - trigger: "every_api_endpoint"
        action: "API集成测试"
      - trigger: "every_commit"
        action: "安全扫描检查"

    # 🔴 同步点3：集成准备检查
    sync_point:
      name: integration_readiness
      type: comprehensive_check
      instruction: |
        ## 集成准备度检查

        现在所有领域的实现都完成了，请进行集成前的全面检查：

        ### 1. 接口一致性检查
        - 前后端API调用是否与OpenAPI规范完全一致
        - 数据结构和字段类型是否匹配
        - 错误码和异常处理是否统一

        ### 2. 功能完整性检查
        - 所有需求的功能点是否都已实现
        - 用户故事的验收标准是否都能满足
        - 边界条件和异常情况处理是否完整

        ### 3. 代码质量检查
        - 运行完整的代码质量扫描
        - 检查测试覆盖率是否达标
        - 确认所有agents都遵循了代码规范

        ### 4. 安全性检查
        - 运行SAST静态安全扫描
        - 检查依赖包安全漏洞
        - 验证认证授权实现正确性

        **集成标准**：所有检查项必须通过才能进入下一阶段

      validation_criteria:
        - api_consistency: "前后端接口100%一致"
        - feature_completeness: "功能完整性100%"
        - code_quality: "代码质量分数>90"
        - test_coverage: "测试覆盖率>90%"
        - security_scan: "无高危安全漏洞"
        - performance_baseline: "性能基准测试通过"

    outputs:
      - backend_implementation/
      - frontend_implementation/
      - database_scripts/
      - test_suites/
      - integration_report.md

    quality_gate:
      checklist: "knowledge/checklists/quality_gates.md#post-implementation"
      must_pass: true

  # ===== 第4层：全面测试阶段 =====
  - name: comprehensive_testing
    description: "多维度全面测试，确保产品质量"
    execution_mode: parallel_test_suites
    thinking_mode: adversarial_thinking
    depends_on: [parallel_implementation]

    claude_instruction: |
      ## 第4层执行：全面并行测试

      现在进行生产级别的全面测试，请**并行调用**所有测试specialists：

      Task(
          subagent_type="test-engineer",
          description="执行功能和回归测试",
          prompt="执行全面的功能测试套件：

          测试范围：
          1. 单元测试执行和分析
          2. 集成测试全面验证
          3. API测试和契约测试
          4. 回归测试确保无破坏
          5. 边界测试和异常测试
          6. 数据一致性测试

          测试报告要求：
          - 测试覆盖率详细报告
          - 失败测试的根因分析
          - 测试执行时间分析
          - 质量趋势对比分析

          输出：功能测试完整报告"
      )

      Task(
          subagent_type="e2e-test-specialist",
          description="执行端到端业务流程测试",
          prompt="执行关键业务流程的E2E测试：

          测试场景：
          1. 完整用户注册和登录流程
          2. 核心业务功能端到端验证
          3. 错误处理和恢复流程
          4. 多用户并发场景测试
          5. 跨浏览器兼容性测试
          6. 移动端响应式测试

          自动化要求：
          - 使用Playwright或类似工具
          - 测试数据自动化管理
          - 截图和视频记录
          - CI/CD集成就绪

          输出：E2E测试报告和自动化脚本"
      )

      Task(
          subagent_type="performance-tester",
          description="执行性能和负载测试",
          prompt="执行全面的性能测试：

          性能测试类型：
          1. 基准性能测试：API响应时间
          2. 负载测试：正常用户负载下表现
          3. 压力测试：系统极限承载能力
          4. 容量测试：资源使用情况分析
          5. 稳定性测试：长时间运行稳定性
          6. 瓶颈分析：性能瓶颈识别

          性能指标要求：
          - API响应时间 P95 < 200ms
          - 系统吞吐量满足需求
          - 资源使用率合理
          - 无内存泄露

          输出：性能测试报告和优化建议"
      )

      Task(
          subagent_type="security-auditor",
          description="执行安全测试和审计",
          prompt="执行全面的安全测试：

          安全测试范围：
          1. OWASP Top 10安全漏洞扫描
          2. 认证和授权机制测试
          3. SQL注入和XSS攻击测试
          4. CSRF和会话劫持测试
          5. 敏感数据泄露检查
          6. API安全性验证

          安全测试工具：
          - 静态代码安全扫描(SAST)
          - 动态应用安全测试(DAST)
          - 依赖组件安全扫描
          - 渗透测试模拟

          输出：安全审计报告和修复建议"
      )

      Task(
          subagent_type="accessibility-auditor",
          description="执行无障碍性和可用性测试",
          prompt="执行无障碍性和用户体验测试：

          测试标准：
          1. WCAG 2.1 AA级别合规性
          2. 屏幕阅读器兼容性
          3. 键盘导航和操作
          4. 色彩对比度和视觉设计
          5. 移动设备可用性
          6. 多语言和国际化支持

          可用性测试：
          - 用户任务完成率
          - 任务完成时间
          - 用户错误率
          - 用户满意度评估

          输出：无障碍性和可用性测试报告"
      )

    # 🔴 同步点4：综合质量门
    sync_point:
      name: comprehensive_quality_gate
      type: multi_dimensional_validation
      instruction: |
        ## 综合质量门验证

        现在需要对所有测试结果进行综合评估：

        ### 1. 功能质量评估
        - 功能测试通过率必须100%
        - E2E测试核心流程必须100%通过
        - 回归测试无新增问题

        ### 2. 性能质量评估
        - API响应时间P95 < 200ms ✅
        - 系统吞吐量满足预期负载 ✅
        - 资源使用率合理且可扩展 ✅
        - 无性能回归问题 ✅

        ### 3. 安全质量评估
        - 无高危安全漏洞 ✅
        - 认证授权机制正确 ✅
        - 常见攻击向量防护有效 ✅
        - 敏感数据处理合规 ✅

        ### 4. 用户体验质量评估
        - WCAG 2.1 AA级别合规 ✅
        - 跨浏览器兼容性良好 ✅
        - 移动端体验优秀 ✅
        - 错误处理用户友好 ✅

        ### 5. 代码质量评估
        - 代码覆盖率 > 90% ✅
        - 代码质量分数 > 90 ✅
        - 技术债务合理 ✅
        - 文档完整准确 ✅

        **放行标准**: 所有维度评估都必须达到优秀水平

      validation_criteria:
        - functional_quality: "功能测试100%通过"
        - performance_quality: "性能指标100%达标"
        - security_quality: "安全扫描无高危漏洞"
        - ux_quality: "用户体验评估优秀"
        - code_quality: "代码质量指标优秀"
        - overall_readiness: "生产就绪度评估通过"

    outputs:
      - functional_test_report.md
      - e2e_test_report.md
      - performance_test_report.md
      - security_audit_report.md
      - accessibility_test_report.md
      - comprehensive_quality_report.md

    quality_gate:
      checklist: "knowledge/checklists/quality_gates.md#comprehensive-testing"
      must_pass: true

  # ===== 第5层：部署准备阶段 =====
  - name: deployment_preparation
    description: "生产部署准备，确保运维就绪"
    execution_mode: deployment_pipeline
    thinking_mode: think_production_ready
    depends_on: [comprehensive_testing]

    claude_instruction: |
      ## 第5层执行：生产部署准备

      现在准备生产环境部署，请调用运维相关的agents：

      Task(
          subagent_type="devops-engineer",
          description="容器化和编排配置",
          prompt="准备生产级别的容器化部署：

          容器化要求：
          1. 多阶段Docker构建优化
          2. 非root用户安全运行
          3. 健康检查和优雅关闭
          4. 环境变量和配置管理
          5. 日志收集和聚合配置
          6. 监控指标暴露

          编排配置：
          - Kubernetes部署清单
          - 服务发现和负载均衡
          - 存储和网络配置
          - 资源限制和HPA配置

          输出：完整的部署配置文件"
      )

      Task(
          subagent_type="deployment-manager",
          description="部署策略和发布计划",
          prompt="制定生产部署策略：

          部署策略：
          1. 蓝绿部署或滚动更新策略
          2. 数据库迁移和回滚方案
          3. 配置更新和环境准备
          4. 服务依赖和启动顺序
          5. 健康检查和验证流程
          6. 发布时间窗口和通知计划

          应急预案：
          - 快速回滚程序
          - 故障隔离和恢复
          - 事故响应流程
          - 联系人和升级路径

          输出：部署手册和应急预案"
      )

      Task(
          subagent_type="monitoring-specialist",
          description="监控和告警配置",
          prompt="配置生产环境监控：

          监控配置：
          1. 应用性能指标(APM)
          2. 基础设施监控指标
          3. 业务指标和KPI监控
          4. 日志聚合和分析
          5. 分布式链路追踪
          6. 错误率和可用性监控

          告警配置：
          - 关键指标阈值设置
          - 告警级别和通知规则
          - 值班轮换和升级机制
          - 告警疲劳防护

          输出：监控和告警配置文件"
      )

    # 🔴 同步点5：生产就绪验证
    sync_point:
      name: production_readiness
      type: final_validation
      instruction: |
        ## 生产就绪最终验证

        这是发布前的最后检查，请确保所有生产要素都已就绪：

        ### 1. 部署环境验证
        - 容器镜像构建和安全扫描通过
        - Kubernetes集群资源充足
        - 网络和存储配置正确
        - 环境变量和配置文件准备完毕

        ### 2. 数据层验证
        - 数据库迁移脚本测试通过
        - 数据备份和恢复流程验证
        - 连接池和性能参数调优
        - 数据访问权限配置正确

        ### 3. 监控运维验证
        - 监控指标收集正常
        - 告警规则测试有效
        - 日志收集和检索正常
        - 运维文档和流程完备

        ### 4. 安全合规验证
        - 生产环境安全加固
        - SSL证书和加密配置
        - 网络安全和防火墙规则
        - 审计日志和合规检查

        ### 5. 业务连续性验证
        - 服务依赖关系梳理
        - 故障切换和恢复测试
        - 容量规划和扩容预案
        - 业务影响评估和沟通计划

        **最终确认**: 所有验证项目都通过，系统已为生产发布做好准备

      validation_criteria:
        - deployment_ready: "部署配置测试通过"
        - monitoring_ready: "监控告警配置生效"
        - security_hardened: "生产环境安全加固完成"
        - backup_verified: "备份恢复流程验证通过"
        - documentation_complete: "运维文档完整准确"
        - team_prepared: "运维团队和流程就绪"

    outputs:
      - deployment_configs/
      - monitoring_configs/
      - deployment_handbook.md
      - emergency_response_plan.md
      - production_readiness_report.md

    quality_gate:
      checklist: "knowledge/checklists/quality_gates.md#pre-release"
      must_pass: true

# ===== Hook机制配置 =====
hooks:
  pre_execution:
    - name: context_validation
      description: "验证执行上下文"
      action: "检查依赖文件存在性和权限"

    - name: agent_availability
      description: "检查agent可用性"
      action: "确认所需agents都可调用"

    - name: quality_baseline
      description: "建立质量基线"
      action: "记录初始质量指标"

  post_execution:
    - name: output_validation
      description: "验证输出质量"
      action: "检查输出格式和完整性"

    - name: artifact_collection
      description: "收集执行产物"
      action: "整理和归档所有输出文件"

    - name: quality_measurement
      description: "质量度量"
      action: "测量和记录质量指标"

    - name: knowledge_update
      description: "知识库更新"
      action: "将经验教训写入知识库"

  on_error:
    - name: error_analysis
      description: "错误根因分析"
      action: "分析失败原因并记录"

    - name: rollback_preparation
      description: "回滚准备"
      action: "准备回滚到上一个稳定状态"

    - name: team_notification
      description: "团队通知"
      action: "通知相关人员处理异常"

  on_quality_gate_failure:
    - name: failure_analysis
      description: "质量门失败分析"
      action: "详细分析失败原因和影响"

    - name: improvement_plan
      description: "改进计划"
      action: "制定质量改进计划"

    - name: process_optimization
      description: "流程优化"
      action: "考虑流程改进机会"

# ===== 思考增强配置 =====
thinking_enhancement:
  critical_decisions:
    trigger_conditions:
      - "架构选择"
      - "安全机制设计"
      - "性能瓶颈解决"
      - "技术债务处理"
    strategy: "multi_agent_debate"
    instruction: "召集相关experts进行方案辩论，必须达成共识"

  complex_problems:
    trigger_conditions:
      - "跨系统集成"
      - "大规模重构"
      - "性能优化"
    strategy: "ultrathink_with_examples"
    instruction: "深度思考并提供具体案例和最佳实践参考"

  security_concerns:
    trigger_conditions:
      - "认证授权设计"
      - "数据安全处理"
      - "API安全实现"
    strategy: "adversarial_thinking"
    instruction: "从攻击者角度思考，识别安全风险点"

# ===== 质量保证配置 =====
quality_assurance:
  code_standards:
    coverage_threshold: 90
    complexity_threshold: 10
    duplication_threshold: 5
    security_scan: "mandatory"

  performance_standards:
    api_response_time_p95: "200ms"
    page_load_time: "3s"
    throughput_target: "1000 TPS"
    resource_utilization: "< 80%"

  security_standards:
    vulnerability_tolerance: "zero_high_critical"
    authentication_required: true
    encryption_in_transit: true
    encryption_at_rest: true

  documentation_standards:
    api_documentation: "openapi_3.1"
    architecture_documentation: "c4_model"
    user_documentation: "gitiles_markdown"
    operational_documentation: "runbook_format"

# ===== 执行配置 =====
execution_config:
  timeout_settings:
    understanding_stage: "30min"
    design_stage: "45min"
    implementation_stage: "120min"
    testing_stage: "60min"
    deployment_stage: "30min"

  retry_policies:
    agent_call_retry: 3
    quality_gate_retry: 2
    sync_point_retry: 1

  parallel_limits:
    max_concurrent_agents: 5
    max_parallel_tasks: 8
    resource_allocation: "high_memory"

  output_management:
    artifact_retention: "30_days"
    log_level: "detailed"
    report_format: "markdown_with_metrics"